#region GraphQL type helpers
public static class GraphQlTypes
{
    public const string Boolean = "Boolean";
    public const string Float = "Float";
    public const string Id = "ID";
    public const string Int = "Int";
    public const string String = "String";

    public const string AppScreen = "AppScreen";
    public const string EnergyResolution = "EnergyResolution";
    public const string HeatingSource = "HeatingSource";
    public const string HomeAvatar = "HomeAvatar";
    public const string HomeType = "HomeType";
    public const string PriceLevel = "PriceLevel";
    public const string PriceResolution = "PriceResolution";

    public const string Address = "Address";
    public const string Consumption = "Consumption";
    public const string ContactInfo = "ContactInfo";
    public const string Home = "Home";
    public const string HomeConsumptionConnection = "HomeConsumptionConnection";
    public const string HomeConsumptionEdge = "HomeConsumptionEdge";
    public const string HomeConsumptionPageInfo = "HomeConsumptionPageInfo";
    public const string HomeFeatures = "HomeFeatures";
    public const string HomeProductionConnection = "HomeProductionConnection";
    public const string HomeProductionEdge = "HomeProductionEdge";
    public const string HomeProductionPageInfo = "HomeProductionPageInfo";
    public const string LegalEntity = "LegalEntity";
    public const string LiveMeasurement = "LiveMeasurement";
    public const string MeteringPointData = "MeteringPointData";
    public const string MeterReadingResponse = "MeterReadingResponse";
    public const string Price = "Price";
    public const string PriceInfo = "PriceInfo";
    public const string Production = "Production";
    public const string PushNotificationResponse = "PushNotificationResponse";
    public const string Query = "Query";
    public const string RootMutation = "RootMutation";
    public const string RootSubscription = "RootSubscription";
    public const string Subscription = "Subscription";
    public const string SubscriptionPriceConnection = "SubscriptionPriceConnection";
    public const string SubscriptionPriceConnectionPageInfo = "SubscriptionPriceConnectionPageInfo";
    public const string SubscriptionPriceEdge = "SubscriptionPriceEdge";
    public const string Viewer = "Viewer";

    public const string MeterReadingInput = "MeterReadingInput";
    public const string PushNotificationInput = "PushNotificationInput";
    public const string UpdateHomeInput = "UpdateHomeInput";

    public const string PageInfo = "PageInfo";

    public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
        new Dictionary<Type, string>
        {
            { typeof(string), "String" },
            { typeof(DateTimeOffset), "String" },
            { typeof(decimal), "Float" },
            { typeof(Guid), "ID" },
            { typeof(int), "Int" },
            { typeof(bool), "Boolean" },
            { typeof(MeterReadingInput), "MeterReadingInput" },
            { typeof(PushNotificationInput), "PushNotificationInput" },
            { typeof(UpdateHomeInput), "UpdateHomeInput" }
        };
}
#endregion

#region enums
public enum HomeAvatar
{
    [EnumMember(Value = "APARTMENT")] Apartment,
    [EnumMember(Value = "ROWHOUSE")] Rowhouse,
    [EnumMember(Value = "FLOORHOUSE1")] Floorhouse1,
    [EnumMember(Value = "FLOORHOUSE2")] Floorhouse2,
    [EnumMember(Value = "FLOORHOUSE3")] Floorhouse3,
    [EnumMember(Value = "COTTAGE")] Cottage,
    [EnumMember(Value = "CASTLE")] Castle
}

public enum HomeType
{
    [EnumMember(Value = "APARTMENT")] Apartment,
    [EnumMember(Value = "ROWHOUSE")] Rowhouse,
    [EnumMember(Value = "HOUSE")] House,
    [EnumMember(Value = "COTTAGE")] Cottage
}

public enum HeatingSource
{
    [EnumMember(Value = "AIR2AIR_HEATPUMP")] Air2AirHeatpump,
    [EnumMember(Value = "ELECTRICITY")] Electricity,
    [EnumMember(Value = "GROUND")] Ground,
    [EnumMember(Value = "DISTRICT_HEATING")] DistrictHeating,
    [EnumMember(Value = "ELECTRIC_BOILER")] ElectricBoiler,
    [EnumMember(Value = "AIR2WATER_HEATPUMP")] Air2WaterHeatpump,
    [EnumMember(Value = "OTHER")] Other
}

public enum PriceLevel
{
    [EnumMember(Value = "NORMAL")] Normal,
    [EnumMember(Value = "CHEAP")] Cheap,
    [EnumMember(Value = "VERY_CHEAP")] VeryCheap,
    [EnumMember(Value = "EXPENSIVE")] Expensive,
    [EnumMember(Value = "VERY_EXPENSIVE")] VeryExpensive
}

public enum PriceResolution
{
    [EnumMember(Value = "HOURLY")] Hourly,
    [EnumMember(Value = "DAILY")] Daily
}

public enum EnergyResolution
{
    [EnumMember(Value = "HOURLY")] Hourly,
    [EnumMember(Value = "DAILY")] Daily,
    [EnumMember(Value = "WEEKLY")] Weekly,
    [EnumMember(Value = "MONTHLY")] Monthly,
    [EnumMember(Value = "ANNUAL")] Annual
}

public enum AppScreen
{
    [EnumMember(Value = "HOME")] Home,
    [EnumMember(Value = "REPORTS")] Reports,
    [EnumMember(Value = "CONSUMPTION")] Consumption,
    [EnumMember(Value = "COMPARISON")] Comparison,
    [EnumMember(Value = "DISAGGREGATION")] Disaggregation,
    [EnumMember(Value = "HOME_PROFILE")] HomeProfile,
    [EnumMember(Value = "CUSTOMER_PROFILE")] CustomerProfile,
    [EnumMember(Value = "METER_READING")] MeterReading,
    [EnumMember(Value = "NOTIFICATIONS")] Notifications,
    [EnumMember(Value = "INVOICES")] Invoices
}
#endregion

#region directives
public class SkipDirective : GraphQlDirective
{
    public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
    {
        AddArgument("if", @if);
    }
}

public class IncludeDirective : GraphQlDirective
{
    public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
    {
        AddArgument("if", @if);
    }
}
#endregion

#region builder classes
public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "viewer", IsComplex = true, QueryBuilderType = typeof(ViewerQueryBuilder) }
        };

    protected override string TypeName { get { return "Query"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public QueryQueryBuilder(string operationName = null) : base("query", operationName)
    {
    }

    public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
    {
        return WithParameterInternal(parameter);
    }

    public QueryQueryBuilder WithViewer(ViewerQueryBuilder viewerQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("viewer", alias, viewerQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public QueryQueryBuilder ExceptViewer()
    {
        return ExceptField("viewer");
    }
}

public partial class ViewerQueryBuilder : GraphQlQueryBuilder<ViewerQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "login" },
            new GraphQlFieldMetadata { Name = "name" },
            new GraphQlFieldMetadata { Name = "accountType", IsComplex = true },
            new GraphQlFieldMetadata { Name = "homes", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
            new GraphQlFieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) }
        };

    protected override string TypeName { get { return "Viewer"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ViewerQueryBuilder WithLogin(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("login", alias, new GraphQlDirective[] { skip, include });
    }

    public ViewerQueryBuilder ExceptLogin()
    {
        return ExceptField("login");
    }

    public ViewerQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
    }

    public ViewerQueryBuilder ExceptName()
    {
        return ExceptField("name");
    }

    public ViewerQueryBuilder WithAccountType(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("accountType", alias, new GraphQlDirective[] { skip, include });
    }

    public ViewerQueryBuilder ExceptAccountType()
    {
        return ExceptField("accountType");
    }

    public ViewerQueryBuilder WithHomes(HomeQueryBuilder homeQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("homes", alias, homeQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public ViewerQueryBuilder ExceptHomes()
    {
        return ExceptField("homes");
    }

    public ViewerQueryBuilder WithHome(HomeQueryBuilder homeQueryBuilder, QueryBuilderParameter<Guid> id, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id, FormatMask = "N"} );
        return WithObjectField("home", alias, homeQueryBuilder, new GraphQlDirective[] { skip, include }, args);
    }

    public ViewerQueryBuilder ExceptHome()
    {
        return ExceptField("home");
    }
}

public partial class HomeQueryBuilder : GraphQlQueryBuilder<HomeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "timeZone" },
            new GraphQlFieldMetadata { Name = "appNickname" },
            new GraphQlFieldMetadata { Name = "appAvatar" },
            new GraphQlFieldMetadata { Name = "size" },
            new GraphQlFieldMetadata { Name = "type" },
            new GraphQlFieldMetadata { Name = "numberOfResidents" },
            new GraphQlFieldMetadata { Name = "primaryHeatingSource" },
            new GraphQlFieldMetadata { Name = "hasVentilationSystem" },
            new GraphQlFieldMetadata { Name = "mainFuseSize" },
            new GraphQlFieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) },
            new GraphQlFieldMetadata { Name = "owner", IsComplex = true, QueryBuilderType = typeof(LegalEntityQueryBuilder) },
            new GraphQlFieldMetadata { Name = "meteringPointData", IsComplex = true, QueryBuilderType = typeof(MeteringPointDataQueryBuilder) },
            new GraphQlFieldMetadata { Name = "currentSubscription", IsComplex = true, QueryBuilderType = typeof(SubscriptionQueryBuilder) },
            new GraphQlFieldMetadata { Name = "subscriptions", IsComplex = true, QueryBuilderType = typeof(SubscriptionQueryBuilder) },
            new GraphQlFieldMetadata { Name = "consumption", IsComplex = true, QueryBuilderType = typeof(HomeConsumptionConnectionQueryBuilder) },
            new GraphQlFieldMetadata { Name = "production", IsComplex = true, QueryBuilderType = typeof(HomeProductionConnectionQueryBuilder) },
            new GraphQlFieldMetadata { Name = "features", IsComplex = true, QueryBuilderType = typeof(HomeFeaturesQueryBuilder) }
        };

    protected override string TypeName { get { return "Home"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public HomeQueryBuilder WithTimeZone(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("timeZone", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptTimeZone()
    {
        return ExceptField("timeZone");
    }

    public HomeQueryBuilder WithAppNickname(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("appNickname", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptAppNickname()
    {
        return ExceptField("appNickname");
    }

    public HomeQueryBuilder WithAppAvatar(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("appAvatar", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptAppAvatar()
    {
        return ExceptField("appAvatar");
    }

    public HomeQueryBuilder WithSize(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("size", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptSize()
    {
        return ExceptField("size");
    }

    public HomeQueryBuilder WithType(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("type", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptType()
    {
        return ExceptField("type");
    }

    public HomeQueryBuilder WithNumberOfResidents(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("numberOfResidents", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptNumberOfResidents()
    {
        return ExceptField("numberOfResidents");
    }

    public HomeQueryBuilder WithPrimaryHeatingSource(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("primaryHeatingSource", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptPrimaryHeatingSource()
    {
        return ExceptField("primaryHeatingSource");
    }

    public HomeQueryBuilder WithHasVentilationSystem(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasVentilationSystem", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptHasVentilationSystem()
    {
        return ExceptField("hasVentilationSystem");
    }

    public HomeQueryBuilder WithMainFuseSize(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("mainFuseSize", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptMainFuseSize()
    {
        return ExceptField("mainFuseSize");
    }

    public HomeQueryBuilder WithAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("address", alias, addressQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptAddress()
    {
        return ExceptField("address");
    }

    public HomeQueryBuilder WithOwner(LegalEntityQueryBuilder legalEntityQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("owner", alias, legalEntityQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptOwner()
    {
        return ExceptField("owner");
    }

    public HomeQueryBuilder WithMeteringPointData(MeteringPointDataQueryBuilder meteringPointDataQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("meteringPointData", alias, meteringPointDataQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptMeteringPointData()
    {
        return ExceptField("meteringPointData");
    }

    public HomeQueryBuilder WithCurrentSubscription(SubscriptionQueryBuilder subscriptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("currentSubscription", alias, subscriptionQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptCurrentSubscription()
    {
        return ExceptField("currentSubscription");
    }

    public HomeQueryBuilder WithSubscriptions(SubscriptionQueryBuilder subscriptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("subscriptions", alias, subscriptionQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptSubscriptions()
    {
        return ExceptField("subscriptions");
    }

    public HomeQueryBuilder WithConsumption(HomeConsumptionConnectionQueryBuilder homeConsumptionConnectionQueryBuilder, QueryBuilderParameter<EnergyResolution> resolution, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<DateTimeOffset?> before = null, QueryBuilderParameter<DateTimeOffset?> after = null, QueryBuilderParameter<bool?> filterEmptyNodes = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );
        if (first != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

        if (last != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

        if (before != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before, FormatMask = "yyyy-MM-dd\"T\"HH:mm"} );

        if (after != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after, FormatMask = "yyyy-MM-dd\"T\"HH:mm"} );

        if (filterEmptyNodes != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filterEmptyNodes", ArgumentValue = filterEmptyNodes} );

        return WithObjectField("consumption", alias, homeConsumptionConnectionQueryBuilder, new GraphQlDirective[] { skip, include }, args);
    }

    public HomeQueryBuilder ExceptConsumption()
    {
        return ExceptField("consumption");
    }

    public HomeQueryBuilder WithProduction(HomeProductionConnectionQueryBuilder homeProductionConnectionQueryBuilder, QueryBuilderParameter<EnergyResolution> resolution, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<DateTimeOffset?> before = null, QueryBuilderParameter<DateTimeOffset?> after = null, QueryBuilderParameter<bool?> filterEmptyNodes = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );
        if (first != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

        if (last != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

        if (before != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before, FormatMask = "yyyy-MM-dd\"T\"HH:mm"} );

        if (after != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after, FormatMask = "yyyy-MM-dd\"T\"HH:mm"} );

        if (filterEmptyNodes != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "filterEmptyNodes", ArgumentValue = filterEmptyNodes} );

        return WithObjectField("production", alias, homeProductionConnectionQueryBuilder, new GraphQlDirective[] { skip, include }, args);
    }

    public HomeQueryBuilder ExceptProduction()
    {
        return ExceptField("production");
    }

    public HomeQueryBuilder WithFeatures(HomeFeaturesQueryBuilder homeFeaturesQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("features", alias, homeFeaturesQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeQueryBuilder ExceptFeatures()
    {
        return ExceptField("features");
    }
}

public partial class AddressQueryBuilder : GraphQlQueryBuilder<AddressQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "address1" },
            new GraphQlFieldMetadata { Name = "address2" },
            new GraphQlFieldMetadata { Name = "address3" },
            new GraphQlFieldMetadata { Name = "city" },
            new GraphQlFieldMetadata { Name = "postalCode" },
            new GraphQlFieldMetadata { Name = "country" },
            new GraphQlFieldMetadata { Name = "latitude" },
            new GraphQlFieldMetadata { Name = "longitude" }
        };

    protected override string TypeName { get { return "Address"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public AddressQueryBuilder WithAddress1(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("address1", alias, new GraphQlDirective[] { skip, include });
    }

    public AddressQueryBuilder ExceptAddress1()
    {
        return ExceptField("address1");
    }

    public AddressQueryBuilder WithAddress2(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("address2", alias, new GraphQlDirective[] { skip, include });
    }

    public AddressQueryBuilder ExceptAddress2()
    {
        return ExceptField("address2");
    }

    public AddressQueryBuilder WithAddress3(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("address3", alias, new GraphQlDirective[] { skip, include });
    }

    public AddressQueryBuilder ExceptAddress3()
    {
        return ExceptField("address3");
    }

    public AddressQueryBuilder WithCity(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("city", alias, new GraphQlDirective[] { skip, include });
    }

    public AddressQueryBuilder ExceptCity()
    {
        return ExceptField("city");
    }

    public AddressQueryBuilder WithPostalCode(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("postalCode", alias, new GraphQlDirective[] { skip, include });
    }

    public AddressQueryBuilder ExceptPostalCode()
    {
        return ExceptField("postalCode");
    }

    public AddressQueryBuilder WithCountry(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("country", alias, new GraphQlDirective[] { skip, include });
    }

    public AddressQueryBuilder ExceptCountry()
    {
        return ExceptField("country");
    }

    public AddressQueryBuilder WithLatitude(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("latitude", alias, new GraphQlDirective[] { skip, include });
    }

    public AddressQueryBuilder ExceptLatitude()
    {
        return ExceptField("latitude");
    }

    public AddressQueryBuilder WithLongitude(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("longitude", alias, new GraphQlDirective[] { skip, include });
    }

    public AddressQueryBuilder ExceptLongitude()
    {
        return ExceptField("longitude");
    }
}

public partial class LegalEntityQueryBuilder : GraphQlQueryBuilder<LegalEntityQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "firstName" },
            new GraphQlFieldMetadata { Name = "isCompany" },
            new GraphQlFieldMetadata { Name = "name" },
            new GraphQlFieldMetadata { Name = "middleName" },
            new GraphQlFieldMetadata { Name = "lastName" },
            new GraphQlFieldMetadata { Name = "organizationNo" },
            new GraphQlFieldMetadata { Name = "language" },
            new GraphQlFieldMetadata { Name = "contactInfo", IsComplex = true, QueryBuilderType = typeof(ContactInfoQueryBuilder) },
            new GraphQlFieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(AddressQueryBuilder) }
        };

    protected override string TypeName { get { return "LegalEntity"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public LegalEntityQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public LegalEntityQueryBuilder WithFirstName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("firstName", alias, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptFirstName()
    {
        return ExceptField("firstName");
    }

    public LegalEntityQueryBuilder WithIsCompany(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("isCompany", alias, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptIsCompany()
    {
        return ExceptField("isCompany");
    }

    public LegalEntityQueryBuilder WithName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("name", alias, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptName()
    {
        return ExceptField("name");
    }

    public LegalEntityQueryBuilder WithMiddleName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("middleName", alias, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptMiddleName()
    {
        return ExceptField("middleName");
    }

    public LegalEntityQueryBuilder WithLastName(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("lastName", alias, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptLastName()
    {
        return ExceptField("lastName");
    }

    public LegalEntityQueryBuilder WithOrganizationNo(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("organizationNo", alias, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptOrganizationNo()
    {
        return ExceptField("organizationNo");
    }

    public LegalEntityQueryBuilder WithLanguage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("language", alias, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptLanguage()
    {
        return ExceptField("language");
    }

    public LegalEntityQueryBuilder WithContactInfo(ContactInfoQueryBuilder contactInfoQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("contactInfo", alias, contactInfoQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptContactInfo()
    {
        return ExceptField("contactInfo");
    }

    public LegalEntityQueryBuilder WithAddress(AddressQueryBuilder addressQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("address", alias, addressQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public LegalEntityQueryBuilder ExceptAddress()
    {
        return ExceptField("address");
    }
}

public partial class ContactInfoQueryBuilder : GraphQlQueryBuilder<ContactInfoQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "email" },
            new GraphQlFieldMetadata { Name = "mobile" }
        };

    protected override string TypeName { get { return "ContactInfo"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ContactInfoQueryBuilder WithEmail(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("email", alias, new GraphQlDirective[] { skip, include });
    }

    public ContactInfoQueryBuilder ExceptEmail()
    {
        return ExceptField("email");
    }

    public ContactInfoQueryBuilder WithMobile(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("mobile", alias, new GraphQlDirective[] { skip, include });
    }

    public ContactInfoQueryBuilder ExceptMobile()
    {
        return ExceptField("mobile");
    }
}

public partial class MeteringPointDataQueryBuilder : GraphQlQueryBuilder<MeteringPointDataQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "consumptionEan" },
            new GraphQlFieldMetadata { Name = "gridCompany" },
            new GraphQlFieldMetadata { Name = "gridAreaCode" },
            new GraphQlFieldMetadata { Name = "priceAreaCode" },
            new GraphQlFieldMetadata { Name = "productionEan" },
            new GraphQlFieldMetadata { Name = "energyTaxType" },
            new GraphQlFieldMetadata { Name = "vatType" },
            new GraphQlFieldMetadata { Name = "estimatedAnnualConsumption" }
        };

    protected override string TypeName { get { return "MeteringPointData"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public MeteringPointDataQueryBuilder WithConsumptionEan(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("consumptionEan", alias, new GraphQlDirective[] { skip, include });
    }

    public MeteringPointDataQueryBuilder ExceptConsumptionEan()
    {
        return ExceptField("consumptionEan");
    }

    public MeteringPointDataQueryBuilder WithGridCompany(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("gridCompany", alias, new GraphQlDirective[] { skip, include });
    }

    public MeteringPointDataQueryBuilder ExceptGridCompany()
    {
        return ExceptField("gridCompany");
    }

    public MeteringPointDataQueryBuilder WithGridAreaCode(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("gridAreaCode", alias, new GraphQlDirective[] { skip, include });
    }

    public MeteringPointDataQueryBuilder ExceptGridAreaCode()
    {
        return ExceptField("gridAreaCode");
    }

    public MeteringPointDataQueryBuilder WithPriceAreaCode(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("priceAreaCode", alias, new GraphQlDirective[] { skip, include });
    }

    public MeteringPointDataQueryBuilder ExceptPriceAreaCode()
    {
        return ExceptField("priceAreaCode");
    }

    public MeteringPointDataQueryBuilder WithProductionEan(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("productionEan", alias, new GraphQlDirective[] { skip, include });
    }

    public MeteringPointDataQueryBuilder ExceptProductionEan()
    {
        return ExceptField("productionEan");
    }

    public MeteringPointDataQueryBuilder WithEnergyTaxType(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("energyTaxType", alias, new GraphQlDirective[] { skip, include });
    }

    public MeteringPointDataQueryBuilder ExceptEnergyTaxType()
    {
        return ExceptField("energyTaxType");
    }

    public MeteringPointDataQueryBuilder WithVatType(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("vatType", alias, new GraphQlDirective[] { skip, include });
    }

    public MeteringPointDataQueryBuilder ExceptVatType()
    {
        return ExceptField("vatType");
    }

    public MeteringPointDataQueryBuilder WithEstimatedAnnualConsumption(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("estimatedAnnualConsumption", alias, new GraphQlDirective[] { skip, include });
    }

    public MeteringPointDataQueryBuilder ExceptEstimatedAnnualConsumption()
    {
        return ExceptField("estimatedAnnualConsumption");
    }
}

public partial class SubscriptionQueryBuilder : GraphQlQueryBuilder<SubscriptionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "subscriber", IsComplex = true, QueryBuilderType = typeof(LegalEntityQueryBuilder) },
            new GraphQlFieldMetadata { Name = "validFrom" },
            new GraphQlFieldMetadata { Name = "validTo" },
            new GraphQlFieldMetadata { Name = "status" },
            new GraphQlFieldMetadata { Name = "priceInfo", IsComplex = true, QueryBuilderType = typeof(PriceInfoQueryBuilder) }
        };

    protected override string TypeName { get { return "Subscription"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public SubscriptionQueryBuilder WithId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("id", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public SubscriptionQueryBuilder WithSubscriber(LegalEntityQueryBuilder legalEntityQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("subscriber", alias, legalEntityQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionQueryBuilder ExceptSubscriber()
    {
        return ExceptField("subscriber");
    }

    public SubscriptionQueryBuilder WithValidFrom(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("validFrom", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionQueryBuilder ExceptValidFrom()
    {
        return ExceptField("validFrom");
    }

    public SubscriptionQueryBuilder WithValidTo(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("validTo", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionQueryBuilder ExceptValidTo()
    {
        return ExceptField("validTo");
    }

    public SubscriptionQueryBuilder WithStatus(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("status", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionQueryBuilder ExceptStatus()
    {
        return ExceptField("status");
    }

    public SubscriptionQueryBuilder WithPriceInfo(PriceInfoQueryBuilder priceInfoQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("priceInfo", alias, priceInfoQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionQueryBuilder ExceptPriceInfo()
    {
        return ExceptField("priceInfo");
    }
}

public partial class PriceInfoQueryBuilder : GraphQlQueryBuilder<PriceInfoQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "current", IsComplex = true, QueryBuilderType = typeof(PriceQueryBuilder) },
            new GraphQlFieldMetadata { Name = "today", IsComplex = true, QueryBuilderType = typeof(PriceQueryBuilder) },
            new GraphQlFieldMetadata { Name = "tomorrow", IsComplex = true, QueryBuilderType = typeof(PriceQueryBuilder) },
            new GraphQlFieldMetadata { Name = "range", IsComplex = true, QueryBuilderType = typeof(SubscriptionPriceConnectionQueryBuilder) }
        };

    protected override string TypeName { get { return "PriceInfo"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PriceInfoQueryBuilder WithCurrent(PriceQueryBuilder priceQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("current", alias, priceQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public PriceInfoQueryBuilder ExceptCurrent()
    {
        return ExceptField("current");
    }

    public PriceInfoQueryBuilder WithToday(PriceQueryBuilder priceQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("today", alias, priceQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public PriceInfoQueryBuilder ExceptToday()
    {
        return ExceptField("today");
    }

    public PriceInfoQueryBuilder WithTomorrow(PriceQueryBuilder priceQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("tomorrow", alias, priceQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public PriceInfoQueryBuilder ExceptTomorrow()
    {
        return ExceptField("tomorrow");
    }

    public PriceInfoQueryBuilder WithRange(SubscriptionPriceConnectionQueryBuilder subscriptionPriceConnectionQueryBuilder, QueryBuilderParameter<PriceResolution> resolution, QueryBuilderParameter<int?> first = null, QueryBuilderParameter<int?> last = null, QueryBuilderParameter<DateTimeOffset?> before = null, QueryBuilderParameter<DateTimeOffset?> after = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );
        if (first != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "first", ArgumentValue = first} );

        if (last != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "last", ArgumentValue = last} );

        if (before != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "before", ArgumentValue = before, FormatMask = "yyyy-MM-dd\"T\"HH:mm"} );

        if (after != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "after", ArgumentValue = after, FormatMask = "yyyy-MM-dd\"T\"HH:mm"} );

        return WithObjectField("range", alias, subscriptionPriceConnectionQueryBuilder, new GraphQlDirective[] { skip, include }, args);
    }

    public PriceInfoQueryBuilder ExceptRange()
    {
        return ExceptField("range");
    }
}

public partial class PriceQueryBuilder : GraphQlQueryBuilder<PriceQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "total" },
            new GraphQlFieldMetadata { Name = "energy" },
            new GraphQlFieldMetadata { Name = "tax" },
            new GraphQlFieldMetadata { Name = "startsAt" },
            new GraphQlFieldMetadata { Name = "currency" },
            new GraphQlFieldMetadata { Name = "level" }
        };

    protected override string TypeName { get { return "Price"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PriceQueryBuilder WithTotal(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("total", alias, new GraphQlDirective[] { skip, include });
    }

    public PriceQueryBuilder ExceptTotal()
    {
        return ExceptField("total");
    }

    public PriceQueryBuilder WithEnergy(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("energy", alias, new GraphQlDirective[] { skip, include });
    }

    public PriceQueryBuilder ExceptEnergy()
    {
        return ExceptField("energy");
    }

    public PriceQueryBuilder WithTax(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("tax", alias, new GraphQlDirective[] { skip, include });
    }

    public PriceQueryBuilder ExceptTax()
    {
        return ExceptField("tax");
    }

    public PriceQueryBuilder WithStartsAt(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("startsAt", alias, new GraphQlDirective[] { skip, include });
    }

    public PriceQueryBuilder ExceptStartsAt()
    {
        return ExceptField("startsAt");
    }

    public PriceQueryBuilder WithCurrency(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { skip, include });
    }

    public PriceQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public PriceQueryBuilder WithLevel(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("level", alias, new GraphQlDirective[] { skip, include });
    }

    public PriceQueryBuilder ExceptLevel()
    {
        return ExceptField("level");
    }
}

public partial class SubscriptionPriceConnectionQueryBuilder : GraphQlQueryBuilder<SubscriptionPriceConnectionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(SubscriptionPriceConnectionPageInfoQueryBuilder) },
            new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SubscriptionPriceEdgeQueryBuilder) },
            new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(PriceQueryBuilder) }
        };

    protected override string TypeName { get { return "SubscriptionPriceConnection"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public SubscriptionPriceConnectionQueryBuilder WithPageInfo(SubscriptionPriceConnectionPageInfoQueryBuilder subscriptionPriceConnectionPageInfoQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("pageInfo", alias, subscriptionPriceConnectionPageInfoQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionQueryBuilder ExceptPageInfo()
    {
        return ExceptField("pageInfo");
    }

    public SubscriptionPriceConnectionQueryBuilder WithEdges(SubscriptionPriceEdgeQueryBuilder subscriptionPriceEdgeQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("edges", alias, subscriptionPriceEdgeQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionQueryBuilder ExceptEdges()
    {
        return ExceptField("edges");
    }

    public SubscriptionPriceConnectionQueryBuilder WithNodes(PriceQueryBuilder priceQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("nodes", alias, priceQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionQueryBuilder ExceptNodes()
    {
        return ExceptField("nodes");
    }
}

public partial class SubscriptionPriceConnectionPageInfoQueryBuilder : GraphQlQueryBuilder<SubscriptionPriceConnectionPageInfoQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "endCursor" },
            new GraphQlFieldMetadata { Name = "hasNextPage" },
            new GraphQlFieldMetadata { Name = "hasPreviousPage" },
            new GraphQlFieldMetadata { Name = "startCursor" },
            new GraphQlFieldMetadata { Name = "resolution" },
            new GraphQlFieldMetadata { Name = "currency" },
            new GraphQlFieldMetadata { Name = "count" },
            new GraphQlFieldMetadata { Name = "precision" },
            new GraphQlFieldMetadata { Name = "minEnergy" },
            new GraphQlFieldMetadata { Name = "minTotal" },
            new GraphQlFieldMetadata { Name = "maxEnergy" },
            new GraphQlFieldMetadata { Name = "maxTotal" }
        };

    protected override string TypeName { get { return "SubscriptionPriceConnectionPageInfo"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithEndCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("endCursor", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptEndCursor()
    {
        return ExceptField("endCursor");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithHasNextPage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptHasNextPage()
    {
        return ExceptField("hasNextPage");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithHasPreviousPage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasPreviousPage", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptHasPreviousPage()
    {
        return ExceptField("hasPreviousPage");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithStartCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("startCursor", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptStartCursor()
    {
        return ExceptField("startCursor");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithResolution(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("resolution", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptResolution()
    {
        return ExceptField("resolution");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithCurrency(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithCount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("count", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptCount()
    {
        return ExceptField("count");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithPrecision(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("precision", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptPrecision()
    {
        return ExceptField("precision");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithMinEnergy(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("minEnergy", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptMinEnergy()
    {
        return ExceptField("minEnergy");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithMinTotal(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("minTotal", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptMinTotal()
    {
        return ExceptField("minTotal");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithMaxEnergy(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("maxEnergy", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptMaxEnergy()
    {
        return ExceptField("maxEnergy");
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder WithMaxTotal(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("maxTotal", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceConnectionPageInfoQueryBuilder ExceptMaxTotal()
    {
        return ExceptField("maxTotal");
    }
}

public partial class PageInfoQueryBuilder : GraphQlQueryBuilder<PageInfoQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "unimplementedField" },
            new GraphQlFieldMetadata { Name = "endCursor" },
            new GraphQlFieldMetadata { Name = "hasNextPage" },
            new GraphQlFieldMetadata { Name = "hasPreviousPage" },
            new GraphQlFieldMetadata { Name = "startCursor" }
        };

    public PageInfoQueryBuilder()
    {
        WithTypeName();
    }

    protected override string TypeName { get { return "PageInfo"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PageInfoQueryBuilder WithUnimplementedField(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("unimplementedField", alias, new GraphQlDirective[] { skip, include });
    }

    public PageInfoQueryBuilder ExceptUnimplementedField()
    {
        return ExceptField("unimplementedField");
    }

    public PageInfoQueryBuilder WithEndCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("endCursor", alias, new GraphQlDirective[] { skip, include });
    }

    public PageInfoQueryBuilder ExceptEndCursor()
    {
        return ExceptField("endCursor");
    }

    public PageInfoQueryBuilder WithHasNextPage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { skip, include });
    }

    public PageInfoQueryBuilder ExceptHasNextPage()
    {
        return ExceptField("hasNextPage");
    }

    public PageInfoQueryBuilder WithHasPreviousPage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasPreviousPage", alias, new GraphQlDirective[] { skip, include });
    }

    public PageInfoQueryBuilder ExceptHasPreviousPage()
    {
        return ExceptField("hasPreviousPage");
    }

    public PageInfoQueryBuilder WithStartCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("startCursor", alias, new GraphQlDirective[] { skip, include });
    }

    public PageInfoQueryBuilder ExceptStartCursor()
    {
        return ExceptField("startCursor");
    }

    public PageInfoQueryBuilder WithSubscriptionPriceConnectionPageInfoFragment(SubscriptionPriceConnectionPageInfoQueryBuilder subscriptionPriceConnectionPageInfoQueryBuilder, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithFragment(subscriptionPriceConnectionPageInfoQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public PageInfoQueryBuilder WithHomeConsumptionPageInfoFragment(HomeConsumptionPageInfoQueryBuilder homeConsumptionPageInfoQueryBuilder, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithFragment(homeConsumptionPageInfoQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public PageInfoQueryBuilder WithHomeProductionPageInfoFragment(HomeProductionPageInfoQueryBuilder homeProductionPageInfoQueryBuilder, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithFragment(homeProductionPageInfoQueryBuilder, new GraphQlDirective[] { skip, include });
    }
}

public partial class SubscriptionPriceEdgeQueryBuilder : GraphQlQueryBuilder<SubscriptionPriceEdgeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "cursor" },
            new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(PriceQueryBuilder) }
        };

    protected override string TypeName { get { return "SubscriptionPriceEdge"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public SubscriptionPriceEdgeQueryBuilder WithCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("cursor", alias, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceEdgeQueryBuilder ExceptCursor()
    {
        return ExceptField("cursor");
    }

    public SubscriptionPriceEdgeQueryBuilder WithNode(PriceQueryBuilder priceQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("node", alias, priceQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public SubscriptionPriceEdgeQueryBuilder ExceptNode()
    {
        return ExceptField("node");
    }
}

public partial class HomeConsumptionConnectionQueryBuilder : GraphQlQueryBuilder<HomeConsumptionConnectionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(HomeConsumptionPageInfoQueryBuilder) },
            new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ConsumptionQueryBuilder) },
            new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(HomeConsumptionEdgeQueryBuilder) }
        };

    protected override string TypeName { get { return "HomeConsumptionConnection"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeConsumptionConnectionQueryBuilder WithPageInfo(HomeConsumptionPageInfoQueryBuilder homeConsumptionPageInfoQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("pageInfo", alias, homeConsumptionPageInfoQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionConnectionQueryBuilder ExceptPageInfo()
    {
        return ExceptField("pageInfo");
    }

    public HomeConsumptionConnectionQueryBuilder WithNodes(ConsumptionQueryBuilder consumptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("nodes", alias, consumptionQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionConnectionQueryBuilder ExceptNodes()
    {
        return ExceptField("nodes");
    }

    public HomeConsumptionConnectionQueryBuilder WithEdges(HomeConsumptionEdgeQueryBuilder homeConsumptionEdgeQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("edges", alias, homeConsumptionEdgeQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionConnectionQueryBuilder ExceptEdges()
    {
        return ExceptField("edges");
    }
}

public partial class HomeConsumptionPageInfoQueryBuilder : GraphQlQueryBuilder<HomeConsumptionPageInfoQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "endCursor" },
            new GraphQlFieldMetadata { Name = "hasNextPage" },
            new GraphQlFieldMetadata { Name = "hasPreviousPage" },
            new GraphQlFieldMetadata { Name = "startCursor" },
            new GraphQlFieldMetadata { Name = "count" },
            new GraphQlFieldMetadata { Name = "currency" },
            new GraphQlFieldMetadata { Name = "totalCost" },
            new GraphQlFieldMetadata { Name = "totalConsumption" },
            new GraphQlFieldMetadata { Name = "filtered" }
        };

    protected override string TypeName { get { return "HomeConsumptionPageInfo"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeConsumptionPageInfoQueryBuilder WithEndCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("endCursor", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptEndCursor()
    {
        return ExceptField("endCursor");
    }

    public HomeConsumptionPageInfoQueryBuilder WithHasNextPage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptHasNextPage()
    {
        return ExceptField("hasNextPage");
    }

    public HomeConsumptionPageInfoQueryBuilder WithHasPreviousPage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasPreviousPage", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptHasPreviousPage()
    {
        return ExceptField("hasPreviousPage");
    }

    public HomeConsumptionPageInfoQueryBuilder WithStartCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("startCursor", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptStartCursor()
    {
        return ExceptField("startCursor");
    }

    public HomeConsumptionPageInfoQueryBuilder WithCount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("count", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptCount()
    {
        return ExceptField("count");
    }

    public HomeConsumptionPageInfoQueryBuilder WithCurrency(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public HomeConsumptionPageInfoQueryBuilder WithTotalCost(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("totalCost", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptTotalCost()
    {
        return ExceptField("totalCost");
    }

    public HomeConsumptionPageInfoQueryBuilder WithTotalConsumption(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("totalConsumption", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptTotalConsumption()
    {
        return ExceptField("totalConsumption");
    }

    public HomeConsumptionPageInfoQueryBuilder WithFiltered(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("filtered", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionPageInfoQueryBuilder ExceptFiltered()
    {
        return ExceptField("filtered");
    }
}

public partial class ConsumptionQueryBuilder : GraphQlQueryBuilder<ConsumptionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "from" },
            new GraphQlFieldMetadata { Name = "to" },
            new GraphQlFieldMetadata { Name = "unitPrice" },
            new GraphQlFieldMetadata { Name = "unitPriceVAT" },
            new GraphQlFieldMetadata { Name = "consumption" },
            new GraphQlFieldMetadata { Name = "consumptionUnit" },
            new GraphQlFieldMetadata { Name = "cost" },
            new GraphQlFieldMetadata { Name = "currency" }
        };

    protected override string TypeName { get { return "Consumption"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ConsumptionQueryBuilder WithFrom(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("from", alias, new GraphQlDirective[] { skip, include });
    }

    public ConsumptionQueryBuilder ExceptFrom()
    {
        return ExceptField("from");
    }

    public ConsumptionQueryBuilder WithTo(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("to", alias, new GraphQlDirective[] { skip, include });
    }

    public ConsumptionQueryBuilder ExceptTo()
    {
        return ExceptField("to");
    }

    public ConsumptionQueryBuilder WithUnitPrice(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("unitPrice", alias, new GraphQlDirective[] { skip, include });
    }

    public ConsumptionQueryBuilder ExceptUnitPrice()
    {
        return ExceptField("unitPrice");
    }

    public ConsumptionQueryBuilder WithUnitPriceVat(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("unitPriceVAT", alias, new GraphQlDirective[] { skip, include });
    }

    public ConsumptionQueryBuilder ExceptUnitPriceVat()
    {
        return ExceptField("unitPriceVAT");
    }

    public ConsumptionQueryBuilder WithConsumption(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("consumption", alias, new GraphQlDirective[] { skip, include });
    }

    public ConsumptionQueryBuilder ExceptConsumption()
    {
        return ExceptField("consumption");
    }

    public ConsumptionQueryBuilder WithConsumptionUnit(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("consumptionUnit", alias, new GraphQlDirective[] { skip, include });
    }

    public ConsumptionQueryBuilder ExceptConsumptionUnit()
    {
        return ExceptField("consumptionUnit");
    }

    public ConsumptionQueryBuilder WithCost(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("cost", alias, new GraphQlDirective[] { skip, include });
    }

    public ConsumptionQueryBuilder ExceptCost()
    {
        return ExceptField("cost");
    }

    public ConsumptionQueryBuilder WithCurrency(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { skip, include });
    }

    public ConsumptionQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }
}

public partial class HomeConsumptionEdgeQueryBuilder : GraphQlQueryBuilder<HomeConsumptionEdgeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "cursor" },
            new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ConsumptionQueryBuilder) }
        };

    protected override string TypeName { get { return "HomeConsumptionEdge"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeConsumptionEdgeQueryBuilder WithCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("cursor", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionEdgeQueryBuilder ExceptCursor()
    {
        return ExceptField("cursor");
    }

    public HomeConsumptionEdgeQueryBuilder WithNode(ConsumptionQueryBuilder consumptionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("node", alias, consumptionQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeConsumptionEdgeQueryBuilder ExceptNode()
    {
        return ExceptField("node");
    }
}

public partial class HomeProductionConnectionQueryBuilder : GraphQlQueryBuilder<HomeProductionConnectionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(HomeProductionPageInfoQueryBuilder) },
            new GraphQlFieldMetadata { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(ProductionQueryBuilder) },
            new GraphQlFieldMetadata { Name = "edges", IsComplex = true, QueryBuilderType = typeof(HomeProductionEdgeQueryBuilder) }
        };

    protected override string TypeName { get { return "HomeProductionConnection"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeProductionConnectionQueryBuilder WithPageInfo(HomeProductionPageInfoQueryBuilder homeProductionPageInfoQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("pageInfo", alias, homeProductionPageInfoQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionConnectionQueryBuilder ExceptPageInfo()
    {
        return ExceptField("pageInfo");
    }

    public HomeProductionConnectionQueryBuilder WithNodes(ProductionQueryBuilder productionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("nodes", alias, productionQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionConnectionQueryBuilder ExceptNodes()
    {
        return ExceptField("nodes");
    }

    public HomeProductionConnectionQueryBuilder WithEdges(HomeProductionEdgeQueryBuilder homeProductionEdgeQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("edges", alias, homeProductionEdgeQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionConnectionQueryBuilder ExceptEdges()
    {
        return ExceptField("edges");
    }
}

public partial class HomeProductionPageInfoQueryBuilder : GraphQlQueryBuilder<HomeProductionPageInfoQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "endCursor" },
            new GraphQlFieldMetadata { Name = "hasNextPage" },
            new GraphQlFieldMetadata { Name = "hasPreviousPage" },
            new GraphQlFieldMetadata { Name = "startCursor" },
            new GraphQlFieldMetadata { Name = "count" },
            new GraphQlFieldMetadata { Name = "currency" },
            new GraphQlFieldMetadata { Name = "totalProfit" },
            new GraphQlFieldMetadata { Name = "totalProduction" },
            new GraphQlFieldMetadata { Name = "filtered" }
        };

    protected override string TypeName { get { return "HomeProductionPageInfo"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeProductionPageInfoQueryBuilder WithEndCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("endCursor", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptEndCursor()
    {
        return ExceptField("endCursor");
    }

    public HomeProductionPageInfoQueryBuilder WithHasNextPage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasNextPage", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptHasNextPage()
    {
        return ExceptField("hasNextPage");
    }

    public HomeProductionPageInfoQueryBuilder WithHasPreviousPage(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("hasPreviousPage", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptHasPreviousPage()
    {
        return ExceptField("hasPreviousPage");
    }

    public HomeProductionPageInfoQueryBuilder WithStartCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("startCursor", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptStartCursor()
    {
        return ExceptField("startCursor");
    }

    public HomeProductionPageInfoQueryBuilder WithCount(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("count", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptCount()
    {
        return ExceptField("count");
    }

    public HomeProductionPageInfoQueryBuilder WithCurrency(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public HomeProductionPageInfoQueryBuilder WithTotalProfit(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("totalProfit", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptTotalProfit()
    {
        return ExceptField("totalProfit");
    }

    public HomeProductionPageInfoQueryBuilder WithTotalProduction(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("totalProduction", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptTotalProduction()
    {
        return ExceptField("totalProduction");
    }

    public HomeProductionPageInfoQueryBuilder WithFiltered(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("filtered", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionPageInfoQueryBuilder ExceptFiltered()
    {
        return ExceptField("filtered");
    }
}

public partial class ProductionQueryBuilder : GraphQlQueryBuilder<ProductionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "from" },
            new GraphQlFieldMetadata { Name = "to" },
            new GraphQlFieldMetadata { Name = "unitPrice" },
            new GraphQlFieldMetadata { Name = "unitPriceVAT" },
            new GraphQlFieldMetadata { Name = "production" },
            new GraphQlFieldMetadata { Name = "productionUnit" },
            new GraphQlFieldMetadata { Name = "profit" },
            new GraphQlFieldMetadata { Name = "currency" }
        };

    protected override string TypeName { get { return "Production"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ProductionQueryBuilder WithFrom(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("from", alias, new GraphQlDirective[] { skip, include });
    }

    public ProductionQueryBuilder ExceptFrom()
    {
        return ExceptField("from");
    }

    public ProductionQueryBuilder WithTo(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("to", alias, new GraphQlDirective[] { skip, include });
    }

    public ProductionQueryBuilder ExceptTo()
    {
        return ExceptField("to");
    }

    public ProductionQueryBuilder WithUnitPrice(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("unitPrice", alias, new GraphQlDirective[] { skip, include });
    }

    public ProductionQueryBuilder ExceptUnitPrice()
    {
        return ExceptField("unitPrice");
    }

    public ProductionQueryBuilder WithUnitPriceVat(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("unitPriceVAT", alias, new GraphQlDirective[] { skip, include });
    }

    public ProductionQueryBuilder ExceptUnitPriceVat()
    {
        return ExceptField("unitPriceVAT");
    }

    public ProductionQueryBuilder WithProduction(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("production", alias, new GraphQlDirective[] { skip, include });
    }

    public ProductionQueryBuilder ExceptProduction()
    {
        return ExceptField("production");
    }

    public ProductionQueryBuilder WithProductionUnit(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("productionUnit", alias, new GraphQlDirective[] { skip, include });
    }

    public ProductionQueryBuilder ExceptProductionUnit()
    {
        return ExceptField("productionUnit");
    }

    public ProductionQueryBuilder WithProfit(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("profit", alias, new GraphQlDirective[] { skip, include });
    }

    public ProductionQueryBuilder ExceptProfit()
    {
        return ExceptField("profit");
    }

    public ProductionQueryBuilder WithCurrency(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { skip, include });
    }

    public ProductionQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }
}

public partial class HomeProductionEdgeQueryBuilder : GraphQlQueryBuilder<HomeProductionEdgeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "cursor" },
            new GraphQlFieldMetadata { Name = "node", IsComplex = true, QueryBuilderType = typeof(ProductionQueryBuilder) }
        };

    protected override string TypeName { get { return "HomeProductionEdge"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeProductionEdgeQueryBuilder WithCursor(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("cursor", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionEdgeQueryBuilder ExceptCursor()
    {
        return ExceptField("cursor");
    }

    public HomeProductionEdgeQueryBuilder WithNode(ProductionQueryBuilder productionQueryBuilder, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithObjectField("node", alias, productionQueryBuilder, new GraphQlDirective[] { skip, include });
    }

    public HomeProductionEdgeQueryBuilder ExceptNode()
    {
        return ExceptField("node");
    }
}

public partial class HomeFeaturesQueryBuilder : GraphQlQueryBuilder<HomeFeaturesQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "realTimeConsumptionEnabled" }
        };

    protected override string TypeName { get { return "HomeFeatures"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeFeaturesQueryBuilder WithRealTimeConsumptionEnabled(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("realTimeConsumptionEnabled", alias, new GraphQlDirective[] { skip, include });
    }

    public HomeFeaturesQueryBuilder ExceptRealTimeConsumptionEnabled()
    {
        return ExceptField("realTimeConsumptionEnabled");
    }
}

public partial class RootMutationQueryBuilder : GraphQlQueryBuilder<RootMutationQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "sendMeterReading", IsComplex = true, QueryBuilderType = typeof(MeterReadingResponseQueryBuilder) },
            new GraphQlFieldMetadata { Name = "updateHome", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
            new GraphQlFieldMetadata { Name = "sendPushNotification", IsComplex = true, QueryBuilderType = typeof(PushNotificationResponseQueryBuilder) }
        };

    protected override string TypeName { get { return "RootMutation"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public RootMutationQueryBuilder(string operationName = null) : base("mutation", operationName)
    {
    }

    public RootMutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
    {
        return WithParameterInternal(parameter);
    }

    public RootMutationQueryBuilder WithSendMeterReading(MeterReadingResponseQueryBuilder meterReadingResponseQueryBuilder, QueryBuilderParameter<MeterReadingInput> input, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
        return WithObjectField("sendMeterReading", alias, meterReadingResponseQueryBuilder, new GraphQlDirective[] { skip, include }, args);
    }

    public RootMutationQueryBuilder ExceptSendMeterReading()
    {
        return ExceptField("sendMeterReading");
    }

    public RootMutationQueryBuilder WithUpdateHome(HomeQueryBuilder homeQueryBuilder, QueryBuilderParameter<UpdateHomeInput> input, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
        return WithObjectField("updateHome", alias, homeQueryBuilder, new GraphQlDirective[] { skip, include }, args);
    }

    public RootMutationQueryBuilder ExceptUpdateHome()
    {
        return ExceptField("updateHome");
    }

    public RootMutationQueryBuilder WithSendPushNotification(PushNotificationResponseQueryBuilder pushNotificationResponseQueryBuilder, QueryBuilderParameter<PushNotificationInput> input, QueryBuilderParameter<IEnumerable<bool>> flags, QueryBuilderParameter<IEnumerable<Guid?>> tags = null, QueryBuilderParameter<IEnumerable<int?>> references = null, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input", ArgumentValue = input} );
        if (tags != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "tags", ArgumentValue = tags, FormatMask = "N"} );

        if (references != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "references", ArgumentValue = references} );

        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "flags", ArgumentValue = flags} );
        return WithObjectField("sendPushNotification", alias, pushNotificationResponseQueryBuilder, new GraphQlDirective[] { skip, include }, args);
    }

    public RootMutationQueryBuilder ExceptSendPushNotification()
    {
        return ExceptField("sendPushNotification");
    }
}

public partial class MeterReadingResponseQueryBuilder : GraphQlQueryBuilder<MeterReadingResponseQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "homeId" },
            new GraphQlFieldMetadata { Name = "time" },
            new GraphQlFieldMetadata { Name = "reading" }
        };

    protected override string TypeName { get { return "MeterReadingResponse"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public MeterReadingResponseQueryBuilder WithHomeId(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("homeId", alias, new GraphQlDirective[] { skip, include });
    }

    public MeterReadingResponseQueryBuilder ExceptHomeId()
    {
        return ExceptField("homeId");
    }

    public MeterReadingResponseQueryBuilder WithTime(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("time", alias, new GraphQlDirective[] { skip, include });
    }

    public MeterReadingResponseQueryBuilder ExceptTime()
    {
        return ExceptField("time");
    }

    public MeterReadingResponseQueryBuilder WithReading(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("reading", alias, new GraphQlDirective[] { skip, include });
    }

    public MeterReadingResponseQueryBuilder ExceptReading()
    {
        return ExceptField("reading");
    }
}

public partial class PushNotificationResponseQueryBuilder : GraphQlQueryBuilder<PushNotificationResponseQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "successful" },
            new GraphQlFieldMetadata { Name = "pushedToNumberOfDevices" }
        };

    protected override string TypeName { get { return "PushNotificationResponse"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PushNotificationResponseQueryBuilder WithSuccessful(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("successful", alias, new GraphQlDirective[] { skip, include });
    }

    public PushNotificationResponseQueryBuilder ExceptSuccessful()
    {
        return ExceptField("successful");
    }

    public PushNotificationResponseQueryBuilder WithPushedToNumberOfDevices(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("pushedToNumberOfDevices", alias, new GraphQlDirective[] { skip, include });
    }

    public PushNotificationResponseQueryBuilder ExceptPushedToNumberOfDevices()
    {
        return ExceptField("pushedToNumberOfDevices");
    }
}

public partial class RootSubscriptionQueryBuilder : GraphQlQueryBuilder<RootSubscriptionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "liveMeasurement", IsComplex = true, QueryBuilderType = typeof(LiveMeasurementQueryBuilder) }
        };

    protected override string TypeName { get { return "RootSubscription"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public RootSubscriptionQueryBuilder(string operationName = null) : base("subscription", operationName)
    {
    }

    public RootSubscriptionQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
    {
        return WithParameterInternal(parameter);
    }

    public RootSubscriptionQueryBuilder WithLiveMeasurement(LiveMeasurementQueryBuilder liveMeasurementQueryBuilder, QueryBuilderParameter<Guid> homeId, string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "homeId", ArgumentValue = homeId, FormatMask = "N"} );
        return WithObjectField("liveMeasurement", alias, liveMeasurementQueryBuilder, new GraphQlDirective[] { skip, include }, args);
    }

    public RootSubscriptionQueryBuilder ExceptLiveMeasurement()
    {
        return ExceptField("liveMeasurement");
    }
}

public partial class LiveMeasurementQueryBuilder : GraphQlQueryBuilder<LiveMeasurementQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "timestamp" },
            new GraphQlFieldMetadata { Name = "power" },
            new GraphQlFieldMetadata { Name = "lastMeterConsumption" },
            new GraphQlFieldMetadata { Name = "accumulatedConsumption" },
            new GraphQlFieldMetadata { Name = "accumulatedProduction" },
            new GraphQlFieldMetadata { Name = "accumulatedCost" },
            new GraphQlFieldMetadata { Name = "accumulatedReward" },
            new GraphQlFieldMetadata { Name = "currency" },
            new GraphQlFieldMetadata { Name = "minPower" },
            new GraphQlFieldMetadata { Name = "averagePower" },
            new GraphQlFieldMetadata { Name = "maxPower" },
            new GraphQlFieldMetadata { Name = "powerProduction" },
            new GraphQlFieldMetadata { Name = "minPowerProduction" },
            new GraphQlFieldMetadata { Name = "maxPowerProduction" },
            new GraphQlFieldMetadata { Name = "lastMeterProduction" },
            new GraphQlFieldMetadata { Name = "voltagePhase1" },
            new GraphQlFieldMetadata { Name = "voltagePhase2" },
            new GraphQlFieldMetadata { Name = "voltagePhase3" },
            new GraphQlFieldMetadata { Name = "currentPhase1" },
            new GraphQlFieldMetadata { Name = "currentPhase2" },
            new GraphQlFieldMetadata { Name = "currentPhase3" }
        };

    protected override string TypeName { get { return "LiveMeasurement"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public LiveMeasurementQueryBuilder WithTimestamp(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("timestamp", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptTimestamp()
    {
        return ExceptField("timestamp");
    }

    public LiveMeasurementQueryBuilder WithPower(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("power", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptPower()
    {
        return ExceptField("power");
    }

    public LiveMeasurementQueryBuilder WithLastMeterConsumption(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("lastMeterConsumption", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptLastMeterConsumption()
    {
        return ExceptField("lastMeterConsumption");
    }

    public LiveMeasurementQueryBuilder WithAccumulatedConsumption(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("accumulatedConsumption", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptAccumulatedConsumption()
    {
        return ExceptField("accumulatedConsumption");
    }

    public LiveMeasurementQueryBuilder WithAccumulatedProduction(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("accumulatedProduction", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptAccumulatedProduction()
    {
        return ExceptField("accumulatedProduction");
    }

    public LiveMeasurementQueryBuilder WithAccumulatedCost(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("accumulatedCost", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptAccumulatedCost()
    {
        return ExceptField("accumulatedCost");
    }

    public LiveMeasurementQueryBuilder WithAccumulatedReward(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("accumulatedReward", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptAccumulatedReward()
    {
        return ExceptField("accumulatedReward");
    }

    public LiveMeasurementQueryBuilder WithCurrency(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public LiveMeasurementQueryBuilder WithMinPower(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("minPower", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptMinPower()
    {
        return ExceptField("minPower");
    }

    public LiveMeasurementQueryBuilder WithAveragePower(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("averagePower", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptAveragePower()
    {
        return ExceptField("averagePower");
    }

    public LiveMeasurementQueryBuilder WithMaxPower(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("maxPower", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptMaxPower()
    {
        return ExceptField("maxPower");
    }

    public LiveMeasurementQueryBuilder WithPowerProduction(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("powerProduction", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptPowerProduction()
    {
        return ExceptField("powerProduction");
    }

    public LiveMeasurementQueryBuilder WithMinPowerProduction(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("minPowerProduction", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptMinPowerProduction()
    {
        return ExceptField("minPowerProduction");
    }

    public LiveMeasurementQueryBuilder WithMaxPowerProduction(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("maxPowerProduction", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptMaxPowerProduction()
    {
        return ExceptField("maxPowerProduction");
    }

    public LiveMeasurementQueryBuilder WithLastMeterProduction(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("lastMeterProduction", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptLastMeterProduction()
    {
        return ExceptField("lastMeterProduction");
    }

    public LiveMeasurementQueryBuilder WithVoltagePhase1(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("voltagePhase1", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptVoltagePhase1()
    {
        return ExceptField("voltagePhase1");
    }

    public LiveMeasurementQueryBuilder WithVoltagePhase2(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("voltagePhase2", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptVoltagePhase2()
    {
        return ExceptField("voltagePhase2");
    }

    public LiveMeasurementQueryBuilder WithVoltagePhase3(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("voltagePhase3", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptVoltagePhase3()
    {
        return ExceptField("voltagePhase3");
    }

    public LiveMeasurementQueryBuilder WithCurrentPhase1(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currentPhase1", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptCurrentPhase1()
    {
        return ExceptField("currentPhase1");
    }

    public LiveMeasurementQueryBuilder WithCurrentPhase2(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currentPhase2", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptCurrentPhase2()
    {
        return ExceptField("currentPhase2");
    }

    public LiveMeasurementQueryBuilder WithCurrentPhase3(string alias = null, SkipDirective skip = null, IncludeDirective include = null)
    {
        return WithScalarField("currentPhase3", alias, new GraphQlDirective[] { skip, include });
    }

    public LiveMeasurementQueryBuilder ExceptCurrentPhase3()
    {
        return ExceptField("currentPhase3");
    }
}
#endregion

#region input classes
public partial class MeterReadingInput : IGraphQlInputObject
{
    private InputPropertyInfo _homeId;
    private InputPropertyInfo _time;
    private InputPropertyInfo _reading;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<Guid>))]
    #endif
    public QueryBuilderParameter<Guid> HomeId
    {
        get { return (QueryBuilderParameter<Guid>)_homeId.Value; }
        set { _homeId = new InputPropertyInfo { Name = "homeId", Value = value, FormatMask = "N" }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
    #endif
    public QueryBuilderParameter<string> Time
    {
        get { return (QueryBuilderParameter<string>)_time.Value; }
        set { _time = new InputPropertyInfo { Name = "time", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
    #endif
    public QueryBuilderParameter<int?> Reading
    {
        get { return (QueryBuilderParameter<int?>)_reading.Value; }
        set { _reading = new InputPropertyInfo { Name = "reading", Value = value }; }
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_homeId.Name != null) yield return _homeId;
        if (_time.Name != null) yield return _time;
        if (_reading.Name != null) yield return _reading;
    }
}

public partial class UpdateHomeInput : IGraphQlInputObject
{
    private InputPropertyInfo _homeId;
    private InputPropertyInfo _appNickname;
    private InputPropertyInfo _appAvatar;
    private InputPropertyInfo _size;
    private InputPropertyInfo _type;
    private InputPropertyInfo _numberOfResidents;
    private InputPropertyInfo _primaryHeatingSource;
    private InputPropertyInfo _hasVentilationSystem;
    private InputPropertyInfo _mainFuseSize;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<Guid>))]
    #endif
    public QueryBuilderParameter<Guid> HomeId
    {
        get { return (QueryBuilderParameter<Guid>)_homeId.Value; }
        set { _homeId = new InputPropertyInfo { Name = "homeId", Value = value, FormatMask = "N" }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
    #endif
    public QueryBuilderParameter<string> AppNickname
    {
        get { return (QueryBuilderParameter<string>)_appNickname.Value; }
        set { _appNickname = new InputPropertyInfo { Name = "appNickname", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<HomeAvatar?>))]
    #endif
    public QueryBuilderParameter<HomeAvatar?> AppAvatar
    {
        get { return (QueryBuilderParameter<HomeAvatar?>)_appAvatar.Value; }
        set { _appAvatar = new InputPropertyInfo { Name = "appAvatar", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
    #endif
    public QueryBuilderParameter<int?> Size
    {
        get { return (QueryBuilderParameter<int?>)_size.Value; }
        set { _size = new InputPropertyInfo { Name = "size", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<HomeType?>))]
    #endif
    public QueryBuilderParameter<HomeType?> Type
    {
        get { return (QueryBuilderParameter<HomeType?>)_type.Value; }
        set { _type = new InputPropertyInfo { Name = "type", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
    #endif
    public QueryBuilderParameter<int?> NumberOfResidents
    {
        get { return (QueryBuilderParameter<int?>)_numberOfResidents.Value; }
        set { _numberOfResidents = new InputPropertyInfo { Name = "numberOfResidents", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<HeatingSource?>))]
    #endif
    public QueryBuilderParameter<HeatingSource?> PrimaryHeatingSource
    {
        get { return (QueryBuilderParameter<HeatingSource?>)_primaryHeatingSource.Value; }
        set { _primaryHeatingSource = new InputPropertyInfo { Name = "primaryHeatingSource", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
    #endif
    public QueryBuilderParameter<bool?> HasVentilationSystem
    {
        get { return (QueryBuilderParameter<bool?>)_hasVentilationSystem.Value; }
        set { _hasVentilationSystem = new InputPropertyInfo { Name = "hasVentilationSystem", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<int?>))]
    #endif
    public QueryBuilderParameter<int?> MainFuseSize
    {
        get { return (QueryBuilderParameter<int?>)_mainFuseSize.Value; }
        set { _mainFuseSize = new InputPropertyInfo { Name = "mainFuseSize", Value = value }; }
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_homeId.Name != null) yield return _homeId;
        if (_appNickname.Name != null) yield return _appNickname;
        if (_appAvatar.Name != null) yield return _appAvatar;
        if (_size.Name != null) yield return _size;
        if (_type.Name != null) yield return _type;
        if (_numberOfResidents.Name != null) yield return _numberOfResidents;
        if (_primaryHeatingSource.Name != null) yield return _primaryHeatingSource;
        if (_hasVentilationSystem.Name != null) yield return _hasVentilationSystem;
        if (_mainFuseSize.Name != null) yield return _mainFuseSize;
    }
}

public partial class PushNotificationInput : IGraphQlInputObject
{
    private InputPropertyInfo _title;
    private InputPropertyInfo _message;
    private InputPropertyInfo _screenToOpen;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
    #endif
    public QueryBuilderParameter<string> Title
    {
        get { return (QueryBuilderParameter<string>)_title.Value; }
        set { _title = new InputPropertyInfo { Name = "title", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
    #endif
    public QueryBuilderParameter<string> Message
    {
        get { return (QueryBuilderParameter<string>)_message.Value; }
        set { _message = new InputPropertyInfo { Name = "message", Value = value }; }
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<AppScreen?>))]
    #endif
    public QueryBuilderParameter<AppScreen?> ScreenToOpen
    {
        get { return (QueryBuilderParameter<AppScreen?>)_screenToOpen.Value; }
        set { _screenToOpen = new InputPropertyInfo { Name = "screenToOpen", Value = value }; }
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_title.Name != null) yield return _title;
        if (_message.Name != null) yield return _message;
        if (_screenToOpen.Name != null) yield return _screenToOpen;
    }
}
#endregion

#region data classes
public partial class Query
{
    public Viewer Viewer { get; set; }
}

public partial class Viewer
{
    public string Login { get; set; }
    public string Name { get; set; }
    public ICollection<string> AccountType { get; set; }
    public ICollection<Home> Homes { get; set; }
    public Home Home { get; set; }
}

public partial class Home
{
    public Guid Id { get; set; }
    public string TimeZone { get; set; }
    public string AppNickname { get; set; }
    public HomeAvatar? AppAvatar { get; set; }
    public int? Size { get; set; }
    public HomeType? Type { get; set; }
    public int? NumberOfResidents { get; set; }
    public HeatingSource? PrimaryHeatingSource { get; set; }
    public bool? HasVentilationSystem { get; set; }
    public int? MainFuseSize { get; set; }
    public Address Address { get; set; }
    public LegalEntity Owner { get; set; }
    public MeteringPointData MeteringPointData { get; set; }
    public Subscription CurrentSubscription { get; set; }
    public ICollection<Subscription> Subscriptions { get; set; }
    public HomeConsumptionConnection Consumption { get; set; }
    public HomeProductionConnection Production { get; set; }
    public HomeFeatures Features { get; set; }
}

public partial class Address
{
    public string Address1 { get; set; }
    public string Address2 { get; set; }
    public string Address3 { get; set; }
    public string City { get; set; }
    public string PostalCode { get; set; }
    public string Country { get; set; }
    public string Latitude { get; set; }
    public string Longitude { get; set; }
}

public partial class LegalEntity
{
    public Guid Id { get; set; }
    public string FirstName { get; set; }
    public bool? IsCompany { get; set; }
    public string Name { get; set; }
    public string MiddleName { get; set; }
    public string LastName { get; set; }
    public string OrganizationNo { get; set; }
    public string Language { get; set; }
    public ContactInfo ContactInfo { get; set; }
    public Address Address { get; set; }
}

public partial class ContactInfo
{
    public string Email { get; set; }
    public string Mobile { get; set; }
}

public partial class MeteringPointData
{
    public string ConsumptionEan { get; set; }
    public string GridCompany { get; set; }
    public string GridAreaCode { get; set; }
    public string PriceAreaCode { get; set; }
    public string ProductionEan { get; set; }
    public string EnergyTaxType { get; set; }
    public string VatType { get; set; }
    public int? EstimatedAnnualConsumption { get; set; }
}

public partial class Subscription
{
    public Guid Id { get; set; }
    public LegalEntity Subscriber { get; set; }
    public DateTimeOffset? ValidFrom { get; set; }
    public DateTimeOffset? ValidTo { get; set; }
    public string Status { get; set; }
    public PriceInfo PriceInfo { get; set; }
}

public partial class PriceInfo
{
    public Price Current { get; set; }
    public ICollection<Price> Today { get; set; }
    public ICollection<Price> Tomorrow { get; set; }
    public SubscriptionPriceConnection Range { get; set; }
}

public partial class Price
{
    public decimal? Total { get; set; }
    public decimal? Energy { get; set; }
    public decimal? Tax { get; set; }
    public string StartsAt { get; set; }
    public string Currency { get; set; }
    public PriceLevel? Level { get; set; }
}

public partial class SubscriptionPriceConnection
{
    public SubscriptionPriceConnectionPageInfo PageInfo { get; set; }
    public ICollection<SubscriptionPriceEdge> Edges { get; set; }
    public ICollection<Price> Nodes { get; set; }
}

[GraphQlObjectType("SubscriptionPriceConnectionPageInfo")]
public partial class SubscriptionPriceConnectionPageInfo : IPageInfo
{
    public string EndCursor { get; set; }
    public bool? HasNextPage { get; set; }
    public bool? HasPreviousPage { get; set; }
    public string StartCursor { get; set; }
    public string Resolution { get; set; }
    public string Currency { get; set; }
    public int? Count { get; set; }
    public string Precision { get; set; }
    public decimal? MinEnergy { get; set; }
    public decimal? MinTotal { get; set; }
    public decimal? MaxEnergy { get; set; }
    public decimal? MaxTotal { get; set; }
    public string UnimplementedField { get; set; }
}

public partial interface IPageInfo
{
    string UnimplementedField { get; set; }
    string EndCursor { get; set; }
    bool? HasNextPage { get; set; }
    bool? HasPreviousPage { get; set; }
    string StartCursor { get; set; }
}

public partial class SubscriptionPriceEdge
{
    public string Cursor { get; set; }
    public Price Node { get; set; }
}

public partial class HomeConsumptionConnection
{
    public HomeConsumptionPageInfo PageInfo { get; set; }
    public ICollection<ConsumptionData> Nodes { get; set; }
    public ICollection<HomeConsumptionEdge> Edges { get; set; }
}

[GraphQlObjectType("HomeConsumptionPageInfo")]
public partial class HomeConsumptionPageInfo : IPageInfo
{
    public string EndCursor { get; set; }
    public bool? HasNextPage { get; set; }
    public bool? HasPreviousPage { get; set; }
    public string StartCursor { get; set; }
    public int? Count { get; set; }
    public string Currency { get; set; }
    public decimal? TotalCost { get; set; }
    public decimal? TotalConsumption { get; set; }
    public int? Filtered { get; set; }
    public string UnimplementedField { get; set; }
}

public partial class ConsumptionData
{
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
    public decimal? UnitPrice { get; set; }
    public decimal? UnitPriceVat { get; set; }
    public decimal? Consumption { get; set; }
    public string ConsumptionUnit { get; set; }
    public decimal? Cost { get; set; }
    public string Currency { get; set; }
}

public partial class HomeConsumptionEdge
{
    public string Cursor { get; set; }
    public ConsumptionData Node { get; set; }
}

public partial class HomeProductionConnection
{
    public HomeProductionPageInfo PageInfo { get; set; }
    public ICollection<ProductionData> Nodes { get; set; }
    public ICollection<HomeProductionEdge> Edges { get; set; }
}

[GraphQlObjectType("HomeProductionPageInfo")]
public partial class HomeProductionPageInfo : IPageInfo
{
    public string EndCursor { get; set; }
    public bool? HasNextPage { get; set; }
    public bool? HasPreviousPage { get; set; }
    public string StartCursor { get; set; }
    public int? Count { get; set; }
    public string Currency { get; set; }
    public decimal? TotalProfit { get; set; }
    public decimal? TotalProduction { get; set; }
    public int? Filtered { get; set; }
    public string UnimplementedField { get; set; }
}

public partial class ProductionData
{
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
    public decimal? UnitPrice { get; set; }
    public decimal? UnitPriceVat { get; set; }
    public decimal? Production { get; set; }
    public string ProductionUnit { get; set; }
    public decimal? Profit { get; set; }
    public string Currency { get; set; }
}

public partial class HomeProductionEdge
{
    public string Cursor { get; set; }
    public ProductionData Node { get; set; }
}

public partial class HomeFeatures
{
    public bool? RealTimeConsumptionEnabled { get; set; }
}

public partial class RootMutation
{
    public MeterReadingResponse SendMeterReading { get; set; }
    public Home UpdateHome { get; set; }
    public PushNotificationResponse SendPushNotification { get; set; }
}

public partial class MeterReadingResponse
{
    public Guid HomeId { get; set; }
    public string Time { get; set; }
    public int? Reading { get; set; }
}

public partial class PushNotificationResponse
{
    public bool? Successful { get; set; }
    public int? PushedToNumberOfDevices { get; set; }
}

public partial class RootSubscription
{
    public LiveMeasurement LiveMeasurement { get; set; }
}

public partial class LiveMeasurement
{
    public DateTimeOffset? Timestamp { get; set; }
    public decimal? Power { get; set; }
    public decimal? LastMeterConsumption { get; set; }
    public decimal? AccumulatedConsumption { get; set; }
    public decimal? AccumulatedProduction { get; set; }
    public decimal? AccumulatedCost { get; set; }
    public decimal? AccumulatedReward { get; set; }
    public string Currency { get; set; }
    public decimal? MinPower { get; set; }
    public decimal? AveragePower { get; set; }
    public decimal? MaxPower { get; set; }
    public decimal? PowerProduction { get; set; }
    public decimal? MinPowerProduction { get; set; }
    public decimal? MaxPowerProduction { get; set; }
    public decimal? LastMeterProduction { get; set; }
    public decimal? VoltagePhase1 { get; set; }
    public decimal? VoltagePhase2 { get; set; }
    public decimal? VoltagePhase3 { get; set; }
    public decimal? CurrentPhase1 { get; set; }
    public decimal? CurrentPhase2 { get; set; }
    public decimal? CurrentPhase3 { get; set; }
}
#endregion