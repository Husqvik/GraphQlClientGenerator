#region GraphQL type helpers
public static class GraphQlTypes
{
    public const string Boolean = "Boolean";
    public const string DynamicType = "DynamicType";
    public const string Float = "Float";
    public const string Id = "ID";
    public const string Int = "Int";
    public const string ProfileQuestionInput = "ProfileQuestionInput";
    public const string String = "String";

    public const string Avatar = "Avatar";
    public const string Resolution = "Resolution";

    public const string About = "About";
    public const string AboutItem = "AboutItem";
    public const string Address = "Address";
    public const string AppState = "AppState";
    public const string AppStateFronScreen = "AppStateFronScreen";
    public const string AppStateJourney = "AppStateJourney";
    public const string AwayMode = "AwayMode";
    public const string AwayModeSettings = "AwayModeSettings";
    public const string Comparison = "Comparison";
    public const string ComparisonData = "ComparisonData";
    public const string Consumption = "Consumption";
    public const string ConsumptionMonth = "ConsumptionMonth";
    public const string CreditCard = "CreditCard";
    public const string DayNightSchedule = "DayNightSchedule";
    public const string DayNightScheduleSettings = "DayNightScheduleSettings";
    public const string Disaggregation = "Disaggregation";
    public const string EnergyDeal = "EnergyDeal";
    public const string Feed = "Feed";
    public const string FeedItem = "FeedItem";
    public const string GqlMutationError = "GQLMutationError";
    public const string GqlMutationGeneralResponse = "GQLMutationGeneralResponse";
    public const string Greeting = "Greeting";
    public const string Home = "Home";
    public const string HomeMutation = "HomeMutation";
    public const string HomeProfileQuestion = "HomeProfileQuestion";
    public const string HomeProfileQuestionInput = "HomeProfileQuestionInput";
    public const string Invoice = "Invoice";
    public const string InvoicePayment = "InvoicePayment";
    public const string InvoiceSection = "InvoiceSection";
    public const string Me = "Me";
    public const string MeMutation = "MeMutation";
    public const string Mutation = "Mutation";
    public const string PairableDevice = "PairableDevice";
    public const string PairableDeviceOAuth = "PairableDeviceOAuth";
    public const string PairDeviceResult = "PairDeviceResult";
    public const string PaymentMethod = "PaymentMethod";
    public const string PreLiveComparison = "PreLiveComparison";
    public const string PriceRating = "PriceRating";
    public const string PriceRatingColorOffset = "PriceRatingColorOffset";
    public const string PriceRatingEntry = "PriceRatingEntry";
    public const string PriceRatingRoot = "PriceRatingRoot";
    public const string ProcessStep = "ProcessStep";
    public const string Producer = "Producer";
    public const string ProducerBullet = "ProducerBullet";
    public const string Production = "Production";
    public const string ProductionMonth = "ProductionMonth";
    public const string ProductionValue = "ProductionValue";
    public const string PushNotification = "PushNotification";
    public const string Query = "Query";
    public const string Report = "Report";
    public const string ReportCell = "ReportCell";
    public const string ReportRoot = "ReportRoot";
    public const string Sensor = "Sensor";
    public const string SensorHistory = "SensorHistory";
    public const string SensorHistoryValue = "SensorHistoryValue";
    public const string SignupStatus = "SignupStatus";
    public const string Subscription = "Subscription";
    public const string Thermostat = "Thermostat";
    public const string ThermostatCapability = "ThermostatCapability";
    public const string ThermostatMeasurement = "ThermostatMeasurement";
    public const string ThermostatMeasurements = "ThermostatMeasurements";
    public const string ThermostatMode = "ThermostatMode";
    public const string ThermostatMutation = "ThermostatMutation";
    public const string ThermostatState = "ThermostatState";
    public const string Wallet = "Wallet";
    public const string Weather = "Weather";
    public const string WeatherEntry = "WeatherEntry";

    public const string AppStateFronScreenMutation = "AppStateFronScreenMutation";
    public const string AppStateJourneyMutation = "AppStateJourneyMutation";
    public const string AppStateMutation = "AppStateMutation";
    public const string HomeProfileQuestionAnswer = "HomeProfileQuestionAnswer";

    public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
        new Dictionary<Type, string>
        {
            { typeof(TestAvatarV1), "Avatar" },
            { typeof(TestResolutionV1), "Resolution" },
            { typeof(string), "String" },
            { typeof(decimal), "Float" },
            { typeof(int), "Int" },
            { typeof(bool), "Boolean" },
            { typeof(DateTimeOffset), "String" },
            { typeof(Guid), "ID" },
            { typeof(TestAppStateFronScreenMutationV1), "AppStateFronScreenMutation" },
            { typeof(TestAppStateJourneyMutationV1), "AppStateJourneyMutation" },
            { typeof(TestAppStateMutationV1), "AppStateMutation" },
            { typeof(TestHomeProfileQuestionAnswerV1), "HomeProfileQuestionAnswer" }
        };
}
#endregion

#region enums
public enum TestAvatarV1
{
    [EnumMember(Value = "floorhouse1")] Floorhouse1,
    [EnumMember(Value = "floorhouse2")] Floorhouse2,
    [EnumMember(Value = "floorhouse3")] Floorhouse3,
    [EnumMember(Value = "castle")] Castle,
    [EnumMember(Value = "apartment")] Apartment,
    [EnumMember(Value = "cottage")] Cottage,
    [EnumMember(Value = "rowhouse")] Rowhouse
}

public enum TestResolutionV1
{
    [EnumMember(Value = "annual")] Annual,
    [EnumMember(Value = "monthly")] Monthly
}
#endregion

#region directives
public class IncludeDirective : GraphQlDirective
{
    public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
    {
        AddArgument("if", @if);
    }
}

public class SkipDirective : GraphQlDirective
{
    public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
    {
        AddArgument("if", @if);
    }
}
#endregion

#region builder classes
internal partial class TestQueryQueryBuilderV1 : GraphQlQueryBuilder<TestQueryQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(TestMeQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Query";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestQueryQueryBuilderV1(string operationName = null) : base("query", operationName)
    {
    }

    public TestQueryQueryBuilderV1 WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

    public TestQueryQueryBuilderV1 WithMe(TestMeQueryBuilderV1 meQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("me", alias, meQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestQueryQueryBuilderV1 ExceptMe() => ExceptField("me");
}

internal partial class TestMeQueryBuilderV1 : GraphQlQueryBuilder<TestMeQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "firstName" },
        new GraphQlFieldMetadata { Name = "lastName" },
        new GraphQlFieldMetadata { Name = "fullName" },
        new GraphQlFieldMetadata { Name = "ssn" },
        new GraphQlFieldMetadata { Name = "email" },
        new GraphQlFieldMetadata { Name = "language" },
        new GraphQlFieldMetadata { Name = "tone" },
        new GraphQlFieldMetadata { Name = "mobile" },
        new GraphQlFieldMetadata { Name = "welcomeGreeting", IsComplex = true, QueryBuilderType = typeof(TestGreetingQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "appState", IsComplex = true, QueryBuilderType = typeof(TestAppStateQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(TestHomeQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "homes", IsComplex = true, QueryBuilderType = typeof(TestHomeQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "feed", IsComplex = true, QueryBuilderType = typeof(TestFeedQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "wallet", IsComplex = true, QueryBuilderType = typeof(TestWalletQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "about", IsComplex = true, QueryBuilderType = typeof(TestAboutQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Me";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestMeQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestMeQueryBuilderV1 WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptFirstName() => ExceptField("firstName");

    public TestMeQueryBuilderV1 WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptLastName() => ExceptField("lastName");

    public TestMeQueryBuilderV1 WithFullName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fullName", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptFullName() => ExceptField("fullName");

    public TestMeQueryBuilderV1 WithSsn(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("ssn", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptSsn() => ExceptField("ssn");

    public TestMeQueryBuilderV1 WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("email", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptEmail() => ExceptField("email");

    public TestMeQueryBuilderV1 WithLanguage(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("language", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptLanguage() => ExceptField("language");

    public TestMeQueryBuilderV1 WithTone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("tone", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptTone() => ExceptField("tone");

    public TestMeQueryBuilderV1 WithMobile(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("mobile", alias, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptMobile() => ExceptField("mobile");

    public TestMeQueryBuilderV1 WithWelcomeGreeting(TestGreetingQueryBuilderV1 greetingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("welcomeGreeting", alias, greetingQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptWelcomeGreeting() => ExceptField("welcomeGreeting");

    public TestMeQueryBuilderV1 WithAppState(TestAppStateQueryBuilderV1 appStateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("appState", alias, appStateQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptAppState() => ExceptField("appState");

    public TestMeQueryBuilderV1 WithHome(TestHomeQueryBuilderV1 homeQueryBuilder, QueryBuilderParameter<string> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (id != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

        return WithObjectField("home", alias, homeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestMeQueryBuilderV1 ExceptHome() => ExceptField("home");

    public TestMeQueryBuilderV1 WithHomes(TestHomeQueryBuilderV1 homeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("homes", alias, homeQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptHomes() => ExceptField("homes");

    public TestMeQueryBuilderV1 WithFeed(TestFeedQueryBuilderV1 feedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("feed", alias, feedQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptFeed() => ExceptField("feed");

    public TestMeQueryBuilderV1 WithWallet(TestWalletQueryBuilderV1 walletQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("wallet", alias, walletQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptWallet() => ExceptField("wallet");

    public TestMeQueryBuilderV1 WithAbout(TestAboutQueryBuilderV1 aboutQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("about", alias, aboutQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestMeQueryBuilderV1 ExceptAbout() => ExceptField("about");
}

internal partial class TestGreetingQueryBuilderV1 : GraphQlQueryBuilder<TestGreetingQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "description" },
        new GraphQlFieldMetadata { Name = "descriptionWhenNoEnergyDeal" },
        new GraphQlFieldMetadata { Name = "showUntil" }
    };

    protected override string TypeName { get; } = "Greeting";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestGreetingQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestGreetingQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestGreetingQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public TestGreetingQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public TestGreetingQueryBuilderV1 WithDescriptionWhenNoEnergyDeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("descriptionWhenNoEnergyDeal", alias, new GraphQlDirective[] { include, skip });

    public TestGreetingQueryBuilderV1 ExceptDescriptionWhenNoEnergyDeal() => ExceptField("descriptionWhenNoEnergyDeal");

    public TestGreetingQueryBuilderV1 WithShowUntil(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("showUntil", alias, new GraphQlDirective[] { include, skip });

    public TestGreetingQueryBuilderV1 ExceptShowUntil() => ExceptField("showUntil");
}

internal partial class TestAppStateQueryBuilderV1 : GraphQlQueryBuilder<TestAppStateQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "journey", IsComplex = true, QueryBuilderType = typeof(TestAppStateJourneyQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "frontScreens", IsComplex = true, QueryBuilderType = typeof(TestAppStateFronScreenQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "AppState";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestAppStateQueryBuilderV1 WithJourney(TestAppStateJourneyQueryBuilderV1 appStateJourneyQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("journey", alias, appStateJourneyQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestAppStateQueryBuilderV1 ExceptJourney() => ExceptField("journey");

    public TestAppStateQueryBuilderV1 WithFrontScreens(TestAppStateFronScreenQueryBuilderV1 appStateFronScreenQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("frontScreens", alias, appStateFronScreenQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestAppStateQueryBuilderV1 ExceptFrontScreens() => ExceptField("frontScreens");
}

internal partial class TestAppStateJourneyQueryBuilderV1 : GraphQlQueryBuilder<TestAppStateJourneyQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "hasVisitedPairDevices" }
    };

    protected override string TypeName { get; } = "AppStateJourney";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestAppStateJourneyQueryBuilderV1 WithHasVisitedPairDevices(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hasVisitedPairDevices", alias, new GraphQlDirective[] { include, skip });

    public TestAppStateJourneyQueryBuilderV1 ExceptHasVisitedPairDevices() => ExceptField("hasVisitedPairDevices");
}

internal partial class TestAppStateFronScreenQueryBuilderV1 : GraphQlQueryBuilder<TestAppStateFronScreenQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "homeId" },
        new GraphQlFieldMetadata { Name = "bubbles", IsComplex = true },
        new GraphQlFieldMetadata { Name = "bubblesSortOrder", IsComplex = true }
    };

    protected override string TypeName { get; } = "AppStateFronScreen";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestAppStateFronScreenQueryBuilderV1 WithHomeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("homeId", alias, new GraphQlDirective[] { include, skip });

    public TestAppStateFronScreenQueryBuilderV1 ExceptHomeId() => ExceptField("homeId");

    public TestAppStateFronScreenQueryBuilderV1 WithBubbles(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("bubbles", alias, new GraphQlDirective[] { include, skip });

    public TestAppStateFronScreenQueryBuilderV1 ExceptBubbles() => ExceptField("bubbles");

    public TestAppStateFronScreenQueryBuilderV1 WithBubblesSortOrder(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("bubblesSortOrder", alias, new GraphQlDirective[] { include, skip });

    public TestAppStateFronScreenQueryBuilderV1 ExceptBubblesSortOrder() => ExceptField("bubblesSortOrder");
}

internal partial class TestHomeQueryBuilderV1 : GraphQlQueryBuilder<TestHomeQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "avatar" },
        new GraphQlFieldMetadata { Name = "timeZone" },
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "type" },
        new GraphQlFieldMetadata { Name = "hasEnergyDeal" },
        new GraphQlFieldMetadata { Name = "address", IsComplex = true, QueryBuilderType = typeof(TestAddressQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "subscription", IsComplex = true, QueryBuilderType = typeof(TestSubscriptionQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "consumptionMonths", IsComplex = true, QueryBuilderType = typeof(TestConsumptionMonthQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "consumption", IsComplex = true, QueryBuilderType = typeof(TestConsumptionQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "preLiveComparison", IsComplex = true, QueryBuilderType = typeof(TestPreLiveComparisonQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "comparisons", IsComplex = true, QueryBuilderType = typeof(TestComparisonQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "comparisonCurrentMonth", IsComplex = true, QueryBuilderType = typeof(TestComparisonQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "profileQuestions", IsComplex = true, QueryBuilderType = typeof(TestHomeProfileQuestionQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "temperatures", IsComplex = true },
        new GraphQlFieldMetadata { Name = "signupStatus", IsComplex = true, QueryBuilderType = typeof(TestSignupStatusQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "disaggregation", IsComplex = true, QueryBuilderType = typeof(TestDisaggregationQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "weather", IsComplex = true, QueryBuilderType = typeof(TestWeatherQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "awayMode", IsComplex = true, QueryBuilderType = typeof(TestAwayModeQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "dayNightSchedule", IsComplex = true, QueryBuilderType = typeof(TestDayNightScheduleQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "report", IsComplex = true, QueryBuilderType = typeof(TestReportRootQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "thermostats", IsComplex = true, QueryBuilderType = typeof(TestThermostatQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "sensors", IsComplex = true, QueryBuilderType = typeof(TestSensorQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "sensorsHistory", IsComplex = true, QueryBuilderType = typeof(TestSensorHistoryQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "pairableDevices", IsComplex = true, QueryBuilderType = typeof(TestPairableDeviceQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "productionMonths", IsComplex = true, QueryBuilderType = typeof(TestProductionMonthQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "production", IsComplex = true, QueryBuilderType = typeof(TestProductionQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Home";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestHomeQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestHomeQueryBuilderV1 WithAvatar(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("avatar", alias, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptAvatar() => ExceptField("avatar");

    public TestHomeQueryBuilderV1 WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptTimeZone() => ExceptField("timeZone");

    public TestHomeQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestHomeQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptType() => ExceptField("type");

    public TestHomeQueryBuilderV1 WithHasEnergyDeal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hasEnergyDeal", alias, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptHasEnergyDeal() => ExceptField("hasEnergyDeal");

    public TestHomeQueryBuilderV1 WithAddress(TestAddressQueryBuilderV1 addressQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("address", alias, addressQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptAddress() => ExceptField("address");

    public TestHomeQueryBuilderV1 WithSubscription(TestSubscriptionQueryBuilderV1 subscriptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("subscription", alias, subscriptionQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptSubscription() => ExceptField("subscription");

    public TestHomeQueryBuilderV1 WithConsumptionMonths(TestConsumptionMonthQueryBuilderV1 consumptionMonthQueryBuilder, QueryBuilderParameter<bool?> useDemoData = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithObjectField("consumptionMonths", alias, consumptionMonthQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeQueryBuilderV1 ExceptConsumptionMonths() => ExceptField("consumptionMonths");

    public TestHomeQueryBuilderV1 WithConsumption(TestConsumptionQueryBuilderV1 consumptionQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<bool?> useDemoData = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithObjectField("consumption", alias, consumptionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeQueryBuilderV1 ExceptConsumption() => ExceptField("consumption");

    public TestHomeQueryBuilderV1 WithPreLiveComparison(TestPreLiveComparisonQueryBuilderV1 preLiveComparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("preLiveComparison", alias, preLiveComparisonQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptPreLiveComparison() => ExceptField("preLiveComparison");

    public TestHomeQueryBuilderV1 WithComparisons(TestComparisonQueryBuilderV1 comparisonQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<TestResolutionV1?> resolution = null, QueryBuilderParameter<bool?> useDemoData = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithObjectField("comparisons", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeQueryBuilderV1 ExceptComparisons() => ExceptField("comparisons");

    public TestHomeQueryBuilderV1 WithComparisonCurrentMonth(TestComparisonQueryBuilderV1 comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("comparisonCurrentMonth", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptComparisonCurrentMonth() => ExceptField("comparisonCurrentMonth");

    public TestHomeQueryBuilderV1 WithProfileQuestions(TestHomeProfileQuestionQueryBuilderV1 homeProfileQuestionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("profileQuestions", alias, homeProfileQuestionQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptProfileQuestions() => ExceptField("profileQuestions");

    public TestHomeQueryBuilderV1 WithTemperatures(QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<string> resolution = null, QueryBuilderParameter<bool?> useDemoData = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithScalarField("temperatures", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeQueryBuilderV1 ExceptTemperatures() => ExceptField("temperatures");

    public TestHomeQueryBuilderV1 WithSignupStatus(TestSignupStatusQueryBuilderV1 signupStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("signupStatus", alias, signupStatusQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptSignupStatus() => ExceptField("signupStatus");

    public TestHomeQueryBuilderV1 WithDisaggregation(TestDisaggregationQueryBuilderV1 disaggregationQueryBuilder, QueryBuilderParameter<TestResolutionV1?> resolution = null, QueryBuilderParameter<bool?> useDemoData = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        if (useDemoData != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "useDemoData", ArgumentValue = useDemoData} );

        return WithObjectField("disaggregation", alias, disaggregationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeQueryBuilderV1 ExceptDisaggregation() => ExceptField("disaggregation");

    public TestHomeQueryBuilderV1 WithWeather(TestWeatherQueryBuilderV1 weatherQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("weather", alias, weatherQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptWeather() => ExceptField("weather");

    public TestHomeQueryBuilderV1 WithAwayMode(TestAwayModeQueryBuilderV1 awayModeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("awayMode", alias, awayModeQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptAwayMode() => ExceptField("awayMode");

    public TestHomeQueryBuilderV1 WithDayNightSchedule(TestDayNightScheduleQueryBuilderV1 dayNightScheduleQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("dayNightSchedule", alias, dayNightScheduleQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptDayNightSchedule() => ExceptField("dayNightSchedule");

    public TestHomeQueryBuilderV1 WithReport(TestReportRootQueryBuilderV1 reportRootQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("report", alias, reportRootQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptReport() => ExceptField("report");

    public TestHomeQueryBuilderV1 WithThermostats(TestThermostatQueryBuilderV1 thermostatQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("thermostats", alias, thermostatQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptThermostats() => ExceptField("thermostats");

    public TestHomeQueryBuilderV1 WithSensors(TestSensorQueryBuilderV1 sensorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("sensors", alias, sensorQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptSensors() => ExceptField("sensors");

    public TestHomeQueryBuilderV1 WithSensorsHistory(TestSensorHistoryQueryBuilderV1 sensorHistoryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("sensorsHistory", alias, sensorHistoryQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptSensorsHistory() => ExceptField("sensorsHistory");

    public TestHomeQueryBuilderV1 WithPairableDevices(TestPairableDeviceQueryBuilderV1 pairableDeviceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("pairableDevices", alias, pairableDeviceQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptPairableDevices() => ExceptField("pairableDevices");

    public TestHomeQueryBuilderV1 WithProductionMonths(TestProductionMonthQueryBuilderV1 productionMonthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("productionMonths", alias, productionMonthQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeQueryBuilderV1 ExceptProductionMonths() => ExceptField("productionMonths");

    public TestHomeQueryBuilderV1 WithProduction(TestProductionQueryBuilderV1 productionQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        return WithObjectField("production", alias, productionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeQueryBuilderV1 ExceptProduction() => ExceptField("production");
}

internal partial class TestAddressQueryBuilderV1 : GraphQlQueryBuilder<TestAddressQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "address1" },
        new GraphQlFieldMetadata { Name = "address2" },
        new GraphQlFieldMetadata { Name = "address3" },
        new GraphQlFieldMetadata { Name = "city" },
        new GraphQlFieldMetadata { Name = "postalCode" },
        new GraphQlFieldMetadata { Name = "country" },
        new GraphQlFieldMetadata { Name = "latitude" },
        new GraphQlFieldMetadata { Name = "longitude" },
        new GraphQlFieldMetadata { Name = "elevation" },
        new GraphQlFieldMetadata { Name = "addressText" }
    };

    protected override string TypeName { get; } = "Address";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestAddressQueryBuilderV1 WithAddress1(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("address1", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptAddress1() => ExceptField("address1");

    public TestAddressQueryBuilderV1 WithAddress2(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("address2", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptAddress2() => ExceptField("address2");

    public TestAddressQueryBuilderV1 WithAddress3(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("address3", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptAddress3() => ExceptField("address3");

    public TestAddressQueryBuilderV1 WithCity(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("city", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptCity() => ExceptField("city");

    public TestAddressQueryBuilderV1 WithPostalCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("postalCode", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptPostalCode() => ExceptField("postalCode");

    public TestAddressQueryBuilderV1 WithCountry(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("country", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptCountry() => ExceptField("country");

    public TestAddressQueryBuilderV1 WithLatitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("latitude", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptLatitude() => ExceptField("latitude");

    public TestAddressQueryBuilderV1 WithLongitude(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("longitude", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptLongitude() => ExceptField("longitude");

    public TestAddressQueryBuilderV1 WithElevation(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("elevation", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptElevation() => ExceptField("elevation");

    public TestAddressQueryBuilderV1 WithAddressText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("addressText", alias, new GraphQlDirective[] { include, skip });

    public TestAddressQueryBuilderV1 ExceptAddressText() => ExceptField("addressText");
}

internal partial class TestSubscriptionQueryBuilderV1 : GraphQlQueryBuilder<TestSubscriptionQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "walletId" },
        new GraphQlFieldMetadata { Name = "validFrom" },
        new GraphQlFieldMetadata { Name = "validTo" },
        new GraphQlFieldMetadata { Name = "status" },
        new GraphQlFieldMetadata { Name = "billingRegionId" },
        new GraphQlFieldMetadata { Name = "priceRating", IsComplex = true, QueryBuilderType = typeof(TestPriceRatingRootQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "invoices", IsComplex = true, QueryBuilderType = typeof(TestInvoiceQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "energyDeal", IsComplex = true, QueryBuilderType = typeof(TestEnergyDealQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Subscription";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestSubscriptionQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestSubscriptionQueryBuilderV1 WithWalletId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("walletId", alias, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptWalletId() => ExceptField("walletId");

    public TestSubscriptionQueryBuilderV1 WithValidFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("validFrom", alias, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptValidFrom() => ExceptField("validFrom");

    public TestSubscriptionQueryBuilderV1 WithValidTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("validTo", alias, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptValidTo() => ExceptField("validTo");

    public TestSubscriptionQueryBuilderV1 WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("status", alias, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptStatus() => ExceptField("status");

    public TestSubscriptionQueryBuilderV1 WithBillingRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("billingRegionId", alias, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptBillingRegionId() => ExceptField("billingRegionId");

    public TestSubscriptionQueryBuilderV1 WithPriceRating(TestPriceRatingRootQueryBuilderV1 priceRatingRootQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("priceRating", alias, priceRatingRootQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptPriceRating() => ExceptField("priceRating");

    public TestSubscriptionQueryBuilderV1 WithInvoices(TestInvoiceQueryBuilderV1 invoiceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("invoices", alias, invoiceQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptInvoices() => ExceptField("invoices");

    public TestSubscriptionQueryBuilderV1 WithEnergyDeal(TestEnergyDealQueryBuilderV1 energyDealQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("energyDeal", alias, energyDealQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestSubscriptionQueryBuilderV1 ExceptEnergyDeal() => ExceptField("energyDeal");
}

internal partial class TestPriceRatingRootQueryBuilderV1 : GraphQlQueryBuilder<TestPriceRatingRootQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "isAvailable" },
        new GraphQlFieldMetadata { Name = "useTotalIsConfigurable" },
        new GraphQlFieldMetadata { Name = "useTotalAsDefault" },
        new GraphQlFieldMetadata { Name = "useTotalText" },
        new GraphQlFieldMetadata { Name = "hourly", IsComplex = true, QueryBuilderType = typeof(TestPriceRatingQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "daily", IsComplex = true, QueryBuilderType = typeof(TestPriceRatingQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "monthly", IsComplex = true, QueryBuilderType = typeof(TestPriceRatingQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "PriceRatingRoot";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPriceRatingRootQueryBuilderV1 WithIsAvailable(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isAvailable", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingRootQueryBuilderV1 ExceptIsAvailable() => ExceptField("isAvailable");

    public TestPriceRatingRootQueryBuilderV1 WithUseTotalIsConfigurable(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("useTotalIsConfigurable", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingRootQueryBuilderV1 ExceptUseTotalIsConfigurable() => ExceptField("useTotalIsConfigurable");

    public TestPriceRatingRootQueryBuilderV1 WithUseTotalAsDefault(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("useTotalAsDefault", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingRootQueryBuilderV1 ExceptUseTotalAsDefault() => ExceptField("useTotalAsDefault");

    public TestPriceRatingRootQueryBuilderV1 WithUseTotalText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("useTotalText", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingRootQueryBuilderV1 ExceptUseTotalText() => ExceptField("useTotalText");

    public TestPriceRatingRootQueryBuilderV1 WithHourly(TestPriceRatingQueryBuilderV1 priceRatingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("hourly", alias, priceRatingQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPriceRatingRootQueryBuilderV1 ExceptHourly() => ExceptField("hourly");

    public TestPriceRatingRootQueryBuilderV1 WithDaily(TestPriceRatingQueryBuilderV1 priceRatingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("daily", alias, priceRatingQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPriceRatingRootQueryBuilderV1 ExceptDaily() => ExceptField("daily");

    public TestPriceRatingRootQueryBuilderV1 WithMonthly(TestPriceRatingQueryBuilderV1 priceRatingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("monthly", alias, priceRatingQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPriceRatingRootQueryBuilderV1 ExceptMonthly() => ExceptField("monthly");
}

internal partial class TestPriceRatingQueryBuilderV1 : GraphQlQueryBuilder<TestPriceRatingQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "minEnergy" },
        new GraphQlFieldMetadata { Name = "maxEnergy" },
        new GraphQlFieldMetadata { Name = "minTotal" },
        new GraphQlFieldMetadata { Name = "maxTotal" },
        new GraphQlFieldMetadata { Name = "currency" },
        new GraphQlFieldMetadata { Name = "colorOffsets", IsComplex = true, QueryBuilderType = typeof(TestPriceRatingColorOffsetQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(TestPriceRatingEntryQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "PriceRating";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPriceRatingQueryBuilderV1 WithMinEnergy(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("minEnergy", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingQueryBuilderV1 ExceptMinEnergy() => ExceptField("minEnergy");

    public TestPriceRatingQueryBuilderV1 WithMaxEnergy(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("maxEnergy", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingQueryBuilderV1 ExceptMaxEnergy() => ExceptField("maxEnergy");

    public TestPriceRatingQueryBuilderV1 WithMinTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("minTotal", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingQueryBuilderV1 ExceptMinTotal() => ExceptField("minTotal");

    public TestPriceRatingQueryBuilderV1 WithMaxTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("maxTotal", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingQueryBuilderV1 ExceptMaxTotal() => ExceptField("maxTotal");

    public TestPriceRatingQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public TestPriceRatingQueryBuilderV1 WithColorOffsets(TestPriceRatingColorOffsetQueryBuilderV1 priceRatingColorOffsetQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("colorOffsets", alias, priceRatingColorOffsetQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPriceRatingQueryBuilderV1 ExceptColorOffsets() => ExceptField("colorOffsets");

    public TestPriceRatingQueryBuilderV1 WithEntries(TestPriceRatingEntryQueryBuilderV1 priceRatingEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("entries", alias, priceRatingEntryQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPriceRatingQueryBuilderV1 ExceptEntries() => ExceptField("entries");
}

internal partial class TestPriceRatingColorOffsetQueryBuilderV1 : GraphQlQueryBuilder<TestPriceRatingColorOffsetQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "fullGreenPercent" },
        new GraphQlFieldMetadata { Name = "fullYellowPercent" },
        new GraphQlFieldMetadata { Name = "fullRedPercent" }
    };

    protected override string TypeName { get; } = "PriceRatingColorOffset";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPriceRatingColorOffsetQueryBuilderV1 WithFullGreenPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fullGreenPercent", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingColorOffsetQueryBuilderV1 ExceptFullGreenPercent() => ExceptField("fullGreenPercent");

    public TestPriceRatingColorOffsetQueryBuilderV1 WithFullYellowPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fullYellowPercent", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingColorOffsetQueryBuilderV1 ExceptFullYellowPercent() => ExceptField("fullYellowPercent");

    public TestPriceRatingColorOffsetQueryBuilderV1 WithFullRedPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fullRedPercent", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingColorOffsetQueryBuilderV1 ExceptFullRedPercent() => ExceptField("fullRedPercent");
}

internal partial class TestPriceRatingEntryQueryBuilderV1 : GraphQlQueryBuilder<TestPriceRatingEntryQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "time" },
        new GraphQlFieldMetadata { Name = "energy" },
        new GraphQlFieldMetadata { Name = "total" },
        new GraphQlFieldMetadata { Name = "difference" }
    };

    protected override string TypeName { get; } = "PriceRatingEntry";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPriceRatingEntryQueryBuilderV1 WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("time", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingEntryQueryBuilderV1 ExceptTime() => ExceptField("time");

    public TestPriceRatingEntryQueryBuilderV1 WithEnergy(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("energy", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingEntryQueryBuilderV1 ExceptEnergy() => ExceptField("energy");

    public TestPriceRatingEntryQueryBuilderV1 WithTotal(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("total", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingEntryQueryBuilderV1 ExceptTotal() => ExceptField("total");

    public TestPriceRatingEntryQueryBuilderV1 WithDifference(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("difference", alias, new GraphQlDirective[] { include, skip });

    public TestPriceRatingEntryQueryBuilderV1 ExceptDifference() => ExceptField("difference");
}

internal partial class TestInvoiceQueryBuilderV1 : GraphQlQueryBuilder<TestInvoiceQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "no" },
        new GraphQlFieldMetadata { Name = "date" },
        new GraphQlFieldMetadata { Name = "dueDate" },
        new GraphQlFieldMetadata { Name = "totalCost" },
        new GraphQlFieldMetadata { Name = "totalCostLocalized" },
        new GraphQlFieldMetadata { Name = "totalEnergyConsumption" },
        new GraphQlFieldMetadata { Name = "totalEnergyConsumptionLocalized" },
        new GraphQlFieldMetadata { Name = "totalVat" },
        new GraphQlFieldMetadata { Name = "totalVatLocalized" },
        new GraphQlFieldMetadata { Name = "vatPercent" },
        new GraphQlFieldMetadata { Name = "vatPercentLocalized" },
        new GraphQlFieldMetadata { Name = "vatIsIncluded" },
        new GraphQlFieldMetadata { Name = "meteringPointId" },
        new GraphQlFieldMetadata { Name = "paymentReference" },
        new GraphQlFieldMetadata { Name = "showManualPaymentReferences" },
        new GraphQlFieldMetadata { Name = "bankAccount" },
        new GraphQlFieldMetadata { Name = "pdfUrl" },
        new GraphQlFieldMetadata { Name = "timeZone" },
        new GraphQlFieldMetadata { Name = "currency" },
        new GraphQlFieldMetadata { Name = "payment", IsComplex = true, QueryBuilderType = typeof(TestInvoicePaymentQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "sections", IsComplex = true, QueryBuilderType = typeof(TestInvoiceSectionQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "from" },
        new GraphQlFieldMetadata { Name = "to" }
    };

    protected override string TypeName { get; } = "Invoice";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestInvoiceQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestInvoiceQueryBuilderV1 WithNo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("no", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptNo() => ExceptField("no");

    public TestInvoiceQueryBuilderV1 WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("date", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptDate() => ExceptField("date");

    public TestInvoiceQueryBuilderV1 WithDueDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("dueDate", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptDueDate() => ExceptField("dueDate");

    public TestInvoiceQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public TestInvoiceQueryBuilderV1 WithTotalCostLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCostLocalized", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptTotalCostLocalized() => ExceptField("totalCostLocalized");

    public TestInvoiceQueryBuilderV1 WithTotalEnergyConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalEnergyConsumption", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptTotalEnergyConsumption() => ExceptField("totalEnergyConsumption");

    public TestInvoiceQueryBuilderV1 WithTotalEnergyConsumptionLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalEnergyConsumptionLocalized", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptTotalEnergyConsumptionLocalized() => ExceptField("totalEnergyConsumptionLocalized");

    public TestInvoiceQueryBuilderV1 WithTotalVat(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalVat", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptTotalVat() => ExceptField("totalVat");

    public TestInvoiceQueryBuilderV1 WithTotalVatLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalVatLocalized", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptTotalVatLocalized() => ExceptField("totalVatLocalized");

    public TestInvoiceQueryBuilderV1 WithVatPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("vatPercent", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptVatPercent() => ExceptField("vatPercent");

    public TestInvoiceQueryBuilderV1 WithVatPercentLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("vatPercentLocalized", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptVatPercentLocalized() => ExceptField("vatPercentLocalized");

    public TestInvoiceQueryBuilderV1 WithVatIsIncluded(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("vatIsIncluded", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptVatIsIncluded() => ExceptField("vatIsIncluded");

    public TestInvoiceQueryBuilderV1 WithMeteringPointId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("meteringPointId", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptMeteringPointId() => ExceptField("meteringPointId");

    public TestInvoiceQueryBuilderV1 WithPaymentReference(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("paymentReference", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptPaymentReference() => ExceptField("paymentReference");

    public TestInvoiceQueryBuilderV1 WithShowManualPaymentReferences(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("showManualPaymentReferences", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptShowManualPaymentReferences() => ExceptField("showManualPaymentReferences");

    public TestInvoiceQueryBuilderV1 WithBankAccount(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("bankAccount", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptBankAccount() => ExceptField("bankAccount");

    public TestInvoiceQueryBuilderV1 WithPdfUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("pdfUrl", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptPdfUrl() => ExceptField("pdfUrl");

    public TestInvoiceQueryBuilderV1 WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptTimeZone() => ExceptField("timeZone");

    public TestInvoiceQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public TestInvoiceQueryBuilderV1 WithPayment(TestInvoicePaymentQueryBuilderV1 invoicePaymentQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("payment", alias, invoicePaymentQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptPayment() => ExceptField("payment");

    public TestInvoiceQueryBuilderV1 WithSections(TestInvoiceSectionQueryBuilderV1 invoiceSectionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("sections", alias, invoiceSectionQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptSections() => ExceptField("sections");

    public TestInvoiceQueryBuilderV1 WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("from", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptFrom() => ExceptField("from");

    public TestInvoiceQueryBuilderV1 WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("to", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceQueryBuilderV1 ExceptTo() => ExceptField("to");
}

internal partial class TestInvoicePaymentQueryBuilderV1 : GraphQlQueryBuilder<TestInvoicePaymentQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "status" },
        new GraphQlFieldMetadata { Name = "method" },
        new GraphQlFieldMetadata { Name = "date" },
        new GraphQlFieldMetadata { Name = "failureText" },
        new GraphQlFieldMetadata { Name = "creditCard", IsComplex = true, QueryBuilderType = typeof(TestCreditCardQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "InvoicePayment";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestInvoicePaymentQueryBuilderV1 WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("status", alias, new GraphQlDirective[] { include, skip });

    public TestInvoicePaymentQueryBuilderV1 ExceptStatus() => ExceptField("status");

    public TestInvoicePaymentQueryBuilderV1 WithMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("method", alias, new GraphQlDirective[] { include, skip });

    public TestInvoicePaymentQueryBuilderV1 ExceptMethod() => ExceptField("method");

    public TestInvoicePaymentQueryBuilderV1 WithDate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("date", alias, new GraphQlDirective[] { include, skip });

    public TestInvoicePaymentQueryBuilderV1 ExceptDate() => ExceptField("date");

    public TestInvoicePaymentQueryBuilderV1 WithFailureText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("failureText", alias, new GraphQlDirective[] { include, skip });

    public TestInvoicePaymentQueryBuilderV1 ExceptFailureText() => ExceptField("failureText");

    public TestInvoicePaymentQueryBuilderV1 WithCreditCard(TestCreditCardQueryBuilderV1 creditCardQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("creditCard", alias, creditCardQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestInvoicePaymentQueryBuilderV1 ExceptCreditCard() => ExceptField("creditCard");
}

internal partial class TestCreditCardQueryBuilderV1 : GraphQlQueryBuilder<TestCreditCardQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "brand" },
        new GraphQlFieldMetadata { Name = "last4" }
    };

    protected override string TypeName { get; } = "CreditCard";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestCreditCardQueryBuilderV1 WithBrand(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("brand", alias, new GraphQlDirective[] { include, skip });

    public TestCreditCardQueryBuilderV1 ExceptBrand() => ExceptField("brand");

    public TestCreditCardQueryBuilderV1 WithLast4(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("last4", alias, new GraphQlDirective[] { include, skip });

    public TestCreditCardQueryBuilderV1 ExceptLast4() => ExceptField("last4");
}

internal partial class TestInvoiceSectionQueryBuilderV1 : GraphQlQueryBuilder<TestInvoiceSectionQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "type" },
        new GraphQlFieldMetadata { Name = "text" },
        new GraphQlFieldMetadata { Name = "subText" },
        new GraphQlFieldMetadata { Name = "consumption" },
        new GraphQlFieldMetadata { Name = "consumptionLocalized" },
        new GraphQlFieldMetadata { Name = "consumptionUnit" },
        new GraphQlFieldMetadata { Name = "price" },
        new GraphQlFieldMetadata { Name = "priceLocalized" },
        new GraphQlFieldMetadata { Name = "priceUnit" },
        new GraphQlFieldMetadata { Name = "cost" },
        new GraphQlFieldMetadata { Name = "costLocalized" },
        new GraphQlFieldMetadata { Name = "costUnit" }
    };

    protected override string TypeName { get; } = "InvoiceSection";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestInvoiceSectionQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptType() => ExceptField("type");

    public TestInvoiceSectionQueryBuilderV1 WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("text", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptText() => ExceptField("text");

    public TestInvoiceSectionQueryBuilderV1 WithSubText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("subText", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptSubText() => ExceptField("subText");

    public TestInvoiceSectionQueryBuilderV1 WithConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumption", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptConsumption() => ExceptField("consumption");

    public TestInvoiceSectionQueryBuilderV1 WithConsumptionLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumptionLocalized", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptConsumptionLocalized() => ExceptField("consumptionLocalized");

    public TestInvoiceSectionQueryBuilderV1 WithConsumptionUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumptionUnit", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptConsumptionUnit() => ExceptField("consumptionUnit");

    public TestInvoiceSectionQueryBuilderV1 WithPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("price", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptPrice() => ExceptField("price");

    public TestInvoiceSectionQueryBuilderV1 WithPriceLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("priceLocalized", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptPriceLocalized() => ExceptField("priceLocalized");

    public TestInvoiceSectionQueryBuilderV1 WithPriceUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("priceUnit", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptPriceUnit() => ExceptField("priceUnit");

    public TestInvoiceSectionQueryBuilderV1 WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptCost() => ExceptField("cost");

    public TestInvoiceSectionQueryBuilderV1 WithCostLocalized(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("costLocalized", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptCostLocalized() => ExceptField("costLocalized");

    public TestInvoiceSectionQueryBuilderV1 WithCostUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("costUnit", alias, new GraphQlDirective[] { include, skip });

    public TestInvoiceSectionQueryBuilderV1 ExceptCostUnit() => ExceptField("costUnit");
}

internal partial class TestEnergyDealQueryBuilderV1 : GraphQlQueryBuilder<TestEnergyDealQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "currentProducer", IsComplex = true, QueryBuilderType = typeof(TestProducerQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "EnergyDeal";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestEnergyDealQueryBuilderV1 WithCurrentProducer(TestProducerQueryBuilderV1 producerQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("currentProducer", alias, producerQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestEnergyDealQueryBuilderV1 ExceptCurrentProducer() => ExceptField("currentProducer");
}

internal partial class TestProducerQueryBuilderV1 : GraphQlQueryBuilder<TestProducerQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "name" },
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "description" },
        new GraphQlFieldMetadata { Name = "imageSrc" },
        new GraphQlFieldMetadata { Name = "bullets", IsComplex = true, QueryBuilderType = typeof(TestProducerBulletQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Producer";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestProducerQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestProducerQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestProducerQueryBuilderV1 WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("name", alias, new GraphQlDirective[] { include, skip });

    public TestProducerQueryBuilderV1 ExceptName() => ExceptField("name");

    public TestProducerQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestProducerQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestProducerQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public TestProducerQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public TestProducerQueryBuilderV1 WithImageSrc(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("imageSrc", alias, new GraphQlDirective[] { include, skip });

    public TestProducerQueryBuilderV1 ExceptImageSrc() => ExceptField("imageSrc");

    public TestProducerQueryBuilderV1 WithBullets(TestProducerBulletQueryBuilderV1 producerBulletQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("bullets", alias, producerBulletQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestProducerQueryBuilderV1 ExceptBullets() => ExceptField("bullets");
}

internal partial class TestProducerBulletQueryBuilderV1 : GraphQlQueryBuilder<TestProducerBulletQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "description" },
        new GraphQlFieldMetadata { Name = "readMoreUrl" }
    };

    protected override string TypeName { get; } = "ProducerBullet";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestProducerBulletQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestProducerBulletQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestProducerBulletQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public TestProducerBulletQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public TestProducerBulletQueryBuilderV1 WithReadMoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("readMoreUrl", alias, new GraphQlDirective[] { include, skip });

    public TestProducerBulletQueryBuilderV1 ExceptReadMoreUrl() => ExceptField("readMoreUrl");
}

internal partial class TestConsumptionMonthQueryBuilderV1 : GraphQlQueryBuilder<TestConsumptionMonthQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "year" },
        new GraphQlFieldMetadata { Name = "month" },
        new GraphQlFieldMetadata { Name = "kwh" },
        new GraphQlFieldMetadata { Name = "cost" },
        new GraphQlFieldMetadata { Name = "isComplete" },
        new GraphQlFieldMetadata { Name = "kwhEstimate" },
        new GraphQlFieldMetadata { Name = "costEstimate" },
        new GraphQlFieldMetadata { Name = "currency" }
    };

    protected override string TypeName { get; } = "ConsumptionMonth";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestConsumptionMonthQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionMonthQueryBuilderV1 ExceptYear() => ExceptField("year");

    public TestConsumptionMonthQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionMonthQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public TestConsumptionMonthQueryBuilderV1 WithKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kwh", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionMonthQueryBuilderV1 ExceptKwh() => ExceptField("kwh");

    public TestConsumptionMonthQueryBuilderV1 WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionMonthQueryBuilderV1 ExceptCost() => ExceptField("cost");

    public TestConsumptionMonthQueryBuilderV1 WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionMonthQueryBuilderV1 ExceptIsComplete() => ExceptField("isComplete");

    public TestConsumptionMonthQueryBuilderV1 WithKwhEstimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kwhEstimate", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionMonthQueryBuilderV1 ExceptKwhEstimate() => ExceptField("kwhEstimate");

    public TestConsumptionMonthQueryBuilderV1 WithCostEstimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("costEstimate", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionMonthQueryBuilderV1 ExceptCostEstimate() => ExceptField("costEstimate");

    public TestConsumptionMonthQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionMonthQueryBuilderV1 ExceptCurrency() => ExceptField("currency");
}

internal partial class TestConsumptionQueryBuilderV1 : GraphQlQueryBuilder<TestConsumptionQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "annualValues", IsComplex = true },
        new GraphQlFieldMetadata { Name = "monthlyValues", IsComplex = true },
        new GraphQlFieldMetadata { Name = "weeklyValues", IsComplex = true },
        new GraphQlFieldMetadata { Name = "dailyValues", IsComplex = true },
        new GraphQlFieldMetadata { Name = "hourlyValues", IsComplex = true },
        new GraphQlFieldMetadata { Name = "totalConsumption" },
        new GraphQlFieldMetadata { Name = "energyCost" },
        new GraphQlFieldMetadata { Name = "totalCost" },
        new GraphQlFieldMetadata { Name = "currency" },
        new GraphQlFieldMetadata { Name = "latestTransactionTimestamp" },
        new GraphQlFieldMetadata { Name = "timeZone" }
    };

    protected override string TypeName { get; } = "Consumption";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestConsumptionQueryBuilderV1 WithAnnualValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("annualValues", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptAnnualValues() => ExceptField("annualValues");

    public TestConsumptionQueryBuilderV1 WithMonthlyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("monthlyValues", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptMonthlyValues() => ExceptField("monthlyValues");

    public TestConsumptionQueryBuilderV1 WithWeeklyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("weeklyValues", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptWeeklyValues() => ExceptField("weeklyValues");

    public TestConsumptionQueryBuilderV1 WithDailyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("dailyValues", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptDailyValues() => ExceptField("dailyValues");

    public TestConsumptionQueryBuilderV1 WithHourlyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hourlyValues", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptHourlyValues() => ExceptField("hourlyValues");

    public TestConsumptionQueryBuilderV1 WithTotalConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalConsumption", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptTotalConsumption() => ExceptField("totalConsumption");

    public TestConsumptionQueryBuilderV1 WithEnergyCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("energyCost", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptEnergyCost() => ExceptField("energyCost");

    public TestConsumptionQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public TestConsumptionQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public TestConsumptionQueryBuilderV1 WithLatestTransactionTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("latestTransactionTimestamp", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptLatestTransactionTimestamp() => ExceptField("latestTransactionTimestamp");

    public TestConsumptionQueryBuilderV1 WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });

    public TestConsumptionQueryBuilderV1 ExceptTimeZone() => ExceptField("timeZone");
}

internal partial class TestPreLiveComparisonQueryBuilderV1 : GraphQlQueryBuilder<TestPreLiveComparisonQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "homeId" },
        new GraphQlFieldMetadata { Name = "basedOnActuals" },
        new GraphQlFieldMetadata { Name = "previousYear", IsComplex = true, QueryBuilderType = typeof(TestComparisonQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "previousYearMonths", IsComplex = true, QueryBuilderType = typeof(TestComparisonQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "PreLiveComparison";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPreLiveComparisonQueryBuilderV1 WithHomeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("homeId", alias, new GraphQlDirective[] { include, skip });

    public TestPreLiveComparisonQueryBuilderV1 ExceptHomeId() => ExceptField("homeId");

    public TestPreLiveComparisonQueryBuilderV1 WithBasedOnActuals(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("basedOnActuals", alias, new GraphQlDirective[] { include, skip });

    public TestPreLiveComparisonQueryBuilderV1 ExceptBasedOnActuals() => ExceptField("basedOnActuals");

    public TestPreLiveComparisonQueryBuilderV1 WithPreviousYear(TestComparisonQueryBuilderV1 comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("previousYear", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPreLiveComparisonQueryBuilderV1 ExceptPreviousYear() => ExceptField("previousYear");

    public TestPreLiveComparisonQueryBuilderV1 WithPreviousYearMonths(TestComparisonQueryBuilderV1 comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("previousYearMonths", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPreLiveComparisonQueryBuilderV1 ExceptPreviousYearMonths() => ExceptField("previousYearMonths");
}

internal partial class TestComparisonQueryBuilderV1 : GraphQlQueryBuilder<TestComparisonQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "year" },
        new GraphQlFieldMetadata { Name = "month" },
        new GraphQlFieldMetadata { Name = "resolution" },
        new GraphQlFieldMetadata { Name = "homeEfficency" },
        new GraphQlFieldMetadata { Name = "homeEfficencyDescription" },
        new GraphQlFieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(TestComparisonDataQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "average", IsComplex = true, QueryBuilderType = typeof(TestComparisonDataQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "efficient", IsComplex = true, QueryBuilderType = typeof(TestComparisonDataQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Comparison";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestComparisonQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public TestComparisonQueryBuilderV1 ExceptYear() => ExceptField("year");

    public TestComparisonQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public TestComparisonQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public TestComparisonQueryBuilderV1 WithResolution(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("resolution", alias, new GraphQlDirective[] { include, skip });

    public TestComparisonQueryBuilderV1 ExceptResolution() => ExceptField("resolution");

    public TestComparisonQueryBuilderV1 WithHomeEfficency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("homeEfficency", alias, new GraphQlDirective[] { include, skip });

    public TestComparisonQueryBuilderV1 ExceptHomeEfficency() => ExceptField("homeEfficency");

    public TestComparisonQueryBuilderV1 WithHomeEfficencyDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("homeEfficencyDescription", alias, new GraphQlDirective[] { include, skip });

    public TestComparisonQueryBuilderV1 ExceptHomeEfficencyDescription() => ExceptField("homeEfficencyDescription");

    public TestComparisonQueryBuilderV1 WithHome(TestComparisonDataQueryBuilderV1 comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("home", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestComparisonQueryBuilderV1 ExceptHome() => ExceptField("home");

    public TestComparisonQueryBuilderV1 WithAverage(TestComparisonDataQueryBuilderV1 comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("average", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestComparisonQueryBuilderV1 ExceptAverage() => ExceptField("average");

    public TestComparisonQueryBuilderV1 WithEfficient(TestComparisonDataQueryBuilderV1 comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("efficient", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestComparisonQueryBuilderV1 ExceptEfficient() => ExceptField("efficient");
}

internal partial class TestComparisonDataQueryBuilderV1 : GraphQlQueryBuilder<TestComparisonDataQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "cost" },
        new GraphQlFieldMetadata { Name = "consumption" }
    };

    protected override string TypeName { get; } = "ComparisonData";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestComparisonDataQueryBuilderV1 WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });

    public TestComparisonDataQueryBuilderV1 ExceptCost() => ExceptField("cost");

    public TestComparisonDataQueryBuilderV1 WithConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumption", alias, new GraphQlDirective[] { include, skip });

    public TestComparisonDataQueryBuilderV1 ExceptConsumption() => ExceptField("consumption");
}

internal partial class TestHomeProfileQuestionQueryBuilderV1 : GraphQlQueryBuilder<TestHomeProfileQuestionQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "text" },
        new GraphQlFieldMetadata { Name = "category" },
        new GraphQlFieldMetadata { Name = "isAnswered" },
        new GraphQlFieldMetadata { Name = "propertyName" },
        new GraphQlFieldMetadata { Name = "valueType" },
        new GraphQlFieldMetadata { Name = "currentValue", IsComplex = true },
        new GraphQlFieldMetadata { Name = "currentValueText" },
        new GraphQlFieldMetadata { Name = "input", IsComplex = true, QueryBuilderType = typeof(TestHomeProfileQuestionInputQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "HomeProfileQuestion";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestHomeProfileQuestionQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestHomeProfileQuestionQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestHomeProfileQuestionQueryBuilderV1 WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("text", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptText() => ExceptField("text");

    public TestHomeProfileQuestionQueryBuilderV1 WithCategory(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("category", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptCategory() => ExceptField("category");

    public TestHomeProfileQuestionQueryBuilderV1 WithIsAnswered(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isAnswered", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptIsAnswered() => ExceptField("isAnswered");

    public TestHomeProfileQuestionQueryBuilderV1 WithPropertyName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("propertyName", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptPropertyName() => ExceptField("propertyName");

    public TestHomeProfileQuestionQueryBuilderV1 WithValueType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("valueType", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptValueType() => ExceptField("valueType");

    public TestHomeProfileQuestionQueryBuilderV1 WithCurrentValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currentValue", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptCurrentValue() => ExceptField("currentValue");

    public TestHomeProfileQuestionQueryBuilderV1 WithCurrentValueText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currentValueText", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptCurrentValueText() => ExceptField("currentValueText");

    public TestHomeProfileQuestionQueryBuilderV1 WithInput(TestHomeProfileQuestionInputQueryBuilderV1 homeProfileQuestionInputQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("input", alias, homeProfileQuestionInputQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionQueryBuilderV1 ExceptInput() => ExceptField("input");
}

internal partial class TestHomeProfileQuestionInputQueryBuilderV1 : GraphQlQueryBuilder<TestHomeProfileQuestionInputQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "type" },
        new GraphQlFieldMetadata { Name = "options", IsComplex = true }
    };

    protected override string TypeName { get; } = "HomeProfileQuestionInput";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestHomeProfileQuestionInputQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionInputQueryBuilderV1 ExceptType() => ExceptField("type");

    public TestHomeProfileQuestionInputQueryBuilderV1 WithOptions(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("options", alias, new GraphQlDirective[] { include, skip });

    public TestHomeProfileQuestionInputQueryBuilderV1 ExceptOptions() => ExceptField("options");
}

internal partial class TestSignupStatusQueryBuilderV1 : GraphQlQueryBuilder<TestSignupStatusQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "feedStep", IsComplex = true, QueryBuilderType = typeof(TestProcessStepQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "avatarStep", IsComplex = true, QueryBuilderType = typeof(TestProcessStepQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "steps", IsComplex = true, QueryBuilderType = typeof(TestProcessStepQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "SignupStatus";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestSignupStatusQueryBuilderV1 WithFeedStep(TestProcessStepQueryBuilderV1 processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("feedStep", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestSignupStatusQueryBuilderV1 ExceptFeedStep() => ExceptField("feedStep");

    public TestSignupStatusQueryBuilderV1 WithAvatarStep(TestProcessStepQueryBuilderV1 processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("avatarStep", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestSignupStatusQueryBuilderV1 ExceptAvatarStep() => ExceptField("avatarStep");

    public TestSignupStatusQueryBuilderV1 WithSteps(TestProcessStepQueryBuilderV1 processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("steps", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestSignupStatusQueryBuilderV1 ExceptSteps() => ExceptField("steps");
}

internal partial class TestProcessStepQueryBuilderV1 : GraphQlQueryBuilder<TestProcessStepQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "timestamp" },
        new GraphQlFieldMetadata { Name = "isComplete" },
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "description" }
    };

    protected override string TypeName { get; } = "ProcessStep";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestProcessStepQueryBuilderV1 WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });

    public TestProcessStepQueryBuilderV1 ExceptTimestamp() => ExceptField("timestamp");

    public TestProcessStepQueryBuilderV1 WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });

    public TestProcessStepQueryBuilderV1 ExceptIsComplete() => ExceptField("isComplete");

    public TestProcessStepQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestProcessStepQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestProcessStepQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public TestProcessStepQueryBuilderV1 ExceptDescription() => ExceptField("description");
}

internal partial class TestDisaggregationQueryBuilderV1 : GraphQlQueryBuilder<TestDisaggregationQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "year" },
        new GraphQlFieldMetadata { Name = "month" },
        new GraphQlFieldMetadata { Name = "fixedConsumptionKwh" },
        new GraphQlFieldMetadata { Name = "fixedConsumptionKwhPercent" },
        new GraphQlFieldMetadata { Name = "fixedConsumptionCost" },
        new GraphQlFieldMetadata { Name = "heatingConsumptionKwh" },
        new GraphQlFieldMetadata { Name = "heatingConsumptionKwhPercent" },
        new GraphQlFieldMetadata { Name = "heatingConsumptionCost" },
        new GraphQlFieldMetadata { Name = "behaviorConsumptionKwh" },
        new GraphQlFieldMetadata { Name = "behaviorConsumptionKwhPercent" },
        new GraphQlFieldMetadata { Name = "behaviorConsumptionCost" },
        new GraphQlFieldMetadata { Name = "currency" },
        new GraphQlFieldMetadata { Name = "isValid" },
        new GraphQlFieldMetadata { Name = "totalCost" },
        new GraphQlFieldMetadata { Name = "totalConsumptionKwh" }
    };

    protected override string TypeName { get; } = "Disaggregation";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestDisaggregationQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptYear() => ExceptField("year");

    public TestDisaggregationQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public TestDisaggregationQueryBuilderV1 WithFixedConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fixedConsumptionKwh", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptFixedConsumptionKwh() => ExceptField("fixedConsumptionKwh");

    public TestDisaggregationQueryBuilderV1 WithFixedConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fixedConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptFixedConsumptionKwhPercent() => ExceptField("fixedConsumptionKwhPercent");

    public TestDisaggregationQueryBuilderV1 WithFixedConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fixedConsumptionCost", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptFixedConsumptionCost() => ExceptField("fixedConsumptionCost");

    public TestDisaggregationQueryBuilderV1 WithHeatingConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("heatingConsumptionKwh", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptHeatingConsumptionKwh() => ExceptField("heatingConsumptionKwh");

    public TestDisaggregationQueryBuilderV1 WithHeatingConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("heatingConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptHeatingConsumptionKwhPercent() => ExceptField("heatingConsumptionKwhPercent");

    public TestDisaggregationQueryBuilderV1 WithHeatingConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("heatingConsumptionCost", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptHeatingConsumptionCost() => ExceptField("heatingConsumptionCost");

    public TestDisaggregationQueryBuilderV1 WithBehaviorConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("behaviorConsumptionKwh", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptBehaviorConsumptionKwh() => ExceptField("behaviorConsumptionKwh");

    public TestDisaggregationQueryBuilderV1 WithBehaviorConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("behaviorConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptBehaviorConsumptionKwhPercent() => ExceptField("behaviorConsumptionKwhPercent");

    public TestDisaggregationQueryBuilderV1 WithBehaviorConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("behaviorConsumptionCost", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptBehaviorConsumptionCost() => ExceptField("behaviorConsumptionCost");

    public TestDisaggregationQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public TestDisaggregationQueryBuilderV1 WithIsValid(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isValid", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptIsValid() => ExceptField("isValid");

    public TestDisaggregationQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public TestDisaggregationQueryBuilderV1 WithTotalConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalConsumptionKwh", alias, new GraphQlDirective[] { include, skip });

    public TestDisaggregationQueryBuilderV1 ExceptTotalConsumptionKwh() => ExceptField("totalConsumptionKwh");
}

internal partial class TestWeatherQueryBuilderV1 : GraphQlQueryBuilder<TestWeatherQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "minTemperature" },
        new GraphQlFieldMetadata { Name = "maxTemperature" },
        new GraphQlFieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(TestWeatherEntryQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Weather";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestWeatherQueryBuilderV1 WithMinTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("minTemperature", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherQueryBuilderV1 ExceptMinTemperature() => ExceptField("minTemperature");

    public TestWeatherQueryBuilderV1 WithMaxTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("maxTemperature", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherQueryBuilderV1 ExceptMaxTemperature() => ExceptField("maxTemperature");

    public TestWeatherQueryBuilderV1 WithEntries(TestWeatherEntryQueryBuilderV1 weatherEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("entries", alias, weatherEntryQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestWeatherQueryBuilderV1 ExceptEntries() => ExceptField("entries");
}

internal partial class TestWeatherEntryQueryBuilderV1 : GraphQlQueryBuilder<TestWeatherEntryQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "time" },
        new GraphQlFieldMetadata { Name = "temperature" },
        new GraphQlFieldMetadata { Name = "type" },
        new GraphQlFieldMetadata { Name = "fog" },
        new GraphQlFieldMetadata { Name = "precipitation" },
        new GraphQlFieldMetadata { Name = "cloudiness" },
        new GraphQlFieldMetadata { Name = "windSpeed" },
        new GraphQlFieldMetadata { Name = "windGust" }
    };

    protected override string TypeName { get; } = "WeatherEntry";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestWeatherEntryQueryBuilderV1 WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("time", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherEntryQueryBuilderV1 ExceptTime() => ExceptField("time");

    public TestWeatherEntryQueryBuilderV1 WithTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("temperature", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherEntryQueryBuilderV1 ExceptTemperature() => ExceptField("temperature");

    public TestWeatherEntryQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherEntryQueryBuilderV1 ExceptType() => ExceptField("type");

    public TestWeatherEntryQueryBuilderV1 WithFog(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fog", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherEntryQueryBuilderV1 ExceptFog() => ExceptField("fog");

    public TestWeatherEntryQueryBuilderV1 WithPrecipitation(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("precipitation", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherEntryQueryBuilderV1 ExceptPrecipitation() => ExceptField("precipitation");

    public TestWeatherEntryQueryBuilderV1 WithCloudiness(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cloudiness", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherEntryQueryBuilderV1 ExceptCloudiness() => ExceptField("cloudiness");

    public TestWeatherEntryQueryBuilderV1 WithWindSpeed(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("windSpeed", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherEntryQueryBuilderV1 ExceptWindSpeed() => ExceptField("windSpeed");

    public TestWeatherEntryQueryBuilderV1 WithWindGust(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("windGust", alias, new GraphQlDirective[] { include, skip });

    public TestWeatherEntryQueryBuilderV1 ExceptWindGust() => ExceptField("windGust");
}

internal partial class TestAwayModeQueryBuilderV1 : GraphQlQueryBuilder<TestAwayModeQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "isSupported" },
        new GraphQlFieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(TestAwayModeSettingsQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "AwayMode";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestAwayModeQueryBuilderV1 WithIsSupported(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isSupported", alias, new GraphQlDirective[] { include, skip });

    public TestAwayModeQueryBuilderV1 ExceptIsSupported() => ExceptField("isSupported");

    public TestAwayModeQueryBuilderV1 WithSettings(TestAwayModeSettingsQueryBuilderV1 awayModeSettingsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("settings", alias, awayModeSettingsQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestAwayModeQueryBuilderV1 ExceptSettings() => ExceptField("settings");
}

internal partial class TestAwayModeSettingsQueryBuilderV1 : GraphQlQueryBuilder<TestAwayModeSettingsQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "from" },
        new GraphQlFieldMetadata { Name = "to" }
    };

    protected override string TypeName { get; } = "AwayModeSettings";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestAwayModeSettingsQueryBuilderV1 WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("from", alias, new GraphQlDirective[] { include, skip });

    public TestAwayModeSettingsQueryBuilderV1 ExceptFrom() => ExceptField("from");

    public TestAwayModeSettingsQueryBuilderV1 WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("to", alias, new GraphQlDirective[] { include, skip });

    public TestAwayModeSettingsQueryBuilderV1 ExceptTo() => ExceptField("to");
}

internal partial class TestDayNightScheduleQueryBuilderV1 : GraphQlQueryBuilder<TestDayNightScheduleQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "isSupported" },
        new GraphQlFieldMetadata { Name = "day", IsComplex = true, QueryBuilderType = typeof(TestDayNightScheduleSettingsQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "night", IsComplex = true, QueryBuilderType = typeof(TestDayNightScheduleSettingsQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "DayNightSchedule";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestDayNightScheduleQueryBuilderV1 WithIsSupported(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isSupported", alias, new GraphQlDirective[] { include, skip });

    public TestDayNightScheduleQueryBuilderV1 ExceptIsSupported() => ExceptField("isSupported");

    public TestDayNightScheduleQueryBuilderV1 WithDay(TestDayNightScheduleSettingsQueryBuilderV1 dayNightScheduleSettingsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("day", alias, dayNightScheduleSettingsQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestDayNightScheduleQueryBuilderV1 ExceptDay() => ExceptField("day");

    public TestDayNightScheduleQueryBuilderV1 WithNight(TestDayNightScheduleSettingsQueryBuilderV1 dayNightScheduleSettingsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("night", alias, dayNightScheduleSettingsQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestDayNightScheduleQueryBuilderV1 ExceptNight() => ExceptField("night");
}

internal partial class TestDayNightScheduleSettingsQueryBuilderV1 : GraphQlQueryBuilder<TestDayNightScheduleSettingsQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "isEnabled" },
        new GraphQlFieldMetadata { Name = "localTimeFrom" },
        new GraphQlFieldMetadata { Name = "localTimeTo" },
        new GraphQlFieldMetadata { Name = "recurringDays", IsComplex = true }
    };

    protected override string TypeName { get; } = "DayNightScheduleSettings";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestDayNightScheduleSettingsQueryBuilderV1 WithIsEnabled(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isEnabled", alias, new GraphQlDirective[] { include, skip });

    public TestDayNightScheduleSettingsQueryBuilderV1 ExceptIsEnabled() => ExceptField("isEnabled");

    public TestDayNightScheduleSettingsQueryBuilderV1 WithLocalTimeFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("localTimeFrom", alias, new GraphQlDirective[] { include, skip });

    public TestDayNightScheduleSettingsQueryBuilderV1 ExceptLocalTimeFrom() => ExceptField("localTimeFrom");

    public TestDayNightScheduleSettingsQueryBuilderV1 WithLocalTimeTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("localTimeTo", alias, new GraphQlDirective[] { include, skip });

    public TestDayNightScheduleSettingsQueryBuilderV1 ExceptLocalTimeTo() => ExceptField("localTimeTo");

    public TestDayNightScheduleSettingsQueryBuilderV1 WithRecurringDays(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("recurringDays", alias, new GraphQlDirective[] { include, skip });

    public TestDayNightScheduleSettingsQueryBuilderV1 ExceptRecurringDays() => ExceptField("recurringDays");
}

internal partial class TestReportRootQueryBuilderV1 : GraphQlQueryBuilder<TestReportRootQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "reports", IsComplex = true, QueryBuilderType = typeof(TestReportQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "ReportRoot";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestReportRootQueryBuilderV1 WithReports(TestReportQueryBuilderV1 reportQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("reports", alias, reportQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestReportRootQueryBuilderV1 ExceptReports() => ExceptField("reports");
}

internal partial class TestReportQueryBuilderV1 : GraphQlQueryBuilder<TestReportQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "avatar" },
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "efficiency" },
        new GraphQlFieldMetadata { Name = "year" },
        new GraphQlFieldMetadata { Name = "month" },
        new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(TestReportCellQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Report";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestReportQueryBuilderV1 WithAvatar(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("avatar", alias, new GraphQlDirective[] { include, skip });

    public TestReportQueryBuilderV1 ExceptAvatar() => ExceptField("avatar");

    public TestReportQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestReportQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestReportQueryBuilderV1 WithEfficiency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("efficiency", alias, new GraphQlDirective[] { include, skip });

    public TestReportQueryBuilderV1 ExceptEfficiency() => ExceptField("efficiency");

    public TestReportQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public TestReportQueryBuilderV1 ExceptYear() => ExceptField("year");

    public TestReportQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public TestReportQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public TestReportQueryBuilderV1 WithItems(TestReportCellQueryBuilderV1 reportCellQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("items", alias, reportCellQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestReportQueryBuilderV1 ExceptItems() => ExceptField("items");
}

internal partial class TestReportCellQueryBuilderV1 : GraphQlQueryBuilder<TestReportCellQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "type" },
        new GraphQlFieldMetadata { Name = "style" },
        new GraphQlFieldMetadata { Name = "imageSrc" },
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "description" },
        new GraphQlFieldMetadata { Name = "unitText" },
        new GraphQlFieldMetadata { Name = "link" },
        new GraphQlFieldMetadata { Name = "properties", IsComplex = true }
    };

    protected override string TypeName { get; } = "ReportCell";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestReportCellQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public TestReportCellQueryBuilderV1 ExceptType() => ExceptField("type");

    public TestReportCellQueryBuilderV1 WithStyle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("style", alias, new GraphQlDirective[] { include, skip });

    public TestReportCellQueryBuilderV1 ExceptStyle() => ExceptField("style");

    public TestReportCellQueryBuilderV1 WithImageSrc(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("imageSrc", alias, new GraphQlDirective[] { include, skip });

    public TestReportCellQueryBuilderV1 ExceptImageSrc() => ExceptField("imageSrc");

    public TestReportCellQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestReportCellQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestReportCellQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public TestReportCellQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public TestReportCellQueryBuilderV1 WithUnitText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitText", alias, new GraphQlDirective[] { include, skip });

    public TestReportCellQueryBuilderV1 ExceptUnitText() => ExceptField("unitText");

    public TestReportCellQueryBuilderV1 WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("link", alias, new GraphQlDirective[] { include, skip });

    public TestReportCellQueryBuilderV1 ExceptLink() => ExceptField("link");

    public TestReportCellQueryBuilderV1 WithProperties(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("properties", alias, new GraphQlDirective[] { include, skip });

    public TestReportCellQueryBuilderV1 ExceptProperties() => ExceptField("properties");
}

internal partial class TestThermostatQueryBuilderV1 : GraphQlQueryBuilder<TestThermostatQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "name" },
        new GraphQlFieldMetadata { Name = "connectivity" },
        new GraphQlFieldMetadata { Name = "state", IsComplex = true, QueryBuilderType = typeof(TestThermostatStateQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "measurements", IsComplex = true, QueryBuilderType = typeof(TestThermostatMeasurementsQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "capabilities", IsComplex = true, QueryBuilderType = typeof(TestThermostatCapabilityQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "modes", IsComplex = true, QueryBuilderType = typeof(TestThermostatModeQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "template" },
        new GraphQlFieldMetadata { Name = "hasSettings" },
        new GraphQlFieldMetadata { Name = "supportsDayNightSchedule" }
    };

    protected override string TypeName { get; } = "Thermostat";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestThermostatQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestThermostatQueryBuilderV1 WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("name", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptName() => ExceptField("name");

    public TestThermostatQueryBuilderV1 WithConnectivity(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("connectivity", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptConnectivity() => ExceptField("connectivity");

    public TestThermostatQueryBuilderV1 WithState(TestThermostatStateQueryBuilderV1 thermostatStateQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("state", alias, thermostatStateQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptState() => ExceptField("state");

    public TestThermostatQueryBuilderV1 WithMeasurements(TestThermostatMeasurementsQueryBuilderV1 thermostatMeasurementsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("measurements", alias, thermostatMeasurementsQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptMeasurements() => ExceptField("measurements");

    public TestThermostatQueryBuilderV1 WithCapabilities(TestThermostatCapabilityQueryBuilderV1 thermostatCapabilityQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("capabilities", alias, thermostatCapabilityQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptCapabilities() => ExceptField("capabilities");

    public TestThermostatQueryBuilderV1 WithModes(TestThermostatModeQueryBuilderV1 thermostatModeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("modes", alias, thermostatModeQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptModes() => ExceptField("modes");

    public TestThermostatQueryBuilderV1 WithTemplate(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("template", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptTemplate() => ExceptField("template");

    public TestThermostatQueryBuilderV1 WithHasSettings(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hasSettings", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptHasSettings() => ExceptField("hasSettings");

    public TestThermostatQueryBuilderV1 WithSupportsDayNightSchedule(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("supportsDayNightSchedule", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatQueryBuilderV1 ExceptSupportsDayNightSchedule() => ExceptField("supportsDayNightSchedule");
}

internal partial class TestThermostatStateQueryBuilderV1 : GraphQlQueryBuilder<TestThermostatStateQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "mode" },
        new GraphQlFieldMetadata { Name = "comfortTemperature" },
        new GraphQlFieldMetadata { Name = "fanLevel" },
        new GraphQlFieldMetadata { Name = "onOff" }
    };

    protected override string TypeName { get; } = "ThermostatState";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestThermostatStateQueryBuilderV1 WithMode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("mode", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatStateQueryBuilderV1 ExceptMode() => ExceptField("mode");

    public TestThermostatStateQueryBuilderV1 WithComfortTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("comfortTemperature", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatStateQueryBuilderV1 ExceptComfortTemperature() => ExceptField("comfortTemperature");

    public TestThermostatStateQueryBuilderV1 WithFanLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("fanLevel", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatStateQueryBuilderV1 ExceptFanLevel() => ExceptField("fanLevel");

    public TestThermostatStateQueryBuilderV1 WithOnOff(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("onOff", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatStateQueryBuilderV1 ExceptOnOff() => ExceptField("onOff");
}

internal partial class TestThermostatMeasurementsQueryBuilderV1 : GraphQlQueryBuilder<TestThermostatMeasurementsQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "temperature" },
        new GraphQlFieldMetadata { Name = "timestamp" },
        new GraphQlFieldMetadata { Name = "display", IsComplex = true, QueryBuilderType = typeof(TestThermostatMeasurementQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "ThermostatMeasurements";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestThermostatMeasurementsQueryBuilderV1 WithTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("temperature", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementsQueryBuilderV1 ExceptTemperature() => ExceptField("temperature");

    public TestThermostatMeasurementsQueryBuilderV1 WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementsQueryBuilderV1 ExceptTimestamp() => ExceptField("timestamp");

    public TestThermostatMeasurementsQueryBuilderV1 WithDisplay(TestThermostatMeasurementQueryBuilderV1 thermostatMeasurementQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("display", alias, thermostatMeasurementQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementsQueryBuilderV1 ExceptDisplay() => ExceptField("display");
}

internal partial class TestThermostatMeasurementQueryBuilderV1 : GraphQlQueryBuilder<TestThermostatMeasurementQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "label" },
        new GraphQlFieldMetadata { Name = "description" },
        new GraphQlFieldMetadata { Name = "descriptionLong" },
        new GraphQlFieldMetadata { Name = "value" },
        new GraphQlFieldMetadata { Name = "valueText" },
        new GraphQlFieldMetadata { Name = "unit" },
        new GraphQlFieldMetadata { Name = "unitText" },
        new GraphQlFieldMetadata { Name = "timestamp" },
        new GraphQlFieldMetadata { Name = "type" },
        new GraphQlFieldMetadata { Name = "typeText" }
    };

    protected override string TypeName { get; } = "ThermostatMeasurement";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestThermostatMeasurementQueryBuilderV1 WithLabel(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("label", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptLabel() => ExceptField("label");

    public TestThermostatMeasurementQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public TestThermostatMeasurementQueryBuilderV1 WithDescriptionLong(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("descriptionLong", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptDescriptionLong() => ExceptField("descriptionLong");

    public TestThermostatMeasurementQueryBuilderV1 WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("value", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptValue() => ExceptField("value");

    public TestThermostatMeasurementQueryBuilderV1 WithValueText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("valueText", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptValueText() => ExceptField("valueText");

    public TestThermostatMeasurementQueryBuilderV1 WithUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unit", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptUnit() => ExceptField("unit");

    public TestThermostatMeasurementQueryBuilderV1 WithUnitText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitText", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptUnitText() => ExceptField("unitText");

    public TestThermostatMeasurementQueryBuilderV1 WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptTimestamp() => ExceptField("timestamp");

    public TestThermostatMeasurementQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptType() => ExceptField("type");

    public TestThermostatMeasurementQueryBuilderV1 WithTypeText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("typeText", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatMeasurementQueryBuilderV1 ExceptTypeText() => ExceptField("typeText");
}

internal partial class TestThermostatCapabilityQueryBuilderV1 : GraphQlQueryBuilder<TestThermostatCapabilityQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "name" },
        new GraphQlFieldMetadata { Name = "type" },
        new GraphQlFieldMetadata { Name = "values", IsComplex = true }
    };

    protected override string TypeName { get; } = "ThermostatCapability";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestThermostatCapabilityQueryBuilderV1 WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("name", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatCapabilityQueryBuilderV1 ExceptName() => ExceptField("name");

    public TestThermostatCapabilityQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatCapabilityQueryBuilderV1 ExceptType() => ExceptField("type");

    public TestThermostatCapabilityQueryBuilderV1 WithValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("values", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatCapabilityQueryBuilderV1 ExceptValues() => ExceptField("values");
}

internal partial class TestThermostatModeQueryBuilderV1 : GraphQlQueryBuilder<TestThermostatModeQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "name" },
        new GraphQlFieldMetadata { Name = "capabilities", IsComplex = true }
    };

    protected override string TypeName { get; } = "ThermostatMode";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestThermostatModeQueryBuilderV1 WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("name", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatModeQueryBuilderV1 ExceptName() => ExceptField("name");

    public TestThermostatModeQueryBuilderV1 WithCapabilities(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("capabilities", alias, new GraphQlDirective[] { include, skip });

    public TestThermostatModeQueryBuilderV1 ExceptCapabilities() => ExceptField("capabilities");
}

internal partial class TestSensorQueryBuilderV1 : GraphQlQueryBuilder<TestSensorQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "idDeprecated" },
        new GraphQlFieldMetadata { Name = "hasHistory" },
        new GraphQlFieldMetadata { Name = "measurement", IsComplex = true, QueryBuilderType = typeof(TestThermostatMeasurementQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Sensor";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestSensorQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestSensorQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestSensorQueryBuilderV1 WithIdDeprecated(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("idDeprecated", alias, new GraphQlDirective[] { include, skip });

    public TestSensorQueryBuilderV1 ExceptIdDeprecated() => ExceptField("idDeprecated");

    public TestSensorQueryBuilderV1 WithHasHistory(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("hasHistory", alias, new GraphQlDirective[] { include, skip });

    public TestSensorQueryBuilderV1 ExceptHasHistory() => ExceptField("hasHistory");

    public TestSensorQueryBuilderV1 WithMeasurement(TestThermostatMeasurementQueryBuilderV1 thermostatMeasurementQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("measurement", alias, thermostatMeasurementQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestSensorQueryBuilderV1 ExceptMeasurement() => ExceptField("measurement");
}

internal partial class TestSensorHistoryQueryBuilderV1 : GraphQlQueryBuilder<TestSensorHistoryQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "sensorId" },
        new GraphQlFieldMetadata { Name = "description" },
        new GraphQlFieldMetadata { Name = "values", IsComplex = true, QueryBuilderType = typeof(TestSensorHistoryValueQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "SensorHistory";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestSensorHistoryQueryBuilderV1 WithSensorId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("sensorId", alias, new GraphQlDirective[] { include, skip });

    public TestSensorHistoryQueryBuilderV1 ExceptSensorId() => ExceptField("sensorId");

    public TestSensorHistoryQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public TestSensorHistoryQueryBuilderV1 ExceptDescription() => ExceptField("description");

    public TestSensorHistoryQueryBuilderV1 WithValues(TestSensorHistoryValueQueryBuilderV1 sensorHistoryValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("values", alias, sensorHistoryValueQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestSensorHistoryQueryBuilderV1 ExceptValues() => ExceptField("values");
}

internal partial class TestSensorHistoryValueQueryBuilderV1 : GraphQlQueryBuilder<TestSensorHistoryValueQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "timestamp" },
        new GraphQlFieldMetadata { Name = "value" },
        new GraphQlFieldMetadata { Name = "valueText" }
    };

    protected override string TypeName { get; } = "SensorHistoryValue";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestSensorHistoryValueQueryBuilderV1 WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });

    public TestSensorHistoryValueQueryBuilderV1 ExceptTimestamp() => ExceptField("timestamp");

    public TestSensorHistoryValueQueryBuilderV1 WithValue(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("value", alias, new GraphQlDirective[] { include, skip });

    public TestSensorHistoryValueQueryBuilderV1 ExceptValue() => ExceptField("value");

    public TestSensorHistoryValueQueryBuilderV1 WithValueText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("valueText", alias, new GraphQlDirective[] { include, skip });

    public TestSensorHistoryValueQueryBuilderV1 ExceptValueText() => ExceptField("valueText");
}

internal partial class TestPairableDeviceQueryBuilderV1 : GraphQlQueryBuilder<TestPairableDeviceQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "type" },
        new GraphQlFieldMetadata { Name = "oauth", IsComplex = true, QueryBuilderType = typeof(TestPairableDeviceOAuthQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "readMoreUrl" }
    };

    protected override string TypeName { get; } = "PairableDevice";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPairableDeviceQueryBuilderV1 WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("type", alias, new GraphQlDirective[] { include, skip });

    public TestPairableDeviceQueryBuilderV1 ExceptType() => ExceptField("type");

    public TestPairableDeviceQueryBuilderV1 WithOauth(TestPairableDeviceOAuthQueryBuilderV1 pairableDeviceOAuthQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("oauth", alias, pairableDeviceOAuthQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPairableDeviceQueryBuilderV1 ExceptOauth() => ExceptField("oauth");

    public TestPairableDeviceQueryBuilderV1 WithReadMoreUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("readMoreUrl", alias, new GraphQlDirective[] { include, skip });

    public TestPairableDeviceQueryBuilderV1 ExceptReadMoreUrl() => ExceptField("readMoreUrl");
}

internal partial class TestPairableDeviceOAuthQueryBuilderV1 : GraphQlQueryBuilder<TestPairableDeviceOAuthQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "url" },
        new GraphQlFieldMetadata { Name = "redirectUriStartsWith" }
    };

    protected override string TypeName { get; } = "PairableDeviceOAuth";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPairableDeviceOAuthQueryBuilderV1 WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("url", alias, new GraphQlDirective[] { include, skip });

    public TestPairableDeviceOAuthQueryBuilderV1 ExceptUrl() => ExceptField("url");

    public TestPairableDeviceOAuthQueryBuilderV1 WithRedirectUriStartsWith(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("redirectUriStartsWith", alias, new GraphQlDirective[] { include, skip });

    public TestPairableDeviceOAuthQueryBuilderV1 ExceptRedirectUriStartsWith() => ExceptField("redirectUriStartsWith");
}

internal partial class TestProductionMonthQueryBuilderV1 : GraphQlQueryBuilder<TestProductionMonthQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "year" },
        new GraphQlFieldMetadata { Name = "month" },
        new GraphQlFieldMetadata { Name = "kwh" },
        new GraphQlFieldMetadata { Name = "cost" },
        new GraphQlFieldMetadata { Name = "isComplete" },
        new GraphQlFieldMetadata { Name = "title" },
        new GraphQlFieldMetadata { Name = "costText" },
        new GraphQlFieldMetadata { Name = "kwhText" },
        new GraphQlFieldMetadata { Name = "description" }
    };

    protected override string TypeName { get; } = "ProductionMonth";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestProductionMonthQueryBuilderV1 WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("year", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptYear() => ExceptField("year");

    public TestProductionMonthQueryBuilderV1 WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("month", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptMonth() => ExceptField("month");

    public TestProductionMonthQueryBuilderV1 WithKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kwh", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptKwh() => ExceptField("kwh");

    public TestProductionMonthQueryBuilderV1 WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptCost() => ExceptField("cost");

    public TestProductionMonthQueryBuilderV1 WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptIsComplete() => ExceptField("isComplete");

    public TestProductionMonthQueryBuilderV1 WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("title", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptTitle() => ExceptField("title");

    public TestProductionMonthQueryBuilderV1 WithCostText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("costText", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptCostText() => ExceptField("costText");

    public TestProductionMonthQueryBuilderV1 WithKwhText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("kwhText", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptKwhText() => ExceptField("kwhText");

    public TestProductionMonthQueryBuilderV1 WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("description", alias, new GraphQlDirective[] { include, skip });

    public TestProductionMonthQueryBuilderV1 ExceptDescription() => ExceptField("description");
}

internal partial class TestProductionQueryBuilderV1 : GraphQlQueryBuilder<TestProductionQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "annualValues", IsComplex = true, QueryBuilderType = typeof(TestProductionValueQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "monthlyValues", IsComplex = true, QueryBuilderType = typeof(TestProductionValueQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "weeklyValues", IsComplex = true, QueryBuilderType = typeof(TestProductionValueQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "dailyValues", IsComplex = true, QueryBuilderType = typeof(TestProductionValueQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "hourlyValues", IsComplex = true, QueryBuilderType = typeof(TestProductionValueQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "totalConsumption" },
        new GraphQlFieldMetadata { Name = "energyCost" },
        new GraphQlFieldMetadata { Name = "totalCost" },
        new GraphQlFieldMetadata { Name = "currency" },
        new GraphQlFieldMetadata { Name = "latestTransactionTimestamp" },
        new GraphQlFieldMetadata { Name = "timeZone" }
    };

    protected override string TypeName { get; } = "Production";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestProductionQueryBuilderV1 WithAnnualValues(TestProductionValueQueryBuilderV1 productionValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("annualValues", alias, productionValueQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptAnnualValues() => ExceptField("annualValues");

    public TestProductionQueryBuilderV1 WithMonthlyValues(TestProductionValueQueryBuilderV1 productionValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("monthlyValues", alias, productionValueQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptMonthlyValues() => ExceptField("monthlyValues");

    public TestProductionQueryBuilderV1 WithWeeklyValues(TestProductionValueQueryBuilderV1 productionValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("weeklyValues", alias, productionValueQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptWeeklyValues() => ExceptField("weeklyValues");

    public TestProductionQueryBuilderV1 WithDailyValues(TestProductionValueQueryBuilderV1 productionValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("dailyValues", alias, productionValueQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptDailyValues() => ExceptField("dailyValues");

    public TestProductionQueryBuilderV1 WithHourlyValues(TestProductionValueQueryBuilderV1 productionValueQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("hourlyValues", alias, productionValueQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptHourlyValues() => ExceptField("hourlyValues");

    public TestProductionQueryBuilderV1 WithTotalConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalConsumption", alias, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptTotalConsumption() => ExceptField("totalConsumption");

    public TestProductionQueryBuilderV1 WithEnergyCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("energyCost", alias, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptEnergyCost() => ExceptField("energyCost");

    public TestProductionQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public TestProductionQueryBuilderV1 WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptCurrency() => ExceptField("currency");

    public TestProductionQueryBuilderV1 WithLatestTransactionTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("latestTransactionTimestamp", alias, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptLatestTransactionTimestamp() => ExceptField("latestTransactionTimestamp");

    public TestProductionQueryBuilderV1 WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });

    public TestProductionQueryBuilderV1 ExceptTimeZone() => ExceptField("timeZone");
}

internal partial class TestProductionValueQueryBuilderV1 : GraphQlQueryBuilder<TestProductionValueQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "from" },
        new GraphQlFieldMetadata { Name = "to" },
        new GraphQlFieldMetadata { Name = "unitPrice" },
        new GraphQlFieldMetadata { Name = "unitPriceVAT" },
        new GraphQlFieldMetadata { Name = "consumption" },
        new GraphQlFieldMetadata { Name = "consumptionUnit" },
        new GraphQlFieldMetadata { Name = "totalCost" },
        new GraphQlFieldMetadata { Name = "unitCost" },
        new GraphQlFieldMetadata { Name = "quality" },
        new GraphQlFieldMetadata { Name = "consumptionEntries" }
    };

    protected override string TypeName { get; } = "ProductionValue";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestProductionValueQueryBuilderV1 WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("from", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptFrom() => ExceptField("from");

    public TestProductionValueQueryBuilderV1 WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("to", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptTo() => ExceptField("to");

    public TestProductionValueQueryBuilderV1 WithUnitPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitPrice", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptUnitPrice() => ExceptField("unitPrice");

    public TestProductionValueQueryBuilderV1 WithUnitPriceVat(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitPriceVAT", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptUnitPriceVat() => ExceptField("unitPriceVAT");

    public TestProductionValueQueryBuilderV1 WithConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumption", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptConsumption() => ExceptField("consumption");

    public TestProductionValueQueryBuilderV1 WithConsumptionUnit(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumptionUnit", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptConsumptionUnit() => ExceptField("consumptionUnit");

    public TestProductionValueQueryBuilderV1 WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptTotalCost() => ExceptField("totalCost");

    public TestProductionValueQueryBuilderV1 WithUnitCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("unitCost", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptUnitCost() => ExceptField("unitCost");

    public TestProductionValueQueryBuilderV1 WithQuality(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("quality", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptQuality() => ExceptField("quality");

    public TestProductionValueQueryBuilderV1 WithConsumptionEntries(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("consumptionEntries", alias, new GraphQlDirective[] { include, skip });

    public TestProductionValueQueryBuilderV1 ExceptConsumptionEntries() => ExceptField("consumptionEntries");
}

internal partial class TestFeedQueryBuilderV1 : GraphQlQueryBuilder<TestFeedQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "numberOfItems" },
        new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(TestFeedItemQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "pushNotifications", IsComplex = true, QueryBuilderType = typeof(TestPushNotificationQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Feed";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestFeedQueryBuilderV1 WithNumberOfItems(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("numberOfItems", alias, new GraphQlDirective[] { include, skip });

    public TestFeedQueryBuilderV1 ExceptNumberOfItems() => ExceptField("numberOfItems");

    public TestFeedQueryBuilderV1 WithItems(TestFeedItemQueryBuilderV1 feedItemQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> pageSize = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (page != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

        if (pageSize != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pageSize", ArgumentValue = pageSize} );

        return WithObjectField("items", alias, feedItemQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestFeedQueryBuilderV1 ExceptItems() => ExceptField("items");

    public TestFeedQueryBuilderV1 WithPushNotifications(TestPushNotificationQueryBuilderV1 pushNotificationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("pushNotifications", alias, pushNotificationQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestFeedQueryBuilderV1 ExceptPushNotifications() => ExceptField("pushNotifications");
}

internal partial class TestFeedItemQueryBuilderV1 : GraphQlQueryBuilder<TestFeedItemQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "messageTypeId" },
        new GraphQlFieldMetadata { Name = "link" },
        new GraphQlFieldMetadata { Name = "text" },
        new GraphQlFieldMetadata { Name = "createdAt" },
        new GraphQlFieldMetadata { Name = "modifiedAt" }
    };

    protected override string TypeName { get; } = "FeedItem";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestFeedItemQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestFeedItemQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestFeedItemQueryBuilderV1 WithMessageTypeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("messageTypeId", alias, new GraphQlDirective[] { include, skip });

    public TestFeedItemQueryBuilderV1 ExceptMessageTypeId() => ExceptField("messageTypeId");

    public TestFeedItemQueryBuilderV1 WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("link", alias, new GraphQlDirective[] { include, skip });

    public TestFeedItemQueryBuilderV1 ExceptLink() => ExceptField("link");

    public TestFeedItemQueryBuilderV1 WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("text", alias, new GraphQlDirective[] { include, skip });

    public TestFeedItemQueryBuilderV1 ExceptText() => ExceptField("text");

    public TestFeedItemQueryBuilderV1 WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });

    public TestFeedItemQueryBuilderV1 ExceptCreatedAt() => ExceptField("createdAt");

    public TestFeedItemQueryBuilderV1 WithModifiedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("modifiedAt", alias, new GraphQlDirective[] { include, skip });

    public TestFeedItemQueryBuilderV1 ExceptModifiedAt() => ExceptField("modifiedAt");
}

internal partial class TestPushNotificationQueryBuilderV1 : GraphQlQueryBuilder<TestPushNotificationQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "link" },
        new GraphQlFieldMetadata { Name = "text" }
    };

    protected override string TypeName { get; } = "PushNotification";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPushNotificationQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestPushNotificationQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestPushNotificationQueryBuilderV1 WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("link", alias, new GraphQlDirective[] { include, skip });

    public TestPushNotificationQueryBuilderV1 ExceptLink() => ExceptField("link");

    public TestPushNotificationQueryBuilderV1 WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("text", alias, new GraphQlDirective[] { include, skip });

    public TestPushNotificationQueryBuilderV1 ExceptText() => ExceptField("text");
}

internal partial class TestWalletQueryBuilderV1 : GraphQlQueryBuilder<TestWalletQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "paymentMethods", IsComplex = true, QueryBuilderType = typeof(TestPaymentMethodQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "directDebitToPromote" }
    };

    protected override string TypeName { get; } = "Wallet";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestWalletQueryBuilderV1 WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("id", alias, new GraphQlDirective[] { include, skip });

    public TestWalletQueryBuilderV1 ExceptId() => ExceptField("id");

    public TestWalletQueryBuilderV1 WithPaymentMethods(TestPaymentMethodQueryBuilderV1 paymentMethodQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("paymentMethods", alias, paymentMethodQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestWalletQueryBuilderV1 ExceptPaymentMethods() => ExceptField("paymentMethods");

    public TestWalletQueryBuilderV1 WithDirectDebitToPromote(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("directDebitToPromote", alias, new GraphQlDirective[] { include, skip });

    public TestWalletQueryBuilderV1 ExceptDirectDebitToPromote() => ExceptField("directDebitToPromote");
}

internal partial class TestPaymentMethodQueryBuilderV1 : GraphQlQueryBuilder<TestPaymentMethodQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "method" },
        new GraphQlFieldMetadata { Name = "status" },
        new GraphQlFieldMetadata { Name = "properties", IsComplex = true }
    };

    protected override string TypeName { get; } = "PaymentMethod";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPaymentMethodQueryBuilderV1 WithMethod(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("method", alias, new GraphQlDirective[] { include, skip });

    public TestPaymentMethodQueryBuilderV1 ExceptMethod() => ExceptField("method");

    public TestPaymentMethodQueryBuilderV1 WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("status", alias, new GraphQlDirective[] { include, skip });

    public TestPaymentMethodQueryBuilderV1 ExceptStatus() => ExceptField("status");

    public TestPaymentMethodQueryBuilderV1 WithProperties(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("properties", alias, new GraphQlDirective[] { include, skip });

    public TestPaymentMethodQueryBuilderV1 ExceptProperties() => ExceptField("properties");
}

internal partial class TestAboutQueryBuilderV1 : GraphQlQueryBuilder<TestAboutQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(TestAboutItemQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "About";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestAboutQueryBuilderV1 WithItems(TestAboutItemQueryBuilderV1 aboutItemQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("items", alias, aboutItemQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestAboutQueryBuilderV1 ExceptItems() => ExceptField("items");
}

internal partial class TestAboutItemQueryBuilderV1 : GraphQlQueryBuilder<TestAboutItemQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "label" },
        new GraphQlFieldMetadata { Name = "url" }
    };

    protected override string TypeName { get; } = "AboutItem";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestAboutItemQueryBuilderV1 WithLabel(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("label", alias, new GraphQlDirective[] { include, skip });

    public TestAboutItemQueryBuilderV1 ExceptLabel() => ExceptField("label");

    public TestAboutItemQueryBuilderV1 WithUrl(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("url", alias, new GraphQlDirective[] { include, skip });

    public TestAboutItemQueryBuilderV1 ExceptUrl() => ExceptField("url");
}

internal partial class TestMutationQueryBuilderV1 : GraphQlQueryBuilder<TestMutationQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(TestMeMutationQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "Mutation";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestMutationQueryBuilderV1(string operationName = null) : base("mutation", operationName)
    {
    }

    public TestMutationQueryBuilderV1 WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

    public TestMutationQueryBuilderV1 WithMe(TestMeMutationQueryBuilderV1 meMutationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("me", alias, meMutationQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestMutationQueryBuilderV1 ExceptMe() => ExceptField("me");
}

internal partial class TestMeMutationQueryBuilderV1 : GraphQlQueryBuilder<TestMeMutationQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "update", IsComplex = true, QueryBuilderType = typeof(TestMeQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(TestHomeMutationQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "updateAppState", IsComplex = true, QueryBuilderType = typeof(TestGqlMutationGeneralResponseQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "MeMutation";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestMeMutationQueryBuilderV1 WithUpdate(TestMeQueryBuilderV1 meQueryBuilder, QueryBuilderParameter<string> email = null, QueryBuilderParameter<string> mobile = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (email != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "email", ArgumentValue = email} );

        if (mobile != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mobile", ArgumentValue = mobile} );

        return WithObjectField("update", alias, meQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestMeMutationQueryBuilderV1 ExceptUpdate() => ExceptField("update");

    public TestMeMutationQueryBuilderV1 WithHome(TestHomeMutationQueryBuilderV1 homeMutationQueryBuilder, QueryBuilderParameter<string> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (id != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

        return WithObjectField("home", alias, homeMutationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestMeMutationQueryBuilderV1 ExceptHome() => ExceptField("home");

    public TestMeMutationQueryBuilderV1 WithUpdateAppState(TestGqlMutationGeneralResponseQueryBuilderV1 gqlMutationGeneralResponseQueryBuilder, QueryBuilderParameter<TestAppStateMutationV1> state = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (state != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "state", ArgumentValue = state} );

        return WithObjectField("updateAppState", alias, gqlMutationGeneralResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestMeMutationQueryBuilderV1 ExceptUpdateAppState() => ExceptField("updateAppState");
}

internal partial class TestHomeMutationQueryBuilderV1 : GraphQlQueryBuilder<TestHomeMutationQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "thermostat", IsComplex = true, QueryBuilderType = typeof(TestThermostatMutationQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "pairDeviceWithOAuth", IsComplex = true, QueryBuilderType = typeof(TestPairDeviceResultQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "pairDeviceWithCredentials", IsComplex = true, QueryBuilderType = typeof(TestPairDeviceResultQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "answerProfileQuestions", IsComplex = true, QueryBuilderType = typeof(TestHomeProfileQuestionQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "sendMeterReading", IsComplex = true, QueryBuilderType = typeof(TestGqlMutationGeneralResponseQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "setMeteringPointIdAndBindingTime", IsComplex = true, QueryBuilderType = typeof(TestGqlMutationGeneralResponseQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "restartSubscription", IsComplex = true, QueryBuilderType = typeof(TestGqlMutationGeneralResponseQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "HomeMutation";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestHomeMutationQueryBuilderV1 WithThermostat(TestThermostatMutationQueryBuilderV1 thermostatMutationQueryBuilder, QueryBuilderParameter<string> id = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (id != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "id", ArgumentValue = id} );

        return WithObjectField("thermostat", alias, thermostatMutationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeMutationQueryBuilderV1 ExceptThermostat() => ExceptField("thermostat");

    public TestHomeMutationQueryBuilderV1 WithPairDeviceWithOAuth(TestPairDeviceResultQueryBuilderV1 pairDeviceResultQueryBuilder, QueryBuilderParameter<string> deviceType = null, QueryBuilderParameter<string> authorizationCode = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (deviceType != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "deviceType", ArgumentValue = deviceType} );

        if (authorizationCode != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "authorizationCode", ArgumentValue = authorizationCode} );

        return WithObjectField("pairDeviceWithOAuth", alias, pairDeviceResultQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeMutationQueryBuilderV1 ExceptPairDeviceWithOAuth() => ExceptField("pairDeviceWithOAuth");

    public TestHomeMutationQueryBuilderV1 WithPairDeviceWithCredentials(TestPairDeviceResultQueryBuilderV1 pairDeviceResultQueryBuilder, QueryBuilderParameter<string> deviceType = null, QueryBuilderParameter<string> username = null, QueryBuilderParameter<string> password = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (deviceType != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "deviceType", ArgumentValue = deviceType} );

        if (username != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "username", ArgumentValue = username} );

        if (password != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "password", ArgumentValue = password} );

        return WithObjectField("pairDeviceWithCredentials", alias, pairDeviceResultQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeMutationQueryBuilderV1 ExceptPairDeviceWithCredentials() => ExceptField("pairDeviceWithCredentials");

    public TestHomeMutationQueryBuilderV1 WithAnswerProfileQuestions(TestHomeProfileQuestionQueryBuilderV1 homeProfileQuestionQueryBuilder, QueryBuilderParameter<IEnumerable<TestHomeProfileQuestionAnswerV1>> answers = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (answers != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "answers", ArgumentValue = answers} );

        return WithObjectField("answerProfileQuestions", alias, homeProfileQuestionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeMutationQueryBuilderV1 ExceptAnswerProfileQuestions() => ExceptField("answerProfileQuestions");

    public TestHomeMutationQueryBuilderV1 WithSendMeterReading(TestGqlMutationGeneralResponseQueryBuilderV1 gqlMutationGeneralResponseQueryBuilder, QueryBuilderParameter<int?> meterReading = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (meterReading != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "meterReading", ArgumentValue = meterReading} );

        return WithObjectField("sendMeterReading", alias, gqlMutationGeneralResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeMutationQueryBuilderV1 ExceptSendMeterReading() => ExceptField("sendMeterReading");

    public TestHomeMutationQueryBuilderV1 WithSetMeteringPointIdAndBindingTime(TestGqlMutationGeneralResponseQueryBuilderV1 gqlMutationGeneralResponseQueryBuilder, QueryBuilderParameter<string> meteringPointId = null, QueryBuilderParameter<string> bindingTime = null, QueryBuilderParameter<bool?> isMovingIn = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (meteringPointId != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "meteringPointId", ArgumentValue = meteringPointId} );

        if (bindingTime != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "bindingTime", ArgumentValue = bindingTime} );

        if (isMovingIn != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "isMovingIn", ArgumentValue = isMovingIn} );

        return WithObjectField("setMeteringPointIdAndBindingTime", alias, gqlMutationGeneralResponseQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public TestHomeMutationQueryBuilderV1 ExceptSetMeteringPointIdAndBindingTime() => ExceptField("setMeteringPointIdAndBindingTime");

    public TestHomeMutationQueryBuilderV1 WithRestartSubscription(TestGqlMutationGeneralResponseQueryBuilderV1 gqlMutationGeneralResponseQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("restartSubscription", alias, gqlMutationGeneralResponseQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestHomeMutationQueryBuilderV1 ExceptRestartSubscription() => ExceptField("restartSubscription");
}

internal partial class TestThermostatMutationQueryBuilderV1 : GraphQlQueryBuilder<TestThermostatMutationQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "setState" },
        new GraphQlFieldMetadata { Name = "setName" }
    };

    protected override string TypeName { get; } = "ThermostatMutation";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestThermostatMutationQueryBuilderV1 WithSetState(QueryBuilderParameter<string> mode = null, QueryBuilderParameter<decimal?> comfortTemperature = null, QueryBuilderParameter<string> fanLevel = null, QueryBuilderParameter<string> onOff = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (mode != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "mode", ArgumentValue = mode} );

        if (comfortTemperature != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "comfortTemperature", ArgumentValue = comfortTemperature} );

        if (fanLevel != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "fanLevel", ArgumentValue = fanLevel} );

        if (onOff != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "onOff", ArgumentValue = onOff} );

        return WithScalarField("setState", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public TestThermostatMutationQueryBuilderV1 ExceptSetState() => ExceptField("setState");

    public TestThermostatMutationQueryBuilderV1 WithSetName(QueryBuilderParameter<string> name = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (name != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "name", ArgumentValue = name} );

        return WithScalarField("setName", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public TestThermostatMutationQueryBuilderV1 ExceptSetName() => ExceptField("setName");
}

internal partial class TestPairDeviceResultQueryBuilderV1 : GraphQlQueryBuilder<TestPairDeviceResultQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "thermostats", IsComplex = true, QueryBuilderType = typeof(TestThermostatQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "sensors", IsComplex = true, QueryBuilderType = typeof(TestSensorQueryBuilderV1) },
        new GraphQlFieldMetadata { Name = "error", IsComplex = true, QueryBuilderType = typeof(TestGqlMutationErrorQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "PairDeviceResult";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestPairDeviceResultQueryBuilderV1 WithThermostats(TestThermostatQueryBuilderV1 thermostatQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("thermostats", alias, thermostatQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPairDeviceResultQueryBuilderV1 ExceptThermostats() => ExceptField("thermostats");

    public TestPairDeviceResultQueryBuilderV1 WithSensors(TestSensorQueryBuilderV1 sensorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("sensors", alias, sensorQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPairDeviceResultQueryBuilderV1 ExceptSensors() => ExceptField("sensors");

    public TestPairDeviceResultQueryBuilderV1 WithError(TestGqlMutationErrorQueryBuilderV1 gqlMutationErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("error", alias, gqlMutationErrorQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestPairDeviceResultQueryBuilderV1 ExceptError() => ExceptField("error");
}

internal partial class TestGqlMutationErrorQueryBuilderV1 : GraphQlQueryBuilder<TestGqlMutationErrorQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "statusCode" },
        new GraphQlFieldMetadata { Name = "message" }
    };

    protected override string TypeName { get; } = "GQLMutationError";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestGqlMutationErrorQueryBuilderV1 WithStatusCode(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("statusCode", alias, new GraphQlDirective[] { include, skip });

    public TestGqlMutationErrorQueryBuilderV1 ExceptStatusCode() => ExceptField("statusCode");

    public TestGqlMutationErrorQueryBuilderV1 WithMessage(string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithScalarField("message", alias, new GraphQlDirective[] { include, skip });

    public TestGqlMutationErrorQueryBuilderV1 ExceptMessage() => ExceptField("message");
}

internal partial class TestGqlMutationGeneralResponseQueryBuilderV1 : GraphQlQueryBuilder<TestGqlMutationGeneralResponseQueryBuilderV1>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "error", IsComplex = true, QueryBuilderType = typeof(TestGqlMutationErrorQueryBuilderV1) }
    };

    protected override string TypeName { get; } = "GQLMutationGeneralResponse";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public TestGqlMutationGeneralResponseQueryBuilderV1 WithError(TestGqlMutationErrorQueryBuilderV1 gqlMutationErrorQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null) => WithObjectField("error", alias, gqlMutationErrorQueryBuilder, new GraphQlDirective[] { include, skip });

    public TestGqlMutationGeneralResponseQueryBuilderV1 ExceptError() => ExceptField("error");
}
#endregion

#region input classes
internal partial class TestHomeProfileQuestionAnswerV1 : IGraphQlInputObject
{
    private InputPropertyInfo _propertyName;
    private InputPropertyInfo _value;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
    #endif
    public QueryBuilderParameter<string> PropertyName
    {
        get => (QueryBuilderParameter<string>)_propertyName.Value;
        set => _propertyName = new InputPropertyInfo { Name = "propertyName", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<object>))]
    #endif
    public QueryBuilderParameter<object> Value
    {
        get => (QueryBuilderParameter<object>)_value.Value;
        set => _value = new InputPropertyInfo { Name = "value", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_propertyName.Name != null) yield return _propertyName;
        if (_value.Name != null) yield return _value;
    }
}

internal partial class TestAppStateMutationV1 : IGraphQlInputObject
{
    private InputPropertyInfo _journey;
    private InputPropertyInfo _frontScreens;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<TestAppStateJourneyMutationV1>))]
    #endif
    public QueryBuilderParameter<TestAppStateJourneyMutationV1> Journey
    {
        get => (QueryBuilderParameter<TestAppStateJourneyMutationV1>)_journey.Value;
        set => _journey = new InputPropertyInfo { Name = "journey", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<TestAppStateFronScreenMutationV1>>))]
    #endif
    public QueryBuilderParameter<ICollection<TestAppStateFronScreenMutationV1>> FrontScreens
    {
        get => (QueryBuilderParameter<ICollection<TestAppStateFronScreenMutationV1>>)_frontScreens.Value;
        set => _frontScreens = new InputPropertyInfo { Name = "frontScreens", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_journey.Name != null) yield return _journey;
        if (_frontScreens.Name != null) yield return _frontScreens;
    }
}

internal partial class TestAppStateJourneyMutationV1 : IGraphQlInputObject
{
    private InputPropertyInfo _hasVisitedPairDevices;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<bool?>))]
    #endif
    public QueryBuilderParameter<bool?> HasVisitedPairDevices
    {
        get => (QueryBuilderParameter<bool?>)_hasVisitedPairDevices.Value;
        set => _hasVisitedPairDevices = new InputPropertyInfo { Name = "hasVisitedPairDevices", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_hasVisitedPairDevices.Name != null) yield return _hasVisitedPairDevices;
    }
}

internal partial class TestAppStateFronScreenMutationV1 : IGraphQlInputObject
{
    private InputPropertyInfo _homeId;
    private InputPropertyInfo _bubbles;
    private InputPropertyInfo _bubblesSortOrder;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string>))]
    #endif
    public QueryBuilderParameter<string> HomeId
    {
        get => (QueryBuilderParameter<string>)_homeId.Value;
        set => _homeId = new InputPropertyInfo { Name = "homeId", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
    #endif
    public QueryBuilderParameter<ICollection<string>> Bubbles
    {
        get => (QueryBuilderParameter<ICollection<string>>)_bubbles.Value;
        set => _bubbles = new InputPropertyInfo { Name = "bubbles", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<string>>))]
    #endif
    public QueryBuilderParameter<ICollection<string>> BubblesSortOrder
    {
        get => (QueryBuilderParameter<ICollection<string>>)_bubblesSortOrder.Value;
        set => _bubblesSortOrder = new InputPropertyInfo { Name = "bubblesSortOrder", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_homeId.Name != null) yield return _homeId;
        if (_bubbles.Name != null) yield return _bubbles;
        if (_bubblesSortOrder.Name != null) yield return _bubblesSortOrder;
    }
}
#endregion

#region data classes
internal partial class TestQueryV1
{
    public TestMeV1 Me { get; set; }
}

internal partial class TestMeV1
{
    public Guid? Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string FullName { get; set; }
    public string Ssn { get; set; }
    public string Email { get; set; }
    public string Language { get; set; }
    public string Tone { get; set; }
    public string Mobile { get; set; }
    public TestGreetingV1 WelcomeGreeting { get; set; }
    public TestAppStateV1 AppState { get; set; }
    public TestHomeV1 Home { get; set; }
    public ICollection<TestHomeV1> Homes { get; set; }
    public TestFeedV1 Feed { get; set; }
    public TestWalletV1 Wallet { get; set; }
    public TestAboutV1 About { get; set; }
}

internal partial class TestGreetingV1
{
    public string Title { get; set; }
    public string Description { get; set; }
    public string DescriptionWhenNoEnergyDeal { get; set; }
    public string ShowUntil { get; set; }
}

internal partial class TestAppStateV1
{
    public TestAppStateJourneyV1 Journey { get; set; }
    public ICollection<TestAppStateFronScreenV1> FrontScreens { get; set; }
}

internal partial class TestAppStateJourneyV1
{
    public bool? HasVisitedPairDevices { get; set; }
}

internal partial class TestAppStateFronScreenV1
{
    public string HomeId { get; set; }
    public ICollection<string> Bubbles { get; set; }
    public ICollection<string> BubblesSortOrder { get; set; }
}

internal partial class TestHomeV1
{
    public Guid? Id { get; set; }
    public TestAvatarV1? Avatar { get; set; }
    public string TimeZone { get; set; }
    public string Title { get; set; }
    public string Type { get; set; }
    public bool? HasEnergyDeal { get; set; }
    public TestAddressV1 Address { get; set; }
    public TestSubscriptionV1 Subscription { get; set; }
    public ICollection<TestConsumptionMonthV1> ConsumptionMonths { get; set; }
    public TestConsumptionV1 Consumption { get; set; }
    public TestPreLiveComparisonV1 PreLiveComparison { get; set; }
    public ICollection<TestComparisonV1> Comparisons { get; set; }
    public TestComparisonV1 ComparisonCurrentMonth { get; set; }
    public ICollection<TestHomeProfileQuestionV1> ProfileQuestions { get; set; }
    public ICollection<object> Temperatures { get; set; }
    public TestSignupStatusV1 SignupStatus { get; set; }
    public ICollection<TestDisaggregationV1> Disaggregation { get; set; }
    public TestWeatherV1 Weather { get; set; }
    public TestAwayModeV1 AwayMode { get; set; }
    public TestDayNightScheduleV1 DayNightSchedule { get; set; }
    public TestReportRootV1 Report { get; set; }
    public ICollection<TestThermostatV1> Thermostats { get; set; }
    public ICollection<TestSensorV1> Sensors { get; set; }
    public ICollection<TestSensorHistoryV1> SensorsHistory { get; set; }
    public ICollection<TestPairableDeviceV1> PairableDevices { get; set; }
    public ICollection<TestProductionMonthV1> ProductionMonths { get; set; }
    public TestProductionV1 Production { get; set; }
}

internal partial class TestAddressV1
{
    public string Address1 { get; set; }
    public string Address2 { get; set; }
    public string Address3 { get; set; }
    public string City { get; set; }
    public string PostalCode { get; set; }
    public string Country { get; set; }
    public decimal? Latitude { get; set; }
    public decimal? Longitude { get; set; }
    public int? Elevation { get; set; }
    public string AddressText { get; set; }
}

internal partial class TestSubscriptionV1
{
    public Guid? Id { get; set; }
    public Guid? WalletId { get; set; }
    public DateTimeOffset? ValidFrom { get; set; }
    public DateTimeOffset? ValidTo { get; set; }
    public string Status { get; set; }
    public int? BillingRegionId { get; set; }
    public TestPriceRatingRootV1 PriceRating { get; set; }
    public ICollection<TestInvoiceV1> Invoices { get; set; }
    public TestEnergyDealV1 EnergyDeal { get; set; }
}

internal partial class TestPriceRatingRootV1
{
    public bool? IsAvailable { get; set; }
    public bool? UseTotalIsConfigurable { get; set; }
    public bool? UseTotalAsDefault { get; set; }
    public string UseTotalText { get; set; }
    public TestPriceRatingV1 Hourly { get; set; }
    public TestPriceRatingV1 Daily { get; set; }
    public TestPriceRatingV1 Monthly { get; set; }
}

internal partial class TestPriceRatingV1
{
    public decimal? MinEnergy { get; set; }
    public decimal? MaxEnergy { get; set; }
    public decimal? MinTotal { get; set; }
    public decimal? MaxTotal { get; set; }
    public string Currency { get; set; }
    public TestPriceRatingColorOffsetV1 ColorOffsets { get; set; }
    public ICollection<TestPriceRatingEntryV1> Entries { get; set; }
}

internal partial class TestPriceRatingColorOffsetV1
{
    public decimal? FullGreenPercent { get; set; }
    public decimal? FullYellowPercent { get; set; }
    public decimal? FullRedPercent { get; set; }
}

internal partial class TestPriceRatingEntryV1
{
    public string Time { get; set; }
    public decimal? Energy { get; set; }
    public decimal? Total { get; set; }
    public decimal? Difference { get; set; }
}

internal partial class TestInvoiceV1
{
    public int? Id { get; set; }
    public string No { get; set; }
    public string Date { get; set; }
    public string DueDate { get; set; }
    public decimal? TotalCost { get; set; }
    public string TotalCostLocalized { get; set; }
    public decimal? TotalEnergyConsumption { get; set; }
    public string TotalEnergyConsumptionLocalized { get; set; }
    public decimal? TotalVat { get; set; }
    public string TotalVatLocalized { get; set; }
    public decimal? VatPercent { get; set; }
    public string VatPercentLocalized { get; set; }
    public bool? VatIsIncluded { get; set; }
    public string MeteringPointId { get; set; }
    public string PaymentReference { get; set; }
    public bool? ShowManualPaymentReferences { get; set; }
    public string BankAccount { get; set; }
    public string PdfUrl { get; set; }
    public string TimeZone { get; set; }
    public string Currency { get; set; }
    public TestInvoicePaymentV1 Payment { get; set; }
    public ICollection<TestInvoiceSectionV1> Sections { get; set; }
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
}

internal partial class TestInvoicePaymentV1
{
    public string Status { get; set; }
    public string Method { get; set; }
    public string Date { get; set; }
    public string FailureText { get; set; }
    public TestCreditCardV1 CreditCard { get; set; }
}

internal partial class TestCreditCardV1
{
    public string Brand { get; set; }
    public string Last4 { get; set; }
}

internal partial class TestInvoiceSectionV1
{
    public string Type { get; set; }
    public string Text { get; set; }
    public string SubText { get; set; }
    public decimal? Consumption { get; set; }
    public string ConsumptionLocalized { get; set; }
    public string ConsumptionUnit { get; set; }
    public decimal? Price { get; set; }
    public string PriceLocalized { get; set; }
    public string PriceUnit { get; set; }
    public decimal? Cost { get; set; }
    public string CostLocalized { get; set; }
    public string CostUnit { get; set; }
}

internal partial class TestEnergyDealV1
{
    public TestProducerV1 CurrentProducer { get; set; }
}

internal partial class TestProducerV1
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string ImageSrc { get; set; }
    public ICollection<TestProducerBulletV1> Bullets { get; set; }
}

internal partial class TestProducerBulletV1
{
    public string Title { get; set; }
    public string Description { get; set; }
    public string ReadMoreUrl { get; set; }
}

internal partial class TestConsumptionMonthV1
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public decimal? Kwh { get; set; }
    public decimal? Cost { get; set; }
    public bool? IsComplete { get; set; }
    public decimal? KwhEstimate { get; set; }
    public decimal? CostEstimate { get; set; }
    public string Currency { get; set; }
}

internal partial class TestConsumptionV1
{
    public object AnnualValues { get; set; }
    public object MonthlyValues { get; set; }
    public object WeeklyValues { get; set; }
    public object DailyValues { get; set; }
    public object HourlyValues { get; set; }
    public decimal? TotalConsumption { get; set; }
    public decimal? EnergyCost { get; set; }
    public decimal? TotalCost { get; set; }
    public string Currency { get; set; }
    public DateTimeOffset? LatestTransactionTimestamp { get; set; }
    public string TimeZone { get; set; }
}

internal partial class TestPreLiveComparisonV1
{
    public string HomeId { get; set; }
    public bool? BasedOnActuals { get; set; }
    public TestComparisonV1 PreviousYear { get; set; }
    public ICollection<TestComparisonV1> PreviousYearMonths { get; set; }
}

internal partial class TestComparisonV1
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public string Resolution { get; set; }
    public string HomeEfficency { get; set; }
    public string HomeEfficencyDescription { get; set; }
    public TestComparisonDataV1 Home { get; set; }
    public TestComparisonDataV1 Average { get; set; }
    public TestComparisonDataV1 Efficient { get; set; }
}

internal partial class TestComparisonDataV1
{
    public decimal? Cost { get; set; }
    public decimal? Consumption { get; set; }
}

internal partial class TestHomeProfileQuestionV1
{
    public int? Id { get; set; }
    public string Title { get; set; }
    public string Text { get; set; }
    public string Category { get; set; }
    public bool? IsAnswered { get; set; }
    public string PropertyName { get; set; }
    public string ValueType { get; set; }
    public object CurrentValue { get; set; }
    public string CurrentValueText { get; set; }
    public TestHomeProfileQuestionInputV1 Input { get; set; }
}

internal partial class TestHomeProfileQuestionInputV1
{
    public string Type { get; set; }
    public object Options { get; set; }
}

internal partial class TestSignupStatusV1
{
    public TestProcessStepV1 FeedStep { get; set; }
    public TestProcessStepV1 AvatarStep { get; set; }
    public ICollection<TestProcessStepV1> Steps { get; set; }
}

internal partial class TestProcessStepV1
{
    public DateTimeOffset? Timestamp { get; set; }
    public bool? IsComplete { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
}

internal partial class TestDisaggregationV1
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public decimal? FixedConsumptionKwh { get; set; }
    public int? FixedConsumptionKwhPercent { get; set; }
    public decimal? FixedConsumptionCost { get; set; }
    public decimal? HeatingConsumptionKwh { get; set; }
    public int? HeatingConsumptionKwhPercent { get; set; }
    public decimal? HeatingConsumptionCost { get; set; }
    public decimal? BehaviorConsumptionKwh { get; set; }
    public int? BehaviorConsumptionKwhPercent { get; set; }
    public decimal? BehaviorConsumptionCost { get; set; }
    public string Currency { get; set; }
    public bool? IsValid { get; set; }
    public int? TotalCost { get; set; }
    public int? TotalConsumptionKwh { get; set; }
}

internal partial class TestWeatherV1
{
    public decimal? MinTemperature { get; set; }
    public decimal? MaxTemperature { get; set; }
    public ICollection<TestWeatherEntryV1> Entries { get; set; }
}

internal partial class TestWeatherEntryV1
{
    public string Time { get; set; }
    public decimal? Temperature { get; set; }
    public string Type { get; set; }
    public decimal? Fog { get; set; }
    public decimal? Precipitation { get; set; }
    public decimal? Cloudiness { get; set; }
    public decimal? WindSpeed { get; set; }
    public decimal? WindGust { get; set; }
}

internal partial class TestAwayModeV1
{
    public bool? IsSupported { get; set; }
    public TestAwayModeSettingsV1 Settings { get; set; }
}

internal partial class TestAwayModeSettingsV1
{
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
}

internal partial class TestDayNightScheduleV1
{
    public bool? IsSupported { get; set; }
    public TestDayNightScheduleSettingsV1 Day { get; set; }
    public TestDayNightScheduleSettingsV1 Night { get; set; }
}

internal partial class TestDayNightScheduleSettingsV1
{
    public bool? IsEnabled { get; set; }
    public string LocalTimeFrom { get; set; }
    public string LocalTimeTo { get; set; }
    public ICollection<int> RecurringDays { get; set; }
}

internal partial class TestReportRootV1
{
    public ICollection<TestReportV1> Reports { get; set; }
}

internal partial class TestReportV1
{
    public string Avatar { get; set; }
    public string Title { get; set; }
    public string Efficiency { get; set; }
    public int? Year { get; set; }
    public int? Month { get; set; }
    public ICollection<TestReportCellV1> Items { get; set; }
}

internal partial class TestReportCellV1
{
    public string Type { get; set; }
    public string Style { get; set; }
    public string ImageSrc { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
    public string UnitText { get; set; }
    public string Link { get; set; }
    public object Properties { get; set; }
}

internal partial class TestThermostatV1
{
    public string Id { get; set; }
    public string Name { get; set; }
    public string Connectivity { get; set; }
    public TestThermostatStateV1 State { get; set; }
    public TestThermostatMeasurementsV1 Measurements { get; set; }
    public ICollection<TestThermostatCapabilityV1> Capabilities { get; set; }
    public ICollection<TestThermostatModeV1> Modes { get; set; }
    public string Template { get; set; }
    public bool? HasSettings { get; set; }
    public bool? SupportsDayNightSchedule { get; set; }
}

internal partial class TestThermostatStateV1
{
    public string Mode { get; set; }
    public decimal? ComfortTemperature { get; set; }
    public string FanLevel { get; set; }
    public string OnOff { get; set; }
}

internal partial class TestThermostatMeasurementsV1
{
    public decimal? Temperature { get; set; }
    public DateTimeOffset? Timestamp { get; set; }
    public ICollection<TestThermostatMeasurementV1> Display { get; set; }
}

internal partial class TestThermostatMeasurementV1
{
    public string Label { get; set; }
    public string Description { get; set; }
    public string DescriptionLong { get; set; }
    public decimal? Value { get; set; }
    public string ValueText { get; set; }
    public string Unit { get; set; }
    public string UnitText { get; set; }
    public DateTimeOffset? Timestamp { get; set; }
    public string Type { get; set; }
    public string TypeText { get; set; }
}

internal partial class TestThermostatCapabilityV1
{
    public string Name { get; set; }
    public string Type { get; set; }
    public object Values { get; set; }
}

internal partial class TestThermostatModeV1
{
    public string Name { get; set; }
    public ICollection<string> Capabilities { get; set; }
}

internal partial class TestSensorV1
{
    public string Id { get; set; }
    public string IdDeprecated { get; set; }
    public bool? HasHistory { get; set; }
    public TestThermostatMeasurementV1 Measurement { get; set; }
}

internal partial class TestSensorHistoryV1
{
    public string SensorId { get; set; }
    public string Description { get; set; }
    public ICollection<TestSensorHistoryValueV1> Values { get; set; }
}

internal partial class TestSensorHistoryValueV1
{
    public DateTimeOffset? Timestamp { get; set; }
    public decimal? Value { get; set; }
    public string ValueText { get; set; }
}

internal partial class TestPairableDeviceV1
{
    public string Type { get; set; }
    public TestPairableDeviceOAuthV1 Oauth { get; set; }
    public string ReadMoreUrl { get; set; }
}

internal partial class TestPairableDeviceOAuthV1
{
    public string Url { get; set; }
    public string RedirectUriStartsWith { get; set; }
}

internal partial class TestProductionMonthV1
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public decimal? Kwh { get; set; }
    public decimal? Cost { get; set; }
    public bool? IsComplete { get; set; }
    public string Title { get; set; }
    public string CostText { get; set; }
    public string KwhText { get; set; }
    public string Description { get; set; }
}

internal partial class TestProductionV1
{
    public ICollection<TestProductionValueV1> AnnualValues { get; set; }
    public ICollection<TestProductionValueV1> MonthlyValues { get; set; }
    public ICollection<TestProductionValueV1> WeeklyValues { get; set; }
    public ICollection<TestProductionValueV1> DailyValues { get; set; }
    public ICollection<TestProductionValueV1> HourlyValues { get; set; }
    public decimal? TotalConsumption { get; set; }
    public decimal? EnergyCost { get; set; }
    public decimal? TotalCost { get; set; }
    public string Currency { get; set; }
    public DateTimeOffset? LatestTransactionTimestamp { get; set; }
    public string TimeZone { get; set; }
}

internal partial class TestProductionValueV1
{
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
    public decimal? UnitPrice { get; set; }
    public decimal? UnitPriceVat { get; set; }
    public decimal? Consumption { get; set; }
    public string ConsumptionUnit { get; set; }
    public decimal? TotalCost { get; set; }
    public decimal? UnitCost { get; set; }
    public string Quality { get; set; }
    public int? ConsumptionEntries { get; set; }
}

internal partial class TestFeedV1
{
    public int? NumberOfItems { get; set; }
    public ICollection<TestFeedItemV1> Items { get; set; }
    public ICollection<TestPushNotificationV1> PushNotifications { get; set; }
}

internal partial class TestFeedItemV1
{
    public int? Id { get; set; }
    public string MessageTypeId { get; set; }
    public string Link { get; set; }
    public string Text { get; set; }
    public DateTimeOffset? CreatedAt { get; set; }
    public DateTimeOffset? ModifiedAt { get; set; }
}

internal partial class TestPushNotificationV1
{
    public int? Id { get; set; }
    public string Link { get; set; }
    public string Text { get; set; }
}

internal partial class TestWalletV1
{
    public string Id { get; set; }
    public ICollection<TestPaymentMethodV1> PaymentMethods { get; set; }
    public string DirectDebitToPromote { get; set; }
}

internal partial class TestPaymentMethodV1
{
    public string Method { get; set; }
    public string Status { get; set; }
    public object Properties { get; set; }
}

internal partial class TestAboutV1
{
    public ICollection<TestAboutItemV1> Items { get; set; }
}

internal partial class TestAboutItemV1
{
    public string Label { get; set; }
    public string Url { get; set; }
}

internal partial class TestMutationV1
{
    public TestMeMutationV1 Me { get; set; }
}

internal partial class TestMeMutationV1
{
    public TestMeV1 Update { get; set; }
    public TestHomeMutationV1 Home { get; set; }
    public TestGqlMutationGeneralResponseV1 UpdateAppState { get; set; }
}

internal partial class TestHomeMutationV1
{
    public TestThermostatMutationV1 Thermostat { get; set; }
    public TestPairDeviceResultV1 PairDeviceWithOAuth { get; set; }
    public TestPairDeviceResultV1 PairDeviceWithCredentials { get; set; }
    public ICollection<TestHomeProfileQuestionV1> AnswerProfileQuestions { get; set; }
    public TestGqlMutationGeneralResponseV1 SendMeterReading { get; set; }
    public TestGqlMutationGeneralResponseV1 SetMeteringPointIdAndBindingTime { get; set; }
    public TestGqlMutationGeneralResponseV1 RestartSubscription { get; set; }
}

internal partial class TestThermostatMutationV1
{
    public bool? SetState { get; set; }
    public bool? SetName { get; set; }
}

internal partial class TestPairDeviceResultV1
{
    public ICollection<TestThermostatV1> Thermostats { get; set; }
    public ICollection<TestSensorV1> Sensors { get; set; }
    public TestGqlMutationErrorV1 Error { get; set; }
}

internal partial class TestGqlMutationErrorV1
{
    public int? StatusCode { get; set; }
    public string Message { get; set; }
}

internal partial class TestGqlMutationGeneralResponseV1
{
    public TestGqlMutationErrorV1 Error { get; set; }
}
#endregion