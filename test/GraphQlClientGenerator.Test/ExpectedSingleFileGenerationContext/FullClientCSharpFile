// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace GraphQlGenerator.Test
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static Type GetElementType(Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, Type targetType, Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(Type targetContainerType, Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string BuildArgumentValue(object value, string formatMask, GraphQlBuilderOptions options, int level)
        {
            if (value is null)
                return "null";
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null: return "null";
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        return BuildArgumentValue(jValue.Value, null, options, level);
                    case JTokenType.String:
                        return "\"" + ((string)jValue.Value).Replace("\"", "\\\"") + "\"";
                    default:
                        return "\"" + jValue.Value + "\"";
                }
            }
    
            if (value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                return $"{jProperty.Name}:{(options.Formatting == Formatting.Indented ? " " : null)}{BuildArgumentValue(jProperty.Value, null, options, level)}";
            }
    
            if (value is JObject jObject)
                return BuildEnumerableArgument(jObject, null, options, level + 1, '{', '}');
    #endif
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? "\"" + formattable.ToString(formatMask, CultureInfo.InvariantCulture) + "\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return "\"" + dateTime.ToString("O") + "\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return "\"" + dateTimeOffset.ToString("O") + "\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, options, level + 2);
    
            if (value is Guid)
                return "\"" + value + "\"";
    
            if (value is String @string)
                return "\"" + @string.Replace("\"", "\\\"") + "\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, options, level, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = Convert.ToString(value, CultureInfo.InvariantCulture);
            return "\"" + argumentValue + "\"";
        }
    
        private static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, GraphQlBuilderOptions options, int level, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (options.Formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, options.IndentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, options, level));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, GraphQlBuilderOptions options, int level)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? "$" + queryBuilderParameter.Name
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, options, level);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, options.IndentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, GraphQlBuilderOptions options, int level)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, options, level));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public class GraphQlBuilderOptions
    {
        public Formatting Formatting { get; set; }
        public byte IndentationSize { get; set; } = 2;
    }
    
    public abstract partial class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(new GraphQlBuilderOptions { Formatting = formatting, IndentationSize = indentationSize });
        }
    
        public string Build(GraphQlBuilderOptions options)
        {
            return Build(options, 1);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields);
        }
    
        protected virtual string Build(GraphQlBuilderOptions options, int level)
        {
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            if (!String.IsNullOrEmpty(_operationType))
            {
                builder.Append(_operationType);
    
                if (!String.IsNullOrEmpty(_operationName))
                {
                    builder.Append(" ");
                    builder.Append(_operationName);
                }
    
                if (_queryParameters?.Count > 0)
                {
                    builder.Append(indentationSpace);
                    builder.Append("(");
    
                    foreach (var queryParameterInfo in _queryParameters)
                    {
                        if (isIndentedFormatting)
                        {
                            builder.AppendLine(separator);
                            builder.Append(GraphQlQueryHelper.GetIndentation(level, options.IndentationSize));
                        }
                        else
                            builder.Append(separator);
    
                        builder.Append("$");
                        builder.Append(queryParameterInfo.ArgumentValue.Name);
                        builder.Append(":");
                        builder.Append(indentationSpace);
    
                        builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                        if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                        {
                            builder.Append(indentationSpace);
                            builder.Append("=");
                            builder.Append(indentationSpace);
                            builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, options, 0));
                        }
    
                        separator = ",";
                    }
    
                    builder.Append(")");
                }
            }
    
            if (builder.Length > 0 || level > 1)
                builder.Append(indentationSpace);
    
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
    
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(options, level);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, null);
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, List<Type> parentTypes)
        {
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    var builderType = GetType();
    
                    if (parentTypes != null && parentTypes.Any(t => t.IsAssignableFrom(field.QueryBuilderType)))
                        continue;
    
                    parentTypes?.Add(builderType);
    
                    var queryBuilder = InitializeChildBuilder(builderType, field.QueryBuilderType, parentTypes);
    
                    var includeFragmentMethods = field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod);
    
                    foreach (var includeFragmentMethod in includeFragmentMethods)
                        includeFragmentMethod.Invoke(queryBuilder, new object[] { InitializeChildBuilder(builderType, includeFragmentMethod.GetParameters()[0].ParameterType, parentTypes) });
    
                    IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildBuilder(Type parentQueryBuilderType, Type queryBuilderType, List<Type> parentTypes)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(queryBuilder.AllFields, parentTypes ?? new List<Type> { parentQueryBuilderType });
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Length == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
    
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(GraphQlBuilderOptions options, int level);
    
            protected string BuildArgumentClause(GraphQlBuilderOptions options, int level)
            {
                var separator = options.Formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, options, level) : "$" + a.ArgumentValue.Name)}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(GraphQlBuilderOptions options, int level) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, options, level)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : alias + ':' + separator;
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                GetIndentation(options.Formatting, level, options.IndentationSize) +
                BuildAliasPrefix(Alias, options.Formatting) +
                FieldName +
                BuildArgumentClause(options, level) +
                BuildDirectiveClause(options, level);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(options.Formatting, level, options.IndentationSize) + BuildAliasPrefix(Alias, options.Formatting) + FieldName +
                      BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(options.Formatting, level, options.IndentationSize) + "..." + (options.Formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1);
        }
    }
    
    public abstract partial class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string DynamicType = "DynamicType";
        public const string Float = "Float";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string String = "String";

        public const string Avatar = "Avatar";
        public const string PriceLevel = "PriceLevel";
        public const string Resolution = "Resolution";

        public const string AwayMode = "AwayMode";
        public const string AwayModeSettings = "AwayModeSettings";
        public const string Comparison = "Comparison";
        public const string ComparisonData = "ComparisonData";
        public const string Consumption = "Consumption";
        public const string ConsumptionMonth = "ConsumptionMonth";
        public const string Device = "Device";
        public const string Disaggregation = "Disaggregation";
        public const string Feed = "Feed";
        public const string FeedItem = "FeedItem";
        public const string Home = "Home";
        public const string Me = "Me";
        public const string PreLiveComparison = "PreLiveComparison";
        public const string PriceRating = "PriceRating";
        public const string PriceRatingEntry = "PriceRatingEntry";
        public const string ProcessStep = "ProcessStep";
        public const string PushNotification = "PushNotification";
        public const string Query = "Query";
        public const string SignupStatus = "SignupStatus";
        public const string Subscription = "Subscription";
        public const string Weather = "Weather";

        public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
            new Dictionary<Type, string>
            {
                { typeof(bool), "Boolean" },
                { typeof(DateTimeOffset), "String" },
                { typeof(int), "Int" },
                { typeof(string), "String" },
                { typeof(decimal), "Float" },
                { typeof(Guid), "ID" }
            };
}
    #endregion

    #region enums
    public enum Avatar
    {
        [EnumMember(Value = "floorhouse1")] Floorhouse1,
        [EnumMember(Value = "floorhouse2")] Floorhouse2,
        [EnumMember(Value = "floorhouse3")] Floorhouse3,
        [EnumMember(Value = "castle")] Castle,
        [EnumMember(Value = "apartment")] Apartment,
        [EnumMember(Value = "cottage")] Cottage,
        [EnumMember(Value = "rowhouse")] Rowhouse
    }

    public enum PriceLevel
    {
        [EnumMember(Value = "low")] Low,
        [EnumMember(Value = "normal")] Normal,
        [EnumMember(Value = "high")] High
    }

    public enum Resolution
    {
        [EnumMember(Value = "annual")] Annual,
        [EnumMember(Value = "monthly")] Monthly
    }
    #endregion

    #region directives
    /// <summary>
    /// Directs the executor to include this field or fragment only when the `if` argument is true.
    /// </summary>
    [Description(@"Directs the executor to include this field or fragment only when the `if` argument is true.")]
    public class IncludeDirective : GraphQlDirective
    {
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    /// <summary>
    /// Directs the executor to skip this field or fragment when the `if` argument is true.
    /// </summary>
    [Description(@"Directs the executor to skip this field or fragment when the `if` argument is true.")]
    public class SkipDirective : GraphQlDirective
    {
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(MeQueryBuilder) }
            };

        protected override string TypeName { get { return "Query"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public QueryQueryBuilder(string operationName = null) : base("query", operationName)
        {
        }

        public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            return WithParameterInternal(parameter);
        }

        public QueryQueryBuilder WithMe(MeQueryBuilder meQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("me", alias, meQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public QueryQueryBuilder ExceptMe()
        {
            return ExceptField("me");
        }
    }

    public partial class MeQueryBuilder : GraphQlQueryBuilder<MeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "firstName" },
                new GraphQlFieldMetadata { Name = "lastName" },
                new GraphQlFieldMetadata { Name = "fullName" },
                new GraphQlFieldMetadata { Name = "ssn" },
                new GraphQlFieldMetadata { Name = "email" },
                new GraphQlFieldMetadata { Name = "language" },
                new GraphQlFieldMetadata { Name = "tone" },
                new GraphQlFieldMetadata { Name = "avatars", IsComplex = true },
                new GraphQlFieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "homes", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
                new GraphQlFieldMetadata { Name = "feed", IsComplex = true, QueryBuilderType = typeof(FeedQueryBuilder) },
                new GraphQlFieldMetadata { Name = "energyStatements", IsComplex = true }
            };

        protected override string TypeName { get { return "Me"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public MeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public MeQueryBuilder WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptFirstName()
        {
            return ExceptField("firstName");
        }

        public MeQueryBuilder WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptLastName()
        {
            return ExceptField("lastName");
        }

        public MeQueryBuilder WithFullName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fullName", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptFullName()
        {
            return ExceptField("fullName");
        }

        public MeQueryBuilder WithSsn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("ssn", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptSsn()
        {
            return ExceptField("ssn");
        }

        public MeQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptEmail()
        {
            return ExceptField("email");
        }

        public MeQueryBuilder WithLanguage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("language", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptLanguage()
        {
            return ExceptField("language");
        }

        public MeQueryBuilder WithTone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("tone", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptTone()
        {
            return ExceptField("tone");
        }

        public MeQueryBuilder WithAvatars(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avatars", alias, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptAvatars()
        {
            return ExceptField("avatars");
        }

        public MeQueryBuilder WithHome(HomeQueryBuilder homeQueryBuilder, QueryBuilderParameter<string> @object = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (@object != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "object", ArgumentValue = @object} );

            return WithObjectField("home", alias, homeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public MeQueryBuilder ExceptHome()
        {
            return ExceptField("home");
        }

        public MeQueryBuilder WithHomes(HomeQueryBuilder homeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("homes", alias, homeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptHomes()
        {
            return ExceptField("homes");
        }

        public MeQueryBuilder WithFeed(FeedQueryBuilder feedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("feed", alias, feedQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public MeQueryBuilder ExceptFeed()
        {
            return ExceptField("feed");
        }

        public MeQueryBuilder WithEnergyStatements(QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (from != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

            if (to != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

            return WithScalarField("energyStatements", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public MeQueryBuilder ExceptEnergyStatements()
        {
            return ExceptField("energyStatements");
        }
    }

    public partial class HomeQueryBuilder : GraphQlQueryBuilder<HomeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "avatar" },
                new GraphQlFieldMetadata { Name = "timeZone" },
                new GraphQlFieldMetadata { Name = "subscription", IsComplex = true, QueryBuilderType = typeof(SubscriptionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "consumptionMonths", IsComplex = true, QueryBuilderType = typeof(ConsumptionMonthQueryBuilder) },
                new GraphQlFieldMetadata { Name = "consumption", IsComplex = true, QueryBuilderType = typeof(ConsumptionQueryBuilder) },
                new GraphQlFieldMetadata { Name = "preLiveComparison", IsComplex = true, QueryBuilderType = typeof(PreLiveComparisonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "comparisons", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "comparison_current_month", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "profile", IsComplex = true },
                new GraphQlFieldMetadata { Name = "profileQuestions", IsComplex = true },
                new GraphQlFieldMetadata { Name = "thermostat", IsComplex = true },
                new GraphQlFieldMetadata { Name = "temperatures", IsComplex = true },
                new GraphQlFieldMetadata { Name = "signupStatus", IsComplex = true, QueryBuilderType = typeof(SignupStatusQueryBuilder) },
                new GraphQlFieldMetadata { Name = "disaggregation", IsComplex = true, QueryBuilderType = typeof(DisaggregationQueryBuilder) },
                new GraphQlFieldMetadata { Name = "devices", IsComplex = true, QueryBuilderType = typeof(DeviceQueryBuilder) },
                new GraphQlFieldMetadata { Name = "weather", IsComplex = true, QueryBuilderType = typeof(WeatherQueryBuilder) },
                new GraphQlFieldMetadata { Name = "awayMode", IsComplex = true, QueryBuilderType = typeof(AwayModeQueryBuilder) }
            };

        protected override string TypeName { get { return "Home"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public HomeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public HomeQueryBuilder WithAvatar(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("avatar", alias, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptAvatar()
        {
            return ExceptField("avatar");
        }

        public HomeQueryBuilder WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptTimeZone()
        {
            return ExceptField("timeZone");
        }

        public HomeQueryBuilder WithSubscription(SubscriptionQueryBuilder subscriptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("subscription", alias, subscriptionQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptSubscription()
        {
            return ExceptField("subscription");
        }

        public HomeQueryBuilder WithConsumptionMonths(ConsumptionMonthQueryBuilder consumptionMonthQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (from != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

            return WithObjectField("consumptionMonths", alias, consumptionMonthQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HomeQueryBuilder ExceptConsumptionMonths()
        {
            return ExceptField("consumptionMonths");
        }

        public HomeQueryBuilder WithConsumption(ConsumptionQueryBuilder consumptionQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (from != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

            if (to != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

            return WithObjectField("consumption", alias, consumptionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HomeQueryBuilder ExceptConsumption()
        {
            return ExceptField("consumption");
        }

        public HomeQueryBuilder WithPreLiveComparison(PreLiveComparisonQueryBuilder preLiveComparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("preLiveComparison", alias, preLiveComparisonQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptPreLiveComparison()
        {
            return ExceptField("preLiveComparison");
        }

        public HomeQueryBuilder WithComparisons(ComparisonQueryBuilder comparisonQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<Resolution?> resolution = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (from != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

            if (to != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

            if (resolution != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

            return WithObjectField("comparisons", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HomeQueryBuilder ExceptComparisons()
        {
            return ExceptField("comparisons");
        }

        public HomeQueryBuilder WithComparisonCurrentMonth(ComparisonQueryBuilder comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("comparison_current_month", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptComparisonCurrentMonth()
        {
            return ExceptField("comparison_current_month");
        }

        public HomeQueryBuilder WithProfile(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("profile", alias, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptProfile()
        {
            return ExceptField("profile");
        }

        public HomeQueryBuilder WithProfileQuestions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("profileQuestions", alias, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptProfileQuestions()
        {
            return ExceptField("profileQuestions");
        }

        public HomeQueryBuilder WithThermostat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("thermostat", alias, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptThermostat()
        {
            return ExceptField("thermostat");
        }

        public HomeQueryBuilder WithTemperatures(QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<string> resolution = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (from != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

            if (to != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

            if (resolution != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

            return WithScalarField("temperatures", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public HomeQueryBuilder ExceptTemperatures()
        {
            return ExceptField("temperatures");
        }

        public HomeQueryBuilder WithSignupStatus(SignupStatusQueryBuilder signupStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("signupStatus", alias, signupStatusQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptSignupStatus()
        {
            return ExceptField("signupStatus");
        }

        public HomeQueryBuilder WithDisaggregation(DisaggregationQueryBuilder disaggregationQueryBuilder, QueryBuilderParameter<Resolution?> resolution = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (resolution != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

            return WithObjectField("disaggregation", alias, disaggregationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public HomeQueryBuilder ExceptDisaggregation()
        {
            return ExceptField("disaggregation");
        }

        public HomeQueryBuilder WithDevices(DeviceQueryBuilder deviceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("devices", alias, deviceQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptDevices()
        {
            return ExceptField("devices");
        }

        public HomeQueryBuilder WithWeather(WeatherQueryBuilder weatherQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("weather", alias, weatherQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptWeather()
        {
            return ExceptField("weather");
        }

        public HomeQueryBuilder WithAwayMode(AwayModeQueryBuilder awayModeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("awayMode", alias, awayModeQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public HomeQueryBuilder ExceptAwayMode()
        {
            return ExceptField("awayMode");
        }
    }

    public partial class SubscriptionQueryBuilder : GraphQlQueryBuilder<SubscriptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "validFrom" },
                new GraphQlFieldMetadata { Name = "validTo" },
                new GraphQlFieldMetadata { Name = "status" },
                new GraphQlFieldMetadata { Name = "billingRegionId" },
                new GraphQlFieldMetadata { Name = "energyStatements", IsComplex = true },
                new GraphQlFieldMetadata { Name = "priceRating", IsComplex = true, QueryBuilderType = typeof(PriceRatingQueryBuilder) }
            };

        protected override string TypeName { get { return "Subscription"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SubscriptionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public SubscriptionQueryBuilder WithValidFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("validFrom", alias, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptValidFrom()
        {
            return ExceptField("validFrom");
        }

        public SubscriptionQueryBuilder WithValidTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("validTo", alias, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptValidTo()
        {
            return ExceptField("validTo");
        }

        public SubscriptionQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptStatus()
        {
            return ExceptField("status");
        }

        public SubscriptionQueryBuilder WithBillingRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("billingRegionId", alias, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptBillingRegionId()
        {
            return ExceptField("billingRegionId");
        }

        public SubscriptionQueryBuilder WithEnergyStatements(QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (from != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

            if (to != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

            return WithScalarField("energyStatements", alias, new GraphQlDirective[] { include, skip }, args);
        }

        public SubscriptionQueryBuilder ExceptEnergyStatements()
        {
            return ExceptField("energyStatements");
        }

        public SubscriptionQueryBuilder WithPriceRating(PriceRatingQueryBuilder priceRatingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("priceRating", alias, priceRatingQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SubscriptionQueryBuilder ExceptPriceRating()
        {
            return ExceptField("priceRating");
        }
    }

    public partial class PriceRatingQueryBuilder : GraphQlQueryBuilder<PriceRatingQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "minPrice" },
                new GraphQlFieldMetadata { Name = "maxPrice" },
                new GraphQlFieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(PriceRatingEntryQueryBuilder) }
            };

        protected override string TypeName { get { return "PriceRating"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PriceRatingQueryBuilder WithMinPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("minPrice", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceRatingQueryBuilder ExceptMinPrice()
        {
            return ExceptField("minPrice");
        }

        public PriceRatingQueryBuilder WithMaxPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("maxPrice", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceRatingQueryBuilder ExceptMaxPrice()
        {
            return ExceptField("maxPrice");
        }

        public PriceRatingQueryBuilder WithEntries(PriceRatingEntryQueryBuilder priceRatingEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("entries", alias, priceRatingEntryQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PriceRatingQueryBuilder ExceptEntries()
        {
            return ExceptField("entries");
        }
    }

    public partial class PriceRatingEntryQueryBuilder : GraphQlQueryBuilder<PriceRatingEntryQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "time" },
                new GraphQlFieldMetadata { Name = "price" },
                new GraphQlFieldMetadata { Name = "level" },
                new GraphQlFieldMetadata { Name = "difference" }
            };

        protected override string TypeName { get { return "PriceRatingEntry"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PriceRatingEntryQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceRatingEntryQueryBuilder ExceptTime()
        {
            return ExceptField("time");
        }

        public PriceRatingEntryQueryBuilder WithPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("price", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceRatingEntryQueryBuilder ExceptPrice()
        {
            return ExceptField("price");
        }

        public PriceRatingEntryQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceRatingEntryQueryBuilder ExceptLevel()
        {
            return ExceptField("level");
        }

        public PriceRatingEntryQueryBuilder WithDifference(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("difference", alias, new GraphQlDirective[] { include, skip });
        }

        public PriceRatingEntryQueryBuilder ExceptDifference()
        {
            return ExceptField("difference");
        }
    }

    public partial class ConsumptionMonthQueryBuilder : GraphQlQueryBuilder<ConsumptionMonthQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "year" },
                new GraphQlFieldMetadata { Name = "month" },
                new GraphQlFieldMetadata { Name = "kwh" },
                new GraphQlFieldMetadata { Name = "cost" },
                new GraphQlFieldMetadata { Name = "isComplete" },
                new GraphQlFieldMetadata { Name = "kwhEstimate" },
                new GraphQlFieldMetadata { Name = "costEstimate" }
            };

        protected override string TypeName { get { return "ConsumptionMonth"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ConsumptionMonthQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionMonthQueryBuilder ExceptYear()
        {
            return ExceptField("year");
        }

        public ConsumptionMonthQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionMonthQueryBuilder ExceptMonth()
        {
            return ExceptField("month");
        }

        public ConsumptionMonthQueryBuilder WithKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kwh", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionMonthQueryBuilder ExceptKwh()
        {
            return ExceptField("kwh");
        }

        public ConsumptionMonthQueryBuilder WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionMonthQueryBuilder ExceptCost()
        {
            return ExceptField("cost");
        }

        public ConsumptionMonthQueryBuilder WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionMonthQueryBuilder ExceptIsComplete()
        {
            return ExceptField("isComplete");
        }

        public ConsumptionMonthQueryBuilder WithKwhEstimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("kwhEstimate", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionMonthQueryBuilder ExceptKwhEstimate()
        {
            return ExceptField("kwhEstimate");
        }

        public ConsumptionMonthQueryBuilder WithCostEstimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("costEstimate", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionMonthQueryBuilder ExceptCostEstimate()
        {
            return ExceptField("costEstimate");
        }
    }

    public partial class ConsumptionQueryBuilder : GraphQlQueryBuilder<ConsumptionQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "annualValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "monthlyValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "weeklyValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "dailyValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "hourlyValues", IsComplex = true },
                new GraphQlFieldMetadata { Name = "totalConsumption" },
                new GraphQlFieldMetadata { Name = "energyCost" },
                new GraphQlFieldMetadata { Name = "totalCost" },
                new GraphQlFieldMetadata { Name = "currency" },
                new GraphQlFieldMetadata { Name = "latestTransactionTimestamp" },
                new GraphQlFieldMetadata { Name = "timeZone" }
            };

        protected override string TypeName { get { return "Consumption"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ConsumptionQueryBuilder WithAnnualValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("annualValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptAnnualValues()
        {
            return ExceptField("annualValues");
        }

        public ConsumptionQueryBuilder WithMonthlyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("monthlyValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptMonthlyValues()
        {
            return ExceptField("monthlyValues");
        }

        public ConsumptionQueryBuilder WithWeeklyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("weeklyValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptWeeklyValues()
        {
            return ExceptField("weeklyValues");
        }

        public ConsumptionQueryBuilder WithDailyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("dailyValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptDailyValues()
        {
            return ExceptField("dailyValues");
        }

        public ConsumptionQueryBuilder WithHourlyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("hourlyValues", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptHourlyValues()
        {
            return ExceptField("hourlyValues");
        }

        public ConsumptionQueryBuilder WithTotalConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalConsumption", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptTotalConsumption()
        {
            return ExceptField("totalConsumption");
        }

        public ConsumptionQueryBuilder WithEnergyCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("energyCost", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptEnergyCost()
        {
            return ExceptField("energyCost");
        }

        public ConsumptionQueryBuilder WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptTotalCost()
        {
            return ExceptField("totalCost");
        }

        public ConsumptionQueryBuilder WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptCurrency()
        {
            return ExceptField("currency");
        }

        public ConsumptionQueryBuilder WithLatestTransactionTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("latestTransactionTimestamp", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptLatestTransactionTimestamp()
        {
            return ExceptField("latestTransactionTimestamp");
        }

        public ConsumptionQueryBuilder WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });
        }

        public ConsumptionQueryBuilder ExceptTimeZone()
        {
            return ExceptField("timeZone");
        }
    }

    public partial class PreLiveComparisonQueryBuilder : GraphQlQueryBuilder<PreLiveComparisonQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "homeId" },
                new GraphQlFieldMetadata { Name = "basedOnActuals" },
                new GraphQlFieldMetadata { Name = "previousYear", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
                new GraphQlFieldMetadata { Name = "previousYearMonths", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) }
            };

        protected override string TypeName { get { return "PreLiveComparison"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PreLiveComparisonQueryBuilder WithHomeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("homeId", alias, new GraphQlDirective[] { include, skip });
        }

        public PreLiveComparisonQueryBuilder ExceptHomeId()
        {
            return ExceptField("homeId");
        }

        public PreLiveComparisonQueryBuilder WithBasedOnActuals(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("basedOnActuals", alias, new GraphQlDirective[] { include, skip });
        }

        public PreLiveComparisonQueryBuilder ExceptBasedOnActuals()
        {
            return ExceptField("basedOnActuals");
        }

        public PreLiveComparisonQueryBuilder WithPreviousYear(ComparisonQueryBuilder comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previousYear", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PreLiveComparisonQueryBuilder ExceptPreviousYear()
        {
            return ExceptField("previousYear");
        }

        public PreLiveComparisonQueryBuilder WithPreviousYearMonths(ComparisonQueryBuilder comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("previousYearMonths", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public PreLiveComparisonQueryBuilder ExceptPreviousYearMonths()
        {
            return ExceptField("previousYearMonths");
        }
    }

    public partial class ComparisonQueryBuilder : GraphQlQueryBuilder<ComparisonQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "year" },
                new GraphQlFieldMetadata { Name = "month" },
                new GraphQlFieldMetadata { Name = "resolution" },
                new GraphQlFieldMetadata { Name = "homeEfficency" },
                new GraphQlFieldMetadata { Name = "homeEfficencyDescription" },
                new GraphQlFieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) },
                new GraphQlFieldMetadata { Name = "average", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) },
                new GraphQlFieldMetadata { Name = "efficient", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) }
            };

        protected override string TypeName { get { return "Comparison"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComparisonQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
        }

        public ComparisonQueryBuilder ExceptYear()
        {
            return ExceptField("year");
        }

        public ComparisonQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
        }

        public ComparisonQueryBuilder ExceptMonth()
        {
            return ExceptField("month");
        }

        public ComparisonQueryBuilder WithResolution(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("resolution", alias, new GraphQlDirective[] { include, skip });
        }

        public ComparisonQueryBuilder ExceptResolution()
        {
            return ExceptField("resolution");
        }

        public ComparisonQueryBuilder WithHomeEfficency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("homeEfficency", alias, new GraphQlDirective[] { include, skip });
        }

        public ComparisonQueryBuilder ExceptHomeEfficency()
        {
            return ExceptField("homeEfficency");
        }

        public ComparisonQueryBuilder WithHomeEfficencyDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("homeEfficencyDescription", alias, new GraphQlDirective[] { include, skip });
        }

        public ComparisonQueryBuilder ExceptHomeEfficencyDescription()
        {
            return ExceptField("homeEfficencyDescription");
        }

        public ComparisonQueryBuilder WithHome(ComparisonDataQueryBuilder comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("home", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComparisonQueryBuilder ExceptHome()
        {
            return ExceptField("home");
        }

        public ComparisonQueryBuilder WithAverage(ComparisonDataQueryBuilder comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("average", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComparisonQueryBuilder ExceptAverage()
        {
            return ExceptField("average");
        }

        public ComparisonQueryBuilder WithEfficient(ComparisonDataQueryBuilder comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("efficient", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public ComparisonQueryBuilder ExceptEfficient()
        {
            return ExceptField("efficient");
        }
    }

    public partial class ComparisonDataQueryBuilder : GraphQlQueryBuilder<ComparisonDataQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "cost" },
                new GraphQlFieldMetadata { Name = "consumption" }
            };

        protected override string TypeName { get { return "ComparisonData"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ComparisonDataQueryBuilder WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });
        }

        public ComparisonDataQueryBuilder ExceptCost()
        {
            return ExceptField("cost");
        }

        public ComparisonDataQueryBuilder WithConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("consumption", alias, new GraphQlDirective[] { include, skip });
        }

        public ComparisonDataQueryBuilder ExceptConsumption()
        {
            return ExceptField("consumption");
        }
    }

    public partial class SignupStatusQueryBuilder : GraphQlQueryBuilder<SignupStatusQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "feedStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) },
                new GraphQlFieldMetadata { Name = "avatarStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) },
                new GraphQlFieldMetadata { Name = "steps", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) }
            };

        protected override string TypeName { get { return "SignupStatus"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public SignupStatusQueryBuilder WithFeedStep(ProcessStepQueryBuilder processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("feedStep", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SignupStatusQueryBuilder ExceptFeedStep()
        {
            return ExceptField("feedStep");
        }

        public SignupStatusQueryBuilder WithAvatarStep(ProcessStepQueryBuilder processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("avatarStep", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SignupStatusQueryBuilder ExceptAvatarStep()
        {
            return ExceptField("avatarStep");
        }

        public SignupStatusQueryBuilder WithSteps(ProcessStepQueryBuilder processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("steps", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public SignupStatusQueryBuilder ExceptSteps()
        {
            return ExceptField("steps");
        }
    }

    public partial class ProcessStepQueryBuilder : GraphQlQueryBuilder<ProcessStepQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "timestamp" },
                new GraphQlFieldMetadata { Name = "isComplete" },
                new GraphQlFieldMetadata { Name = "title" },
                new GraphQlFieldMetadata { Name = "description" }
            };

        protected override string TypeName { get { return "ProcessStep"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public ProcessStepQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
        }

        public ProcessStepQueryBuilder ExceptTimestamp()
        {
            return ExceptField("timestamp");
        }

        public ProcessStepQueryBuilder WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });
        }

        public ProcessStepQueryBuilder ExceptIsComplete()
        {
            return ExceptField("isComplete");
        }

        public ProcessStepQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
        }

        public ProcessStepQueryBuilder ExceptTitle()
        {
            return ExceptField("title");
        }

        public ProcessStepQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
        }

        public ProcessStepQueryBuilder ExceptDescription()
        {
            return ExceptField("description");
        }
    }

    public partial class DisaggregationQueryBuilder : GraphQlQueryBuilder<DisaggregationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "year" },
                new GraphQlFieldMetadata { Name = "month" },
                new GraphQlFieldMetadata { Name = "fixedConsumptionKwh" },
                new GraphQlFieldMetadata { Name = "fixedConsumptionKwhPercent" },
                new GraphQlFieldMetadata { Name = "fixedConsumptionCost" },
                new GraphQlFieldMetadata { Name = "heatingConsumptionKwh" },
                new GraphQlFieldMetadata { Name = "heatingConsumptionKwhPercent" },
                new GraphQlFieldMetadata { Name = "heatingConsumptionCost" },
                new GraphQlFieldMetadata { Name = "behaviorConsumptionKwh" },
                new GraphQlFieldMetadata { Name = "behaviorConsumptionKwhPercent" },
                new GraphQlFieldMetadata { Name = "behaviorConsumptionCost" },
                new GraphQlFieldMetadata { Name = "currency" },
                new GraphQlFieldMetadata { Name = "isValid" }
            };

        protected override string TypeName { get { return "Disaggregation"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DisaggregationQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptYear()
        {
            return ExceptField("year");
        }

        public DisaggregationQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptMonth()
        {
            return ExceptField("month");
        }

        public DisaggregationQueryBuilder WithFixedConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fixedConsumptionKwh", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptFixedConsumptionKwh()
        {
            return ExceptField("fixedConsumptionKwh");
        }

        public DisaggregationQueryBuilder WithFixedConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fixedConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptFixedConsumptionKwhPercent()
        {
            return ExceptField("fixedConsumptionKwhPercent");
        }

        public DisaggregationQueryBuilder WithFixedConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("fixedConsumptionCost", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptFixedConsumptionCost()
        {
            return ExceptField("fixedConsumptionCost");
        }

        public DisaggregationQueryBuilder WithHeatingConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heatingConsumptionKwh", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptHeatingConsumptionKwh()
        {
            return ExceptField("heatingConsumptionKwh");
        }

        public DisaggregationQueryBuilder WithHeatingConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heatingConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptHeatingConsumptionKwhPercent()
        {
            return ExceptField("heatingConsumptionKwhPercent");
        }

        public DisaggregationQueryBuilder WithHeatingConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("heatingConsumptionCost", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptHeatingConsumptionCost()
        {
            return ExceptField("heatingConsumptionCost");
        }

        public DisaggregationQueryBuilder WithBehaviorConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behaviorConsumptionKwh", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptBehaviorConsumptionKwh()
        {
            return ExceptField("behaviorConsumptionKwh");
        }

        public DisaggregationQueryBuilder WithBehaviorConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behaviorConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptBehaviorConsumptionKwhPercent()
        {
            return ExceptField("behaviorConsumptionKwhPercent");
        }

        public DisaggregationQueryBuilder WithBehaviorConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("behaviorConsumptionCost", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptBehaviorConsumptionCost()
        {
            return ExceptField("behaviorConsumptionCost");
        }

        public DisaggregationQueryBuilder WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptCurrency()
        {
            return ExceptField("currency");
        }

        public DisaggregationQueryBuilder WithIsValid(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isValid", alias, new GraphQlDirective[] { include, skip });
        }

        public DisaggregationQueryBuilder ExceptIsValid()
        {
            return ExceptField("isValid");
        }
    }

    public partial class DeviceQueryBuilder : GraphQlQueryBuilder<DeviceQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "deviceId" },
                new GraphQlFieldMetadata { Name = "type" },
                new GraphQlFieldMetadata { Name = "isControllable" },
                new GraphQlFieldMetadata { Name = "externalId" },
                new GraphQlFieldMetadata { Name = "name" },
                new GraphQlFieldMetadata { Name = "isBatteryLow" },
                new GraphQlFieldMetadata { Name = "isSignalLow" },
                new GraphQlFieldMetadata { Name = "isAlive" },
                new GraphQlFieldMetadata { Name = "capabilities", IsComplex = true },
                new GraphQlFieldMetadata { Name = "properties", IsComplex = true }
            };

        protected override string TypeName { get { return "Device"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public DeviceQueryBuilder WithDeviceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("deviceId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptDeviceId()
        {
            return ExceptField("deviceId");
        }

        public DeviceQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }

        public DeviceQueryBuilder WithIsControllable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isControllable", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptIsControllable()
        {
            return ExceptField("isControllable");
        }

        public DeviceQueryBuilder WithExternalId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("externalId", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptExternalId()
        {
            return ExceptField("externalId");
        }

        public DeviceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptName()
        {
            return ExceptField("name");
        }

        public DeviceQueryBuilder WithIsBatteryLow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isBatteryLow", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptIsBatteryLow()
        {
            return ExceptField("isBatteryLow");
        }

        public DeviceQueryBuilder WithIsSignalLow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSignalLow", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptIsSignalLow()
        {
            return ExceptField("isSignalLow");
        }

        public DeviceQueryBuilder WithIsAlive(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isAlive", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptIsAlive()
        {
            return ExceptField("isAlive");
        }

        public DeviceQueryBuilder WithCapabilities(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("capabilities", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptCapabilities()
        {
            return ExceptField("capabilities");
        }

        public DeviceQueryBuilder WithProperties(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("properties", alias, new GraphQlDirective[] { include, skip });
        }

        public DeviceQueryBuilder ExceptProperties()
        {
            return ExceptField("properties");
        }
    }

    public partial class WeatherQueryBuilder : GraphQlQueryBuilder<WeatherQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "temperature" },
                new GraphQlFieldMetadata { Name = "timestamp" },
                new GraphQlFieldMetadata { Name = "summary" },
                new GraphQlFieldMetadata { Name = "type" }
            };

        protected override string TypeName { get { return "Weather"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public WeatherQueryBuilder WithTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("temperature", alias, new GraphQlDirective[] { include, skip });
        }

        public WeatherQueryBuilder ExceptTemperature()
        {
            return ExceptField("temperature");
        }

        public WeatherQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
        }

        public WeatherQueryBuilder ExceptTimestamp()
        {
            return ExceptField("timestamp");
        }

        public WeatherQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
        }

        public WeatherQueryBuilder ExceptSummary()
        {
            return ExceptField("summary");
        }

        public WeatherQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
        }

        public WeatherQueryBuilder ExceptType()
        {
            return ExceptField("type");
        }
    }

    public partial class AwayModeQueryBuilder : GraphQlQueryBuilder<AwayModeQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "isSupported" },
                new GraphQlFieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(AwayModeSettingsQueryBuilder) }
            };

        protected override string TypeName { get { return "AwayMode"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AwayModeQueryBuilder WithIsSupported(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("isSupported", alias, new GraphQlDirective[] { include, skip });
        }

        public AwayModeQueryBuilder ExceptIsSupported()
        {
            return ExceptField("isSupported");
        }

        public AwayModeQueryBuilder WithSettings(AwayModeSettingsQueryBuilder awayModeSettingsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("settings", alias, awayModeSettingsQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public AwayModeQueryBuilder ExceptSettings()
        {
            return ExceptField("settings");
        }
    }

    public partial class AwayModeSettingsQueryBuilder : GraphQlQueryBuilder<AwayModeSettingsQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "from" },
                new GraphQlFieldMetadata { Name = "to" }
            };

        protected override string TypeName { get { return "AwayModeSettings"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public AwayModeSettingsQueryBuilder WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("from", alias, new GraphQlDirective[] { include, skip });
        }

        public AwayModeSettingsQueryBuilder ExceptFrom()
        {
            return ExceptField("from");
        }

        public AwayModeSettingsQueryBuilder WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("to", alias, new GraphQlDirective[] { include, skip });
        }

        public AwayModeSettingsQueryBuilder ExceptTo()
        {
            return ExceptField("to");
        }
    }

    public partial class FeedQueryBuilder : GraphQlQueryBuilder<FeedQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "numberOfItems" },
                new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(FeedItemQueryBuilder) },
                new GraphQlFieldMetadata { Name = "pushNotifications", IsComplex = true, QueryBuilderType = typeof(PushNotificationQueryBuilder) }
            };

        protected override string TypeName { get { return "Feed"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FeedQueryBuilder WithNumberOfItems(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("numberOfItems", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedQueryBuilder ExceptNumberOfItems()
        {
            return ExceptField("numberOfItems");
        }

        public FeedQueryBuilder WithItems(FeedItemQueryBuilder feedItemQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> pageSize = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            if (page != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

            if (pageSize != null)
                args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pageSize", ArgumentValue = pageSize} );

            return WithObjectField("items", alias, feedItemQueryBuilder, new GraphQlDirective[] { include, skip }, args);
        }

        public FeedQueryBuilder ExceptItems()
        {
            return ExceptField("items");
        }

        public FeedQueryBuilder WithPushNotifications(PushNotificationQueryBuilder pushNotificationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithObjectField("pushNotifications", alias, pushNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
        }

        public FeedQueryBuilder ExceptPushNotifications()
        {
            return ExceptField("pushNotifications");
        }
    }

    public partial class FeedItemQueryBuilder : GraphQlQueryBuilder<FeedItemQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "messageTypeId" },
                new GraphQlFieldMetadata { Name = "link" },
                new GraphQlFieldMetadata { Name = "text" },
                new GraphQlFieldMetadata { Name = "createdAt" },
                new GraphQlFieldMetadata { Name = "modifiedAt" }
            };

        protected override string TypeName { get { return "FeedItem"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public FeedItemQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedItemQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public FeedItemQueryBuilder WithMessageTypeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("messageTypeId", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedItemQueryBuilder ExceptMessageTypeId()
        {
            return ExceptField("messageTypeId");
        }

        public FeedItemQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("link", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedItemQueryBuilder ExceptLink()
        {
            return ExceptField("link");
        }

        public FeedItemQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedItemQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }

        public FeedItemQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedItemQueryBuilder ExceptCreatedAt()
        {
            return ExceptField("createdAt");
        }

        public FeedItemQueryBuilder WithModifiedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("modifiedAt", alias, new GraphQlDirective[] { include, skip });
        }

        public FeedItemQueryBuilder ExceptModifiedAt()
        {
            return ExceptField("modifiedAt");
        }
    }

    public partial class PushNotificationQueryBuilder : GraphQlQueryBuilder<PushNotificationQueryBuilder>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
            new []
            {
                new GraphQlFieldMetadata { Name = "id" },
                new GraphQlFieldMetadata { Name = "link" },
                new GraphQlFieldMetadata { Name = "text" }
            };

        protected override string TypeName { get { return "PushNotification"; } } 

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

        public PushNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
        }

        public PushNotificationQueryBuilder ExceptId()
        {
            return ExceptField("id");
        }

        public PushNotificationQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("link", alias, new GraphQlDirective[] { include, skip });
        }

        public PushNotificationQueryBuilder ExceptLink()
        {
            return ExceptField("link");
        }

        public PushNotificationQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
        {
            return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
        }

        public PushNotificationQueryBuilder ExceptText()
        {
            return ExceptField("text");
        }
    }
    #endregion

    #region data classes
    public partial class Query
    {
        public Me Me { get; set; }
    }

    public partial class Me
    {
        public Guid? Id { get; set; }
        public string FirstName { get; set; }
        public string LastName { get; set; }
        public string FullName { get; set; }
        public string Ssn { get; set; }
        public string Email { get; set; }
        public string Language { get; set; }
        public string Tone { get; set; }
        public ICollection<Avatar> Avatars { get; set; }
        public Home Home { get; set; }
        public ICollection<Home> Homes { get; set; }
        public Feed Feed { get; set; }
        public ICollection<object> EnergyStatements { get; set; }
    }

    public partial class Home
    {
        public Guid? Id { get; set; }
        public Avatar? Avatar { get; set; }
        public string TimeZone { get; set; }
        public Subscription Subscription { get; set; }
        public ICollection<ConsumptionMonth> ConsumptionMonths { get; set; }
        public Consumption Consumption { get; set; }
        public PreLiveComparison PreLiveComparison { get; set; }
        public ICollection<Comparison> Comparisons { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("comparison_current_month")]
        #endif
        public Comparison ComparisonCurrentMonth { get; set; }
        public object Profile { get; set; }
        public object ProfileQuestions { get; set; }
        public object Thermostat { get; set; }
        public ICollection<object> Temperatures { get; set; }
        public SignupStatus SignupStatus { get; set; }
        public ICollection<Disaggregation> Disaggregation { get; set; }
        public ICollection<Device> Devices { get; set; }
        public Weather Weather { get; set; }
        public AwayMode AwayMode { get; set; }
    }

    public partial class Subscription
    {
        public Guid? Id { get; set; }
        public DateTimeOffset? ValidFrom { get; set; }
        public DateTimeOffset? ValidTo { get; set; }
        public string Status { get; set; }
        public int? BillingRegionId { get; set; }
        public ICollection<object> EnergyStatements { get; set; }
        public PriceRating PriceRating { get; set; }
    }

    public partial class PriceRating
    {
        public decimal? MinPrice { get; set; }
        public decimal? MaxPrice { get; set; }
        public ICollection<PriceRatingEntry> Entries { get; set; }
    }

    public partial class PriceRatingEntry
    {
        public string Time { get; set; }
        public decimal? Price { get; set; }
        public PriceLevel? Level { get; set; }
        public decimal? Difference { get; set; }
    }

    public partial class ConsumptionMonth
    {
        public int? Year { get; set; }
        public int? Month { get; set; }
        public decimal? Kwh { get; set; }
        public decimal? Cost { get; set; }
        public bool? IsComplete { get; set; }
        public decimal? KwhEstimate { get; set; }
        public decimal? CostEstimate { get; set; }
    }

    public partial class Consumption
    {
        public object AnnualValues { get; set; }
        public object MonthlyValues { get; set; }
        public object WeeklyValues { get; set; }
        public object DailyValues { get; set; }
        public object HourlyValues { get; set; }
        public decimal? TotalConsumption { get; set; }
        public decimal? EnergyCost { get; set; }
        public decimal? TotalCost { get; set; }
        public string Currency { get; set; }
        public DateTimeOffset? LatestTransactionTimestamp { get; set; }
        public string TimeZone { get; set; }
    }

    public partial class PreLiveComparison
    {
        public string HomeId { get; set; }
        public bool? BasedOnActuals { get; set; }
        public Comparison PreviousYear { get; set; }
        public ICollection<Comparison> PreviousYearMonths { get; set; }
    }

    public partial class Comparison
    {
        public int? Year { get; set; }
        public int? Month { get; set; }
        public string Resolution { get; set; }
        public string HomeEfficency { get; set; }
        public string HomeEfficencyDescription { get; set; }
        public ComparisonData Home { get; set; }
        public ComparisonData Average { get; set; }
        public ComparisonData Efficient { get; set; }
    }

    public partial class ComparisonData
    {
        public decimal? Cost { get; set; }
        public decimal? Consumption { get; set; }
    }

    public partial class SignupStatus
    {
        public ProcessStep FeedStep { get; set; }
        public ProcessStep AvatarStep { get; set; }
        public ICollection<ProcessStep> Steps { get; set; }
    }

    public partial class ProcessStep
    {
        public DateTimeOffset? Timestamp { get; set; }
        public bool? IsComplete { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
    }

    public partial class Disaggregation
    {
        public int? Year { get; set; }
        public int? Month { get; set; }
        public decimal? FixedConsumptionKwh { get; set; }
        public int? FixedConsumptionKwhPercent { get; set; }
        public decimal? FixedConsumptionCost { get; set; }
        public decimal? HeatingConsumptionKwh { get; set; }
        public int? HeatingConsumptionKwhPercent { get; set; }
        public decimal? HeatingConsumptionCost { get; set; }
        public decimal? BehaviorConsumptionKwh { get; set; }
        public int? BehaviorConsumptionKwhPercent { get; set; }
        public decimal? BehaviorConsumptionCost { get; set; }
        public string Currency { get; set; }
        public bool? IsValid { get; set; }
    }

    public partial class Device
    {
        public string DeviceId { get; set; }
        public string Type { get; set; }
        public bool? IsControllable { get; set; }
        public string ExternalId { get; set; }
        public string Name { get; set; }
        public bool? IsBatteryLow { get; set; }
        public bool? IsSignalLow { get; set; }
        public bool? IsAlive { get; set; }
        public ICollection<string> Capabilities { get; set; }
        public object Properties { get; set; }
    }

    public partial class Weather
    {
        public decimal? Temperature { get; set; }
        public DateTimeOffset? Timestamp { get; set; }
        public string Summary { get; set; }
        public string Type { get; set; }
    }

    public partial class AwayMode
    {
        public bool? IsSupported { get; set; }
        public AwayModeSettings Settings { get; set; }
    }

    public partial class AwayModeSettings
    {
        public DateTimeOffset? From { get; set; }
        public DateTimeOffset? To { get; set; }
    }

    public partial class Feed
    {
        public int? NumberOfItems { get; set; }
        public ICollection<FeedItem> Items { get; set; }
        public ICollection<PushNotification> PushNotifications { get; set; }
    }

    public partial class FeedItem
    {
        public int? Id { get; set; }
        public string MessageTypeId { get; set; }
        public string Link { get; set; }
        public string Text { get; set; }
        public DateTimeOffset? CreatedAt { get; set; }
        public DateTimeOffset? ModifiedAt { get; set; }
    }

    public partial class PushNotification
    {
        public int? Id { get; set; }
        public string Link { get; set; }
        public string Text { get; set; }
    }
    #endregion
}
