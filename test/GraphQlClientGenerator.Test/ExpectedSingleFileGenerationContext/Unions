#region GraphQL type helpers
public static class GraphQlTypes
{
    public const string Boolean = "Boolean";
    public const string DateTimeOffset = "DateTimeOffset";
    public const string Dynamic = "Dynamic";
    public const string Float = "Float";
    public const string Id = "ID";
    public const string String = "String";

    public const string UnderscoreNamedEnum = "underscore_named_enum";

    public const string Attribute = "Attribute";
    public const string CollisionData = "CollisionData";
    public const string ConcreteType1 = "ConcreteType1";
    public const string ConcreteType2 = "ConcreteType2";
    public const string ConcreteType3 = "ConcreteType3";
    public const string Message = "Message";
    public const string Mutation = "Mutation";
    public const string Query = "Query";
    public const string SimpleObjectType = "SimpleObjectType";
    public const string UnderscoreNamedClass = "underscore_named_class";

    public const string Collision = "Collision";
    public const string InputType = "InputType";
    public const string UnderscoreNamedInput = "underscore_named_input";

    public const string UnionType = "UnionType";

    public const string NamedType = "NamedType";

    public static readonly IReadOnlyDictionary<Type, string> ReverseMapping =
        new Dictionary<Type, string>
        {
            { typeof(UnderscoreNamedEnum), "underscore_named_enum" },
            { typeof(string), "String" },
            { typeof(Guid), "ID" },
            { typeof(DateTimeOffset), "DateTimeOffset" },
            { typeof(Collision3), "Collision" },
            { typeof(InputType), "InputType" },
            { typeof(UnderscoreNamedInput), "underscore_named_input" }
        };
}
#endregion

#region enums
public enum UnderscoreNamedEnum
{
    an_enum_value_1,
    an_enum_value_2
}
#endregion

#nullable enable
#region directives
public class IncludeDirective : GraphQlDirective
{
    public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
    {
        AddArgument("if", @if);
    }
}

public class SkipDirective : GraphQlDirective
{
    public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
    {
        AddArgument("if", @if);
    }
}

public class CustomDirectiveDirective : GraphQlDirective
{
    public CustomDirectiveDirective(QueryBuilderParameter<bool?>? directiveParameter = null) : base("custom_directive")
    {
        AddArgument("directive_parameter", directiveParameter);
    }
}
#endregion

#region builder classes
public partial class SimpleObjectTypeQueryBuilder : GraphQlQueryBuilder<SimpleObjectTypeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "stringValueNullable" },
        new GraphQlFieldMetadata { Name = "stringValue" },
        new GraphQlFieldMetadata { Name = "stringArrayValue", IsComplex = true }
    };

    protected override string TypeName { get; } = "SimpleObjectType";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public SimpleObjectTypeQueryBuilder WithId(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("id", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public SimpleObjectTypeQueryBuilder ExceptId() => ExceptField("id");

    public SimpleObjectTypeQueryBuilder WithStringValueNullable(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("stringValueNullable", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public SimpleObjectTypeQueryBuilder ExceptStringValueNullable() => ExceptField("stringValueNullable");

    public SimpleObjectTypeQueryBuilder WithStringValue(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("stringValue", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public SimpleObjectTypeQueryBuilder ExceptStringValue() => ExceptField("stringValue");

    public SimpleObjectTypeQueryBuilder WithStringArrayValue(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("stringArrayValue", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public SimpleObjectTypeQueryBuilder ExceptStringArrayValue() => ExceptField("stringArrayValue");
}

public partial class UnionTypeQueryBuilder : GraphQlQueryBuilder<UnionTypeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata = new GraphQlFieldMetadata[0];

    public UnionTypeQueryBuilder() => WithTypeName();

    protected override string TypeName { get; } = "UnionType";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public UnionTypeQueryBuilder WithConcreteType1Fragment(ConcreteType1QueryBuilder concreteType1QueryBuilder, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithFragment(concreteType1QueryBuilder, new GraphQlDirective?[] { include, skip, customDirective });

    public UnionTypeQueryBuilder WithConcreteType2Fragment(ConcreteType2QueryBuilder concreteType2QueryBuilder, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithFragment(concreteType2QueryBuilder, new GraphQlDirective?[] { include, skip, customDirective });

    public UnionTypeQueryBuilder WithConcreteType3Fragment(ConcreteType3QueryBuilder concreteType3QueryBuilder, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithFragment(concreteType3QueryBuilder, new GraphQlDirective?[] { include, skip, customDirective });
}

public partial class NamedTypeQueryBuilder : GraphQlQueryBuilder<NamedTypeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "name" }
    };

    public NamedTypeQueryBuilder() => WithTypeName();

    protected override string TypeName { get; } = "NamedType";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public NamedTypeQueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public NamedTypeQueryBuilder ExceptName() => ExceptField("name");

    public NamedTypeQueryBuilder WithConcreteType1Fragment(ConcreteType1QueryBuilder concreteType1QueryBuilder, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithFragment(concreteType1QueryBuilder, new GraphQlDirective?[] { include, skip, customDirective });

    public NamedTypeQueryBuilder WithConcreteType2Fragment(ConcreteType2QueryBuilder concreteType2QueryBuilder, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithFragment(concreteType2QueryBuilder, new GraphQlDirective?[] { include, skip, customDirective });

    public NamedTypeQueryBuilder WithConcreteType3Fragment(ConcreteType3QueryBuilder concreteType3QueryBuilder, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithFragment(concreteType3QueryBuilder, new GraphQlDirective?[] { include, skip, customDirective });
}

public partial class ConcreteType1QueryBuilder : GraphQlQueryBuilder<ConcreteType1QueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "name" },
        new GraphQlFieldMetadata { Name = "concreteType1Field" },
        new GraphQlFieldMetadata { Name = "Value" }
    };

    protected override string TypeName { get; } = "ConcreteType1";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ConcreteType1QueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType1QueryBuilder ExceptName() => ExceptField("name");

    public ConcreteType1QueryBuilder WithConcreteType1Field(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("concreteType1Field", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType1QueryBuilder ExceptConcreteType1Field() => ExceptField("concreteType1Field");

    public ConcreteType1QueryBuilder WithValue(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("Value", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType1QueryBuilder ExceptValue() => ExceptField("Value");
}

public partial class ConcreteType2QueryBuilder : GraphQlQueryBuilder<ConcreteType2QueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "name" },
        new GraphQlFieldMetadata { Name = "concreteType2Field" },
        new GraphQlFieldMetadata { Name = "value" }
    };

    protected override string TypeName { get; } = "ConcreteType2";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ConcreteType2QueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType2QueryBuilder ExceptName() => ExceptField("name");

    public ConcreteType2QueryBuilder WithConcreteType2Field(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("concreteType2Field", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType2QueryBuilder ExceptConcreteType2Field() => ExceptField("concreteType2Field");

    public ConcreteType2QueryBuilder WithValue(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("value", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType2QueryBuilder ExceptValue() => ExceptField("value");
}

public partial class ConcreteType3QueryBuilder : GraphQlQueryBuilder<ConcreteType3QueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "name" },
        new GraphQlFieldMetadata { Name = "concreteType3Field" },
        new GraphQlFieldMetadata { Name = "VALUE" },
        new GraphQlFieldMetadata { Name = "function", RequiresParameters = true }
    };

    protected override string TypeName { get; } = "ConcreteType3";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public ConcreteType3QueryBuilder WithName(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("name", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType3QueryBuilder ExceptName() => ExceptField("name");

    public ConcreteType3QueryBuilder WithConcreteType3Field(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("concreteType3Field", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType3QueryBuilder ExceptConcreteType3Field() => ExceptField("concreteType3Field");

    public ConcreteType3QueryBuilder WithValue(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("VALUE", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public ConcreteType3QueryBuilder ExceptValue() => ExceptField("VALUE");

    public ConcreteType3QueryBuilder WithFunction(QueryBuilderParameter<string> value, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "value", ArgumentValue = value} );
        return WithScalarField("function", alias, new GraphQlDirective?[] { include, skip, customDirective }, args);
    }

    public ConcreteType3QueryBuilder ExceptFunction() => ExceptField("function");
}

public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "scalarValue" },
        new GraphQlFieldMetadata { Name = "simpleObject", IsComplex = true, QueryBuilderType = typeof(SimpleObjectTypeQueryBuilder) },
        new GraphQlFieldMetadata { Name = "union", IsComplex = true, QueryBuilderType = typeof(UnionTypeQueryBuilder) },
        new GraphQlFieldMetadata { Name = "interface", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NamedTypeQueryBuilder) },
        new GraphQlFieldMetadata { Name = "interfaces", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(NamedTypeQueryBuilder) },
        new GraphQlFieldMetadata { Name = "underscore_named_field", DefaultAlias = "underscoreNamedField", IsComplex = true, QueryBuilderType = typeof(UnderscoreNamedClassQueryBuilder) },
        new GraphQlFieldMetadata { Name = "nestedLists", IsComplex = true },
        new GraphQlFieldMetadata { Name = "_" },
        new GraphQlFieldMetadata { Name = "COLLISIONS" },
        new GraphQlFieldMetadata { Name = "collisions" }
    };

    protected override string TypeName { get; } = "Query";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public QueryQueryBuilder(string? operationName = null) : base("query", operationName)
    {
    }

    public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

    public QueryQueryBuilder WithScalarValue(QueryBuilderParameter<DateTimeOffset?>? timestamp = null, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (timestamp != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "timestamp", ArgumentValue = timestamp, FormatMask = "yyyy-MM-dd\"T\"HH:mm"} );

        return WithScalarField("scalarValue", alias, new GraphQlDirective?[] { include, skip, customDirective }, args);
    }

    public QueryQueryBuilder ExceptScalarValue() => ExceptField("scalarValue");

    public QueryQueryBuilder WithSimpleObject(SimpleObjectTypeQueryBuilder simpleObjectTypeQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithObjectField("simpleObject", alias, simpleObjectTypeQueryBuilder, new GraphQlDirective?[] { include, skip, customDirective });

    public QueryQueryBuilder ExceptSimpleObject() => ExceptField("simpleObject");

    public QueryQueryBuilder WithUnion(UnionTypeQueryBuilder unionTypeQueryBuilder, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithObjectField("union", alias, unionTypeQueryBuilder, new GraphQlDirective?[] { include, skip, customDirective });

    public QueryQueryBuilder ExceptUnion() => ExceptField("union");

    public QueryQueryBuilder WithInterface(NamedTypeQueryBuilder namedTypeQueryBuilder, QueryBuilderParameter<Guid> parameter, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "parameter", ArgumentValue = parameter} );
        return WithObjectField("interface", alias, namedTypeQueryBuilder, new GraphQlDirective?[] { include, skip, customDirective }, args);
    }

    public QueryQueryBuilder ExceptInterface() => ExceptField("interface");

    public QueryQueryBuilder WithInterfaces(NamedTypeQueryBuilder namedTypeQueryBuilder, QueryBuilderParameter<Guid> parameter, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        args.Add(new QueryBuilderArgumentInfo { ArgumentName = "parameter", ArgumentValue = parameter} );
        return WithObjectField("interfaces", alias, namedTypeQueryBuilder, new GraphQlDirective?[] { include, skip, customDirective }, args);
    }

    public QueryQueryBuilder ExceptInterfaces() => ExceptField("interfaces");

    public QueryQueryBuilder WithUnderscoreNamedField(UnderscoreNamedClassQueryBuilder underscoreNamedClassQueryBuilder, QueryBuilderParameter<UnderscoreNamedInput?>? underscoreNamedParameter = null, string? alias = "underscoreNamedField", IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (underscoreNamedParameter != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "underscore_named_parameter", ArgumentValue = underscoreNamedParameter} );

        return WithObjectField("underscore_named_field", alias, underscoreNamedClassQueryBuilder, new GraphQlDirective?[] { include, skip, customDirective }, args);
    }

    public QueryQueryBuilder ExceptUnderscoreNamedField() => ExceptField("underscore_named_field");

    public QueryQueryBuilder WithNestedLists(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("nestedLists", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public QueryQueryBuilder ExceptNestedLists() => ExceptField("nestedLists");

    public QueryQueryBuilder With_(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("_", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public QueryQueryBuilder Except_() => ExceptField("_");

    public QueryQueryBuilder WithCOLLISIONS(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("COLLISIONS", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public QueryQueryBuilder ExceptCOLLISIONS() => ExceptField("COLLISIONS");

    public QueryQueryBuilder Withcollisions(QueryBuilderParameter<IEnumerable<string?>>? args = null, QueryBuilderParameter<IEnumerable<string?>>? inputArgs = null, QueryBuilderParameter<IEnumerable<string?>>? inputArgs1 = null, QueryBuilderParameter<bool?>? skip = null, QueryBuilderParameter<bool?>? skipDirective = null, QueryBuilderParameter<bool?>? skipDirectiveValue = null, QueryBuilderParameter<bool?>? include = null, QueryBuilderParameter<bool?>? includeDirective = null, QueryBuilderParameter<bool?>? includeDirectiveValue = null, string? alias = null, IncludeDirective? includeDirectiveValue1 = null, SkipDirective? skipDirectiveValue1 = null, CustomDirectiveDirective? customDirective = null)
    {
        var inputArgs2 = new List<QueryBuilderArgumentInfo>();
        if (args != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "args", ArgumentValue = args} );

        if (inputArgs != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "inputArgs", ArgumentValue = inputArgs} );

        if (inputArgs1 != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "inputArgs1", ArgumentValue = inputArgs1} );

        if (skip != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "skip", ArgumentValue = skip} );

        if (skipDirective != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "skipDirective", ArgumentValue = skipDirective} );

        if (skipDirectiveValue != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "skipDirectiveValue", ArgumentValue = skipDirectiveValue} );

        if (include != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "include", ArgumentValue = include} );

        if (includeDirective != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "includeDirective", ArgumentValue = includeDirective} );

        if (includeDirectiveValue != null)
            inputArgs2.Add(new QueryBuilderArgumentInfo { ArgumentName = "includeDirectiveValue", ArgumentValue = includeDirectiveValue} );

        return WithScalarField("collisions", alias, new GraphQlDirective?[] { includeDirectiveValue1, skipDirectiveValue1, customDirective }, inputArgs2);
    }

    public QueryQueryBuilder Exceptcollisions() => ExceptField("collisions");
}

public partial class UnderscoreNamedClassQueryBuilder : GraphQlQueryBuilder<UnderscoreNamedClassQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "underscore_named_field_enum", DefaultAlias = "underscoreNamedFieldEnum" },
        new GraphQlFieldMetadata { Name = "underscore_named_field_enum_collection", DefaultAlias = "underscoreNamedFieldEnumCollection", IsComplex = true }
    };

    protected override string TypeName { get; } = "underscore_named_class";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public UnderscoreNamedClassQueryBuilder WithUnderscoreNamedFieldEnum(string? alias = "underscoreNamedFieldEnum", IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("underscore_named_field_enum", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public UnderscoreNamedClassQueryBuilder ExceptUnderscoreNamedFieldEnum() => ExceptField("underscore_named_field_enum");

    public UnderscoreNamedClassQueryBuilder WithUnderscoreNamedFieldEnumCollection(string? alias = "underscoreNamedFieldEnumCollection", IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("underscore_named_field_enum_collection", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public UnderscoreNamedClassQueryBuilder ExceptUnderscoreNamedFieldEnumCollection() => ExceptField("underscore_named_field_enum_collection");
}

public partial class CollisionDataQueryBuilder : GraphQlQueryBuilder<CollisionDataQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "collisionData" }
    };

    protected override string TypeName { get; } = "CollisionData";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public CollisionDataQueryBuilder WithCollisionData(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("collisionData", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public CollisionDataQueryBuilder ExceptCollisionData() => ExceptField("collisionData");
}

public partial class MessageQueryBuilder : GraphQlQueryBuilder<MessageQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "id" },
        new GraphQlFieldMetadata { Name = "text_value", DefaultAlias = "textValue" }
    };

    protected override string TypeName { get; } = "Message";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public MessageQueryBuilder WithId(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("id", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public MessageQueryBuilder ExceptId() => ExceptField("id");

    public MessageQueryBuilder WithTextValue(string? alias = "textValue", IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("text_value", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public MessageQueryBuilder ExceptTextValue() => ExceptField("text_value");
}

public partial class MutationQueryBuilder : GraphQlQueryBuilder<MutationQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "createMessage", IsComplex = true, QueryBuilderType = typeof(MessageQueryBuilder) },
        new GraphQlFieldMetadata { Name = "passDynamic" },
        new GraphQlFieldMetadata { Name = "collide", IsComplex = true, QueryBuilderType = typeof(CollisionDataQueryBuilder) }
    };

    protected override string TypeName { get; } = "Mutation";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public MutationQueryBuilder(string? operationName = null) : base("mutation", operationName)
    {
    }

    public MutationQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

    public MutationQueryBuilder WithCreateMessage(MessageQueryBuilder messageQueryBuilder, QueryBuilderParameter<InputType?>? inputMessage = null, QueryBuilderParameter<InputType?>? inputMessage2 = null, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (inputMessage != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "input_message", ArgumentValue = inputMessage} );

        if (inputMessage2 != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "inputMessage", ArgumentValue = inputMessage2} );

        return WithObjectField("createMessage", alias, messageQueryBuilder, new GraphQlDirective?[] { include, skip, customDirective }, args);
    }

    public MutationQueryBuilder ExceptCreateMessage() => ExceptField("createMessage");

    public MutationQueryBuilder WithPassDynamic(QueryBuilderParameter<object?>? @object = null, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (@object != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "object", ArgumentValue = @object} );

        return WithScalarField("passDynamic", alias, new GraphQlDirective?[] { include, skip, customDirective }, args);
    }

    public MutationQueryBuilder ExceptPassDynamic() => ExceptField("passDynamic");

    public MutationQueryBuilder WithCollide(CollisionDataQueryBuilder collisionDataQueryBuilder, QueryBuilderParameter<Collision3?>? collision = null, string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (collision != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "collision", ArgumentValue = collision} );

        return WithObjectField("collide", alias, collisionDataQueryBuilder, new GraphQlDirective?[] { include, skip, customDirective }, args);
    }

    public MutationQueryBuilder ExceptCollide() => ExceptField("collide");
}

public partial class AttributeQueryBuilder : GraphQlQueryBuilder<AttributeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
    {
        new GraphQlFieldMetadata { Name = "Value" }
    };

    protected override string TypeName { get; } = "Attribute";

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get; } = AllFieldMetadata;

    public AttributeQueryBuilder WithValue(string? alias = null, IncludeDirective? include = null, SkipDirective? skip = null, CustomDirectiveDirective? customDirective = null) => WithScalarField("Value", alias, new GraphQlDirective?[] { include, skip, customDirective });

    public AttributeQueryBuilder ExceptValue() => ExceptField("Value");
}
#endregion

#region input classes
public partial class UnderscoreNamedInput : IGraphQlInputObject
{
    private InputPropertyInfo _underscoreNamedFieldEnum;
    private InputPropertyInfo _underscoreNamedFieldEnumCollection;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<UnderscoreNamedEnum?>))]
    #endif
    public QueryBuilderParameter<UnderscoreNamedEnum?>? UnderscoreNamedFieldEnum
    {
        get => (QueryBuilderParameter<UnderscoreNamedEnum?>?)_underscoreNamedFieldEnum.Value;
        set => _underscoreNamedFieldEnum = new InputPropertyInfo { Name = "underscore_named_field_enum", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<ICollection<UnderscoreNamedEnum>?>))]
    #endif
    public QueryBuilderParameter<ICollection<UnderscoreNamedEnum>?>? UnderscoreNamedFieldEnumCollection
    {
        get => (QueryBuilderParameter<ICollection<UnderscoreNamedEnum>?>?)_underscoreNamedFieldEnumCollection.Value;
        set => _underscoreNamedFieldEnumCollection = new InputPropertyInfo { Name = "underscore_named_field_enum_collection", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_underscoreNamedFieldEnum.Name != null) yield return _underscoreNamedFieldEnum;
        if (_underscoreNamedFieldEnumCollection.Name != null) yield return _underscoreNamedFieldEnumCollection;
    }
}

public partial class InputType : IGraphQlInputObject
{
    private InputPropertyInfo _textValue;
    private InputPropertyInfo _enumValue;
    private InputPropertyInfo _enumValue2;
    private InputPropertyInfo _textValue2;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
    #endif
    public QueryBuilderParameter<string?>? TextValue
    {
        get => (QueryBuilderParameter<string?>?)_textValue.Value;
        set => _textValue = new InputPropertyInfo { Name = "text_value", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<UnderscoreNamedEnum?>))]
    #endif
    public QueryBuilderParameter<UnderscoreNamedEnum?>? EnumValue
    {
        get => (QueryBuilderParameter<UnderscoreNamedEnum?>?)_enumValue.Value;
        set => _enumValue = new InputPropertyInfo { Name = "enum_value", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<UnderscoreNamedEnum?>))]
    #endif
    public QueryBuilderParameter<UnderscoreNamedEnum?>? EnumValue2
    {
        get => (QueryBuilderParameter<UnderscoreNamedEnum?>?)_enumValue2.Value;
        set => _enumValue2 = new InputPropertyInfo { Name = "enumValue", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
    #endif
    public QueryBuilderParameter<string?>? TextValue2
    {
        get => (QueryBuilderParameter<string?>?)_textValue2.Value;
        set => _textValue2 = new InputPropertyInfo { Name = "textValue", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_textValue.Name != null) yield return _textValue;
        if (_enumValue.Name != null) yield return _enumValue;
        if (_enumValue2.Name != null) yield return _enumValue2;
        if (_textValue2.Name != null) yield return _textValue2;
    }
}

public partial class Collision3 : IGraphQlInputObject
{
    private InputPropertyInfo _collision;
    private InputPropertyInfo _collision2;
    private InputPropertyInfo _collisionInput;
    private InputPropertyInfo _collisionInputObject;
    private InputPropertyInfo _collisionDataRecord;
    private InputPropertyInfo _collisionRecord;

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
    #endif
    public QueryBuilderParameter<string?>? Collision
    {
        get => (QueryBuilderParameter<string?>?)_collision.Value;
        set => _collision = new InputPropertyInfo { Name = "collision", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
    #endif
    public QueryBuilderParameter<string?>? Collision2
    {
        get => (QueryBuilderParameter<string?>?)_collision2.Value;
        set => _collision2 = new InputPropertyInfo { Name = "collision2", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
    #endif
    public QueryBuilderParameter<string?>? CollisionInput
    {
        get => (QueryBuilderParameter<string?>?)_collisionInput.Value;
        set => _collisionInput = new InputPropertyInfo { Name = "collisionInput", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
    #endif
    public QueryBuilderParameter<string?>? CollisionInputObject
    {
        get => (QueryBuilderParameter<string?>?)_collisionInputObject.Value;
        set => _collisionInputObject = new InputPropertyInfo { Name = "collisionInputObject", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
    #endif
    public QueryBuilderParameter<string?>? CollisionDataRecord
    {
        get => (QueryBuilderParameter<string?>?)_collisionDataRecord.Value;
        set => _collisionDataRecord = new InputPropertyInfo { Name = "collisionDataRecord", Value = value };
    }

    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(QueryBuilderParameterConverter<string?>))]
    #endif
    public QueryBuilderParameter<string?>? CollisionRecord
    {
        get => (QueryBuilderParameter<string?>?)_collisionRecord.Value;
        set => _collisionRecord = new InputPropertyInfo { Name = "collisionRecord", Value = value };
    }

    IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
    {
        if (_collision.Name != null) yield return _collision;
        if (_collision2.Name != null) yield return _collision2;
        if (_collisionInput.Name != null) yield return _collisionInput;
        if (_collisionInputObject.Name != null) yield return _collisionInputObject;
        if (_collisionDataRecord.Name != null) yield return _collisionDataRecord;
        if (_collisionRecord.Name != null) yield return _collisionRecord;
    }
}
#endregion

#region data classes
public partial class SimpleObjectType
{
    public Guid? Id { get; set; }
    public string? StringValueNullable { get; set; }
    public string? StringValue { get; set; }
    public ICollection<string>? StringArrayValue { get; set; }
}

public partial class UnionType
{
    public string? Name { get; set; }
    public string? ConcreteType1Field { get; set; }
    public string? Value { get; set; }
    public string? ConcreteType2Field { get; set; }
    public string? value { get; set; }
    public string? ConcreteType3Field { get; set; }
    public string? VALUE { get; set; }
    public string? Function { get; set; }
}

public partial interface INamedType
{
    string? Name { get; set; }
}

[GraphQlObjectType("ConcreteType1")]
public partial class ConcreteType1 : INamedType
{
    public string? Name { get; set; }
    public string? ConcreteType1Field { get; set; }
    public string? Value { get; set; }
}

[GraphQlObjectType("ConcreteType2")]
public partial class ConcreteType2 : INamedType
{
    public string? Name { get; set; }
    public string? ConcreteType2Field { get; set; }
    public string? Value { get; set; }
}

[GraphQlObjectType("ConcreteType3")]
public partial class ConcreteType3 : INamedType
{
    public string? Name { get; set; }
    public string? ConcreteType3Field { get; set; }
    public string? Value { get; set; }
    public string? Function { get; set; }
}

public partial class Query
{
    public DateTimeOffset? ScalarValue { get; set; }
    public SimpleObjectType? SimpleObject { get; set; }
    public ICollection<UnionType>? Union { get; set; }
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
    #endif
    public INamedType? Interface { get; set; }
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonConverter(typeof(GraphQlInterfaceJsonConverter))]
    #endif
    public ICollection<INamedType>? Interfaces { get; set; }
    public UnderscoreNamedClass? UnderscoreNamedField { get; set; }
    public IList<IList<IList<decimal>>?>? NestedLists { get; set; }
    public string? _ { get; set; }
    public string? COLLISIONS { get; set; }
    public string? collisions { get; set; }
}

public partial class UnderscoreNamedClass
{
    public UnderscoreNamedEnum? UnderscoreNamedFieldEnum { get; set; }
    public ICollection<UnderscoreNamedEnum>? UnderscoreNamedFieldEnumCollection { get; set; }
}

public partial class CollisionDataRecord
{
    public string? CollisionData { get; set; }
}

public partial class Message
{
    public Guid? Id { get; set; }
    public string? TextValue { get; set; }
}

public partial class Mutation
{
    public Message? CreateMessage { get; set; }
    public string? PassDynamic { get; set; }
    public CollisionDataRecord? Collide { get; set; }
}

public partial class Attribute
{
    public string? Value { get; set; }
}
#endregion
#nullable restore