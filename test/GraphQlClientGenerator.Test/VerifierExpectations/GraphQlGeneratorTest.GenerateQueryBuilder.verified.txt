#region GraphQL type helpers
public static class GraphQlTypes
{
    public const string Boolean = "Boolean";
    public const string DynamicType = "DynamicType";
    public const string Float = "Float";
    public const string Id = "ID";
    public const string Int = "Int";
    public const string String = "String";

    public const string Avatar = "Avatar";
    public const string PriceLevel = "PriceLevel";
    public const string Resolution = "Resolution";

    public const string AwayMode = "AwayMode";
    public const string AwayModeSettings = "AwayModeSettings";
    public const string Comparison = "Comparison";
    public const string ComparisonData = "ComparisonData";
    public const string Consumption = "Consumption";
    public const string ConsumptionMonth = "ConsumptionMonth";
    public const string Device = "Device";
    public const string Disaggregation = "Disaggregation";
    public const string Feed = "Feed";
    public const string FeedItem = "FeedItem";
    public const string Home = "Home";
    public const string Me = "Me";
    public const string PreLiveComparison = "PreLiveComparison";
    public const string PriceRating = "PriceRating";
    public const string PriceRatingEntry = "PriceRatingEntry";
    public const string ProcessStep = "ProcessStep";
    public const string PushNotification = "PushNotification";
    public const string Query = "Query";
    public const string SignupStatus = "SignupStatus";
    public const string Subscription = "Subscription";
    public const string Weather = "Weather";

    public static readonly IReadOnlyDictionary<global::System.Type, string> ReverseMapping =
        new Dictionary<global::System.Type, string>
        {
            { typeof(bool), "Boolean" },
            { typeof(DateTimeOffset), "String" },
            { typeof(int), "Int" },
            { typeof(string), "String" },
            { typeof(decimal), "Float" },
            { typeof(Guid), "ID" }
        };
}
#endregion

#region enums
public enum Avatar
{
    [EnumMember(Value = "floorhouse1")] Floorhouse1,
    [EnumMember(Value = "floorhouse2")] Floorhouse2,
    [EnumMember(Value = "floorhouse3")] Floorhouse3,
    [EnumMember(Value = "castle")] Castle,
    [EnumMember(Value = "apartment")] Apartment,
    [EnumMember(Value = "cottage")] Cottage,
    [EnumMember(Value = "rowhouse")] Rowhouse
}

public enum PriceLevel
{
    [EnumMember(Value = "low")] Low,
    [EnumMember(Value = "normal")] Normal,
    [EnumMember(Value = "high")] High
}

public enum Resolution
{
    [EnumMember(Value = "annual")] Annual,
    [EnumMember(Value = "monthly")] Monthly
}
#endregion

#region directives
public class IncludeDirective : GraphQlDirective
{
    public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
    {
        AddArgument("if", @if);
    }
}

public class SkipDirective : GraphQlDirective
{
    public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
    {
        AddArgument("if", @if);
    }
}
#endregion

#region builder classes
public partial class QueryQueryBuilder : GraphQlQueryBuilder<QueryQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "me", IsComplex = true, QueryBuilderType = typeof(MeQueryBuilder) }
        };

    protected override string TypeName { get { return "Query"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public QueryQueryBuilder(string operationName = null) : base("query", operationName)
    {
    }

    public QueryQueryBuilder WithParameter<T>(GraphQlQueryParameter<T> parameter)
    {
        return WithParameterInternal(parameter);
    }

    public QueryQueryBuilder WithMe(MeQueryBuilder meQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("me", alias, meQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public QueryQueryBuilder ExceptMe()
    {
        return ExceptField("me");
    }
}

public partial class MeQueryBuilder : GraphQlQueryBuilder<MeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "firstName" },
            new GraphQlFieldMetadata { Name = "lastName" },
            new GraphQlFieldMetadata { Name = "fullName" },
            new GraphQlFieldMetadata { Name = "ssn" },
            new GraphQlFieldMetadata { Name = "email" },
            new GraphQlFieldMetadata { Name = "language" },
            new GraphQlFieldMetadata { Name = "tone" },
            new GraphQlFieldMetadata { Name = "avatars", IsComplex = true },
            new GraphQlFieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
            new GraphQlFieldMetadata { Name = "homes", IsComplex = true, QueryBuilderType = typeof(HomeQueryBuilder) },
            new GraphQlFieldMetadata { Name = "feed", IsComplex = true, QueryBuilderType = typeof(FeedQueryBuilder) },
            new GraphQlFieldMetadata { Name = "energyStatements", IsComplex = true }
        };

    protected override string TypeName { get { return "Me"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public MeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public MeQueryBuilder WithFirstName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("firstName", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptFirstName()
    {
        return ExceptField("firstName");
    }

    public MeQueryBuilder WithLastName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("lastName", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptLastName()
    {
        return ExceptField("lastName");
    }

    public MeQueryBuilder WithFullName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("fullName", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptFullName()
    {
        return ExceptField("fullName");
    }

    public MeQueryBuilder WithSsn(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("ssn", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptSsn()
    {
        return ExceptField("ssn");
    }

    public MeQueryBuilder WithEmail(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("email", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptEmail()
    {
        return ExceptField("email");
    }

    public MeQueryBuilder WithLanguage(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("language", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptLanguage()
    {
        return ExceptField("language");
    }

    public MeQueryBuilder WithTone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("tone", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptTone()
    {
        return ExceptField("tone");
    }

    public MeQueryBuilder WithAvatars(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("avatars", alias, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptAvatars()
    {
        return ExceptField("avatars");
    }

    public MeQueryBuilder WithHome(HomeQueryBuilder homeQueryBuilder, QueryBuilderParameter<string> @object = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (@object != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "object", ArgumentValue = @object} );

        return WithObjectField("home", alias, homeQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public MeQueryBuilder ExceptHome()
    {
        return ExceptField("home");
    }

    public MeQueryBuilder WithHomes(HomeQueryBuilder homeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("homes", alias, homeQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptHomes()
    {
        return ExceptField("homes");
    }

    public MeQueryBuilder WithFeed(FeedQueryBuilder feedQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("feed", alias, feedQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public MeQueryBuilder ExceptFeed()
    {
        return ExceptField("feed");
    }

    public MeQueryBuilder WithEnergyStatements(QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        return WithScalarField("energyStatements", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public MeQueryBuilder ExceptEnergyStatements()
    {
        return ExceptField("energyStatements");
    }
}

public partial class HomeQueryBuilder : GraphQlQueryBuilder<HomeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "avatar" },
            new GraphQlFieldMetadata { Name = "timeZone" },
            new GraphQlFieldMetadata { Name = "subscription", IsComplex = true, QueryBuilderType = typeof(SubscriptionQueryBuilder) },
            new GraphQlFieldMetadata { Name = "consumptionMonths", IsComplex = true, QueryBuilderType = typeof(ConsumptionMonthQueryBuilder) },
            new GraphQlFieldMetadata { Name = "consumption", IsComplex = true, QueryBuilderType = typeof(ConsumptionQueryBuilder) },
            new GraphQlFieldMetadata { Name = "preLiveComparison", IsComplex = true, QueryBuilderType = typeof(PreLiveComparisonQueryBuilder) },
            new GraphQlFieldMetadata { Name = "comparisons", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new GraphQlFieldMetadata { Name = "comparison_current_month", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new GraphQlFieldMetadata { Name = "profile" },
            new GraphQlFieldMetadata { Name = "profileQuestions" },
            new GraphQlFieldMetadata { Name = "thermostat" },
            new GraphQlFieldMetadata { Name = "temperatures", IsComplex = true },
            new GraphQlFieldMetadata { Name = "signupStatus", IsComplex = true, QueryBuilderType = typeof(SignupStatusQueryBuilder) },
            new GraphQlFieldMetadata { Name = "disaggregation", IsComplex = true, QueryBuilderType = typeof(DisaggregationQueryBuilder) },
            new GraphQlFieldMetadata { Name = "devices", IsComplex = true, QueryBuilderType = typeof(DeviceQueryBuilder) },
            new GraphQlFieldMetadata { Name = "weather", IsComplex = true, QueryBuilderType = typeof(WeatherQueryBuilder) },
            new GraphQlFieldMetadata { Name = "awayMode", IsComplex = true, QueryBuilderType = typeof(VacationModeQueryBuilder) }
        };

    protected override string TypeName { get { return "Home"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public HomeQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public HomeQueryBuilder WithAvatar(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("avatar", alias, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptAvatar()
    {
        return ExceptField("avatar");
    }

    public HomeQueryBuilder WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptTimeZone()
    {
        return ExceptField("timeZone");
    }

    public HomeQueryBuilder WithSubscription(SubscriptionQueryBuilder subscriptionQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("subscription", alias, subscriptionQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptSubscription()
    {
        return ExceptField("subscription");
    }

    public HomeQueryBuilder WithConsumptionMonths(ConsumptionMonthQueryBuilder consumptionMonthQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        return WithObjectField("consumptionMonths", alias, consumptionMonthQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public HomeQueryBuilder ExceptConsumptionMonths()
    {
        return ExceptField("consumptionMonths");
    }

    public HomeQueryBuilder WithConsumption(ConsumptionQueryBuilder consumptionQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        return WithObjectField("consumption", alias, consumptionQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public HomeQueryBuilder ExceptConsumption()
    {
        return ExceptField("consumption");
    }

    public HomeQueryBuilder WithPreLiveComparison(PreLiveComparisonQueryBuilder preLiveComparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("preLiveComparison", alias, preLiveComparisonQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptPreLiveComparison()
    {
        return ExceptField("preLiveComparison");
    }

    public HomeQueryBuilder WithComparisons(ComparisonQueryBuilder comparisonQueryBuilder, QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<Resolution?> resolution = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        return WithObjectField("comparisons", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public HomeQueryBuilder ExceptComparisons()
    {
        return ExceptField("comparisons");
    }

    public HomeQueryBuilder WithComparisonCurrentMonth(ComparisonQueryBuilder comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("comparison_current_month", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptComparisonCurrentMonth()
    {
        return ExceptField("comparison_current_month");
    }

    public HomeQueryBuilder WithProfile(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("profile", alias, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptProfile()
    {
        return ExceptField("profile");
    }

    public HomeQueryBuilder WithProfileQuestions(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("profileQuestions", alias, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptProfileQuestions()
    {
        return ExceptField("profileQuestions");
    }

    public HomeQueryBuilder WithThermostat(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("thermostat", alias, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptThermostat()
    {
        return ExceptField("thermostat");
    }

    public HomeQueryBuilder WithTemperatures(QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, QueryBuilderParameter<string> resolution = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        return WithScalarField("temperatures", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public HomeQueryBuilder ExceptTemperatures()
    {
        return ExceptField("temperatures");
    }

    public HomeQueryBuilder WithSignupStatus(SignupStatusQueryBuilder signupStatusQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("signupStatus", alias, signupStatusQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptSignupStatus()
    {
        return ExceptField("signupStatus");
    }

    public HomeQueryBuilder WithDisaggregation(DisaggregationQueryBuilder disaggregationQueryBuilder, QueryBuilderParameter<Resolution?> resolution = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (resolution != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "resolution", ArgumentValue = resolution} );

        return WithObjectField("disaggregation", alias, disaggregationQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public HomeQueryBuilder ExceptDisaggregation()
    {
        return ExceptField("disaggregation");
    }

    public HomeQueryBuilder WithDevices(DeviceQueryBuilder deviceQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("devices", alias, deviceQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptDevices()
    {
        return ExceptField("devices");
    }

    public HomeQueryBuilder WithWeather(WeatherQueryBuilder weatherQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("weather", alias, weatherQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptWeather()
    {
        return ExceptField("weather");
    }

    public HomeQueryBuilder WithAwayMode(VacationModeQueryBuilder vacationModeQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("awayMode", alias, vacationModeQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public HomeQueryBuilder ExceptAwayMode()
    {
        return ExceptField("awayMode");
    }
}

public partial class SubscriptionQueryBuilder : GraphQlQueryBuilder<SubscriptionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "validFrom" },
            new GraphQlFieldMetadata { Name = "validTo" },
            new GraphQlFieldMetadata { Name = "status" },
            new GraphQlFieldMetadata { Name = "billingRegionId" },
            new GraphQlFieldMetadata { Name = "energyStatements", IsComplex = true },
            new GraphQlFieldMetadata { Name = "priceRating", IsComplex = true, QueryBuilderType = typeof(PriceRatingQueryBuilder) }
        };

    protected override string TypeName { get { return "Subscription"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public SubscriptionQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
    }

    public SubscriptionQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public SubscriptionQueryBuilder WithValidFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("validFrom", alias, new GraphQlDirective[] { include, skip });
    }

    public SubscriptionQueryBuilder ExceptValidFrom()
    {
        return ExceptField("validFrom");
    }

    public SubscriptionQueryBuilder WithValidTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("validTo", alias, new GraphQlDirective[] { include, skip });
    }

    public SubscriptionQueryBuilder ExceptValidTo()
    {
        return ExceptField("validTo");
    }

    public SubscriptionQueryBuilder WithStatus(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("status", alias, new GraphQlDirective[] { include, skip });
    }

    public SubscriptionQueryBuilder ExceptStatus()
    {
        return ExceptField("status");
    }

    public SubscriptionQueryBuilder WithBillingRegionId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("billingRegionId", alias, new GraphQlDirective[] { include, skip });
    }

    public SubscriptionQueryBuilder ExceptBillingRegionId()
    {
        return ExceptField("billingRegionId");
    }

    public SubscriptionQueryBuilder WithEnergyStatements(QueryBuilderParameter<DateTimeOffset?> from = null, QueryBuilderParameter<DateTimeOffset?> to = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (from != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "from", ArgumentValue = from} );

        if (to != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "to", ArgumentValue = to} );

        return WithScalarField("energyStatements", alias, new GraphQlDirective[] { include, skip }, args);
    }

    public SubscriptionQueryBuilder ExceptEnergyStatements()
    {
        return ExceptField("energyStatements");
    }

    public SubscriptionQueryBuilder WithPriceRating(PriceRatingQueryBuilder priceRatingQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("priceRating", alias, priceRatingQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public SubscriptionQueryBuilder ExceptPriceRating()
    {
        return ExceptField("priceRating");
    }
}

public partial class PriceRatingQueryBuilder : GraphQlQueryBuilder<PriceRatingQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "minPrice" },
            new GraphQlFieldMetadata { Name = "maxPrice" },
            new GraphQlFieldMetadata { Name = "entries", IsComplex = true, QueryBuilderType = typeof(PriceRatingEntryQueryBuilder) }
        };

    protected override string TypeName { get { return "PriceRating"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PriceRatingQueryBuilder WithMinPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("minPrice", alias, new GraphQlDirective[] { include, skip });
    }

    public PriceRatingQueryBuilder ExceptMinPrice()
    {
        return ExceptField("minPrice");
    }

    public PriceRatingQueryBuilder WithMaxPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("maxPrice", alias, new GraphQlDirective[] { include, skip });
    }

    public PriceRatingQueryBuilder ExceptMaxPrice()
    {
        return ExceptField("maxPrice");
    }

    public PriceRatingQueryBuilder WithEntries(PriceRatingEntryQueryBuilder priceRatingEntryQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("entries", alias, priceRatingEntryQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public PriceRatingQueryBuilder ExceptEntries()
    {
        return ExceptField("entries");
    }
}

public partial class PriceRatingEntryQueryBuilder : GraphQlQueryBuilder<PriceRatingEntryQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "time" },
            new GraphQlFieldMetadata { Name = "price" },
            new GraphQlFieldMetadata { Name = "level" },
            new GraphQlFieldMetadata { Name = "difference" }
        };

    protected override string TypeName { get { return "PriceRatingEntry"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PriceRatingEntryQueryBuilder WithTime(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("time", alias, new GraphQlDirective[] { include, skip });
    }

    public PriceRatingEntryQueryBuilder ExceptTime()
    {
        return ExceptField("time");
    }

    public PriceRatingEntryQueryBuilder WithPrice(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("price", alias, new GraphQlDirective[] { include, skip });
    }

    public PriceRatingEntryQueryBuilder ExceptPrice()
    {
        return ExceptField("price");
    }

    public PriceRatingEntryQueryBuilder WithLevel(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("level", alias, new GraphQlDirective[] { include, skip });
    }

    public PriceRatingEntryQueryBuilder ExceptLevel()
    {
        return ExceptField("level");
    }

    public PriceRatingEntryQueryBuilder WithDifference(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("difference", alias, new GraphQlDirective[] { include, skip });
    }

    public PriceRatingEntryQueryBuilder ExceptDifference()
    {
        return ExceptField("difference");
    }
}

public partial class ConsumptionMonthQueryBuilder : GraphQlQueryBuilder<ConsumptionMonthQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "year" },
            new GraphQlFieldMetadata { Name = "month" },
            new GraphQlFieldMetadata { Name = "kwh" },
            new GraphQlFieldMetadata { Name = "cost" },
            new GraphQlFieldMetadata { Name = "isComplete" },
            new GraphQlFieldMetadata { Name = "kwhEstimate" },
            new GraphQlFieldMetadata { Name = "costEstimate" }
        };

    protected override string TypeName { get { return "ConsumptionMonth"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ConsumptionMonthQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionMonthQueryBuilder ExceptYear()
    {
        return ExceptField("year");
    }

    public ConsumptionMonthQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionMonthQueryBuilder ExceptMonth()
    {
        return ExceptField("month");
    }

    public ConsumptionMonthQueryBuilder WithKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("kwh", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionMonthQueryBuilder ExceptKwh()
    {
        return ExceptField("kwh");
    }

    public ConsumptionMonthQueryBuilder WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionMonthQueryBuilder ExceptCost()
    {
        return ExceptField("cost");
    }

    public ConsumptionMonthQueryBuilder WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionMonthQueryBuilder ExceptIsComplete()
    {
        return ExceptField("isComplete");
    }

    public ConsumptionMonthQueryBuilder WithKwhEstimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("kwhEstimate", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionMonthQueryBuilder ExceptKwhEstimate()
    {
        return ExceptField("kwhEstimate");
    }

    public ConsumptionMonthQueryBuilder WithCostEstimate(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("costEstimate", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionMonthQueryBuilder ExceptCostEstimate()
    {
        return ExceptField("costEstimate");
    }
}

public partial class ConsumptionQueryBuilder : GraphQlQueryBuilder<ConsumptionQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "annualValues" },
            new GraphQlFieldMetadata { Name = "monthlyValues" },
            new GraphQlFieldMetadata { Name = "weeklyValues" },
            new GraphQlFieldMetadata { Name = "dailyValues" },
            new GraphQlFieldMetadata { Name = "hourlyValues" },
            new GraphQlFieldMetadata { Name = "totalConsumption" },
            new GraphQlFieldMetadata { Name = "energyCost" },
            new GraphQlFieldMetadata { Name = "totalCost" },
            new GraphQlFieldMetadata { Name = "currency" },
            new GraphQlFieldMetadata { Name = "latestTransactionTimestamp" },
            new GraphQlFieldMetadata { Name = "timeZone" }
        };

    protected override string TypeName { get { return "Consumption"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ConsumptionQueryBuilder WithAnnualValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("annualValues", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptAnnualValues()
    {
        return ExceptField("annualValues");
    }

    public ConsumptionQueryBuilder WithMonthlyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("monthlyValues", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptMonthlyValues()
    {
        return ExceptField("monthlyValues");
    }

    public ConsumptionQueryBuilder WithWeeklyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("weeklyValues", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptWeeklyValues()
    {
        return ExceptField("weeklyValues");
    }

    public ConsumptionQueryBuilder WithDailyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("dailyValues", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptDailyValues()
    {
        return ExceptField("dailyValues");
    }

    public ConsumptionQueryBuilder WithHourlyValues(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("hourlyValues", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptHourlyValues()
    {
        return ExceptField("hourlyValues");
    }

    public ConsumptionQueryBuilder WithTotalConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("totalConsumption", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptTotalConsumption()
    {
        return ExceptField("totalConsumption");
    }

    public ConsumptionQueryBuilder WithEnergyCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("energyCost", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptEnergyCost()
    {
        return ExceptField("energyCost");
    }

    public ConsumptionQueryBuilder WithTotalCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("totalCost", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptTotalCost()
    {
        return ExceptField("totalCost");
    }

    public ConsumptionQueryBuilder WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public ConsumptionQueryBuilder WithLatestTransactionTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("latestTransactionTimestamp", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptLatestTransactionTimestamp()
    {
        return ExceptField("latestTransactionTimestamp");
    }

    public ConsumptionQueryBuilder WithTimeZone(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("timeZone", alias, new GraphQlDirective[] { include, skip });
    }

    public ConsumptionQueryBuilder ExceptTimeZone()
    {
        return ExceptField("timeZone");
    }
}

public partial class PreLiveComparisonQueryBuilder : GraphQlQueryBuilder<PreLiveComparisonQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "homeId" },
            new GraphQlFieldMetadata { Name = "basedOnActuals" },
            new GraphQlFieldMetadata { Name = "previousYear", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) },
            new GraphQlFieldMetadata { Name = "previousYearMonths", IsComplex = true, QueryBuilderType = typeof(ComparisonQueryBuilder) }
        };

    protected override string TypeName { get { return "PreLiveComparison"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PreLiveComparisonQueryBuilder WithHomeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("homeId", alias, new GraphQlDirective[] { include, skip });
    }

    public PreLiveComparisonQueryBuilder ExceptHomeId()
    {
        return ExceptField("homeId");
    }

    public PreLiveComparisonQueryBuilder WithBasedOnActuals(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("basedOnActuals", alias, new GraphQlDirective[] { include, skip });
    }

    public PreLiveComparisonQueryBuilder ExceptBasedOnActuals()
    {
        return ExceptField("basedOnActuals");
    }

    public PreLiveComparisonQueryBuilder WithPreviousYear(ComparisonQueryBuilder comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("previousYear", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public PreLiveComparisonQueryBuilder ExceptPreviousYear()
    {
        return ExceptField("previousYear");
    }

    public PreLiveComparisonQueryBuilder WithPreviousYearMonths(ComparisonQueryBuilder comparisonQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("previousYearMonths", alias, comparisonQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public PreLiveComparisonQueryBuilder ExceptPreviousYearMonths()
    {
        return ExceptField("previousYearMonths");
    }
}

public partial class ComparisonQueryBuilder : GraphQlQueryBuilder<ComparisonQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "year" },
            new GraphQlFieldMetadata { Name = "month" },
            new GraphQlFieldMetadata { Name = "resolution" },
            new GraphQlFieldMetadata { Name = "homeEfficency" },
            new GraphQlFieldMetadata { Name = "homeEfficencyDescription" },
            new GraphQlFieldMetadata { Name = "home", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) },
            new GraphQlFieldMetadata { Name = "average", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) },
            new GraphQlFieldMetadata { Name = "efficient", IsComplex = true, QueryBuilderType = typeof(ComparisonDataQueryBuilder) }
        };

    protected override string TypeName { get { return "Comparison"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ComparisonQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
    }

    public ComparisonQueryBuilder ExceptYear()
    {
        return ExceptField("year");
    }

    public ComparisonQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
    }

    public ComparisonQueryBuilder ExceptMonth()
    {
        return ExceptField("month");
    }

    public ComparisonQueryBuilder WithResolution(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("resolution", alias, new GraphQlDirective[] { include, skip });
    }

    public ComparisonQueryBuilder ExceptResolution()
    {
        return ExceptField("resolution");
    }

    public ComparisonQueryBuilder WithHomeEfficency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("homeEfficency", alias, new GraphQlDirective[] { include, skip });
    }

    public ComparisonQueryBuilder ExceptHomeEfficency()
    {
        return ExceptField("homeEfficency");
    }

    public ComparisonQueryBuilder WithHomeEfficencyDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("homeEfficencyDescription", alias, new GraphQlDirective[] { include, skip });
    }

    public ComparisonQueryBuilder ExceptHomeEfficencyDescription()
    {
        return ExceptField("homeEfficencyDescription");
    }

    public ComparisonQueryBuilder WithHome(ComparisonDataQueryBuilder comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("home", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public ComparisonQueryBuilder ExceptHome()
    {
        return ExceptField("home");
    }

    public ComparisonQueryBuilder WithAverage(ComparisonDataQueryBuilder comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("average", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public ComparisonQueryBuilder ExceptAverage()
    {
        return ExceptField("average");
    }

    public ComparisonQueryBuilder WithEfficient(ComparisonDataQueryBuilder comparisonDataQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("efficient", alias, comparisonDataQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public ComparisonQueryBuilder ExceptEfficient()
    {
        return ExceptField("efficient");
    }
}

public partial class ComparisonDataQueryBuilder : GraphQlQueryBuilder<ComparisonDataQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "cost" },
            new GraphQlFieldMetadata { Name = "consumption" }
        };

    protected override string TypeName { get { return "ComparisonData"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ComparisonDataQueryBuilder WithCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("cost", alias, new GraphQlDirective[] { include, skip });
    }

    public ComparisonDataQueryBuilder ExceptCost()
    {
        return ExceptField("cost");
    }

    public ComparisonDataQueryBuilder WithConsumption(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("consumption", alias, new GraphQlDirective[] { include, skip });
    }

    public ComparisonDataQueryBuilder ExceptConsumption()
    {
        return ExceptField("consumption");
    }
}

public partial class SignupStatusQueryBuilder : GraphQlQueryBuilder<SignupStatusQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "feedStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) },
            new GraphQlFieldMetadata { Name = "avatarStep", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) },
            new GraphQlFieldMetadata { Name = "steps", IsComplex = true, QueryBuilderType = typeof(ProcessStepQueryBuilder) }
        };

    protected override string TypeName { get { return "SignupStatus"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public SignupStatusQueryBuilder WithFeedStep(ProcessStepQueryBuilder processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("feedStep", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public SignupStatusQueryBuilder ExceptFeedStep()
    {
        return ExceptField("feedStep");
    }

    public SignupStatusQueryBuilder WithAvatarStep(ProcessStepQueryBuilder processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("avatarStep", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public SignupStatusQueryBuilder ExceptAvatarStep()
    {
        return ExceptField("avatarStep");
    }

    public SignupStatusQueryBuilder WithSteps(ProcessStepQueryBuilder processStepQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("steps", alias, processStepQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public SignupStatusQueryBuilder ExceptSteps()
    {
        return ExceptField("steps");
    }
}

public partial class ProcessStepQueryBuilder : GraphQlQueryBuilder<ProcessStepQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "timestamp" },
            new GraphQlFieldMetadata { Name = "isComplete" },
            new GraphQlFieldMetadata { Name = "title" },
            new GraphQlFieldMetadata { Name = "description" }
        };

    protected override string TypeName { get { return "ProcessStep"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public ProcessStepQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
    }

    public ProcessStepQueryBuilder ExceptTimestamp()
    {
        return ExceptField("timestamp");
    }

    public ProcessStepQueryBuilder WithIsComplete(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("isComplete", alias, new GraphQlDirective[] { include, skip });
    }

    public ProcessStepQueryBuilder ExceptIsComplete()
    {
        return ExceptField("isComplete");
    }

    public ProcessStepQueryBuilder WithTitle(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("title", alias, new GraphQlDirective[] { include, skip });
    }

    public ProcessStepQueryBuilder ExceptTitle()
    {
        return ExceptField("title");
    }

    public ProcessStepQueryBuilder WithDescription(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("description", alias, new GraphQlDirective[] { include, skip });
    }

    public ProcessStepQueryBuilder ExceptDescription()
    {
        return ExceptField("description");
    }
}

public partial class DisaggregationQueryBuilder : GraphQlQueryBuilder<DisaggregationQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "year" },
            new GraphQlFieldMetadata { Name = "month" },
            new GraphQlFieldMetadata { Name = "fixedConsumptionKwh" },
            new GraphQlFieldMetadata { Name = "fixedConsumptionKwhPercent" },
            new GraphQlFieldMetadata { Name = "fixedConsumptionCost" },
            new GraphQlFieldMetadata { Name = "heatingConsumptionKwh" },
            new GraphQlFieldMetadata { Name = "heatingConsumptionKwhPercent" },
            new GraphQlFieldMetadata { Name = "heatingConsumptionCost" },
            new GraphQlFieldMetadata { Name = "behaviorConsumptionKwh" },
            new GraphQlFieldMetadata { Name = "behaviorConsumptionKwhPercent" },
            new GraphQlFieldMetadata { Name = "behaviorConsumptionCost" },
            new GraphQlFieldMetadata { Name = "currency" },
            new GraphQlFieldMetadata { Name = "isValid" }
        };

    protected override string TypeName { get { return "Disaggregation"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public DisaggregationQueryBuilder WithYear(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("year", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptYear()
    {
        return ExceptField("year");
    }

    public DisaggregationQueryBuilder WithMonth(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("month", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptMonth()
    {
        return ExceptField("month");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("fixedConsumptionKwh", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptFixedConsumptionKwh()
    {
        return ExceptField("fixedConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("fixedConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptFixedConsumptionKwhPercent()
    {
        return ExceptField("fixedConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithFixedConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("fixedConsumptionCost", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptFixedConsumptionCost()
    {
        return ExceptField("fixedConsumptionCost");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("heatingConsumptionKwh", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptHeatingConsumptionKwh()
    {
        return ExceptField("heatingConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("heatingConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptHeatingConsumptionKwhPercent()
    {
        return ExceptField("heatingConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithHeatingConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("heatingConsumptionCost", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptHeatingConsumptionCost()
    {
        return ExceptField("heatingConsumptionCost");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionKwh(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("behaviorConsumptionKwh", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptBehaviorConsumptionKwh()
    {
        return ExceptField("behaviorConsumptionKwh");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionKwhPercent(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("behaviorConsumptionKwhPercent", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptBehaviorConsumptionKwhPercent()
    {
        return ExceptField("behaviorConsumptionKwhPercent");
    }

    public DisaggregationQueryBuilder WithBehaviorConsumptionCost(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("behaviorConsumptionCost", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptBehaviorConsumptionCost()
    {
        return ExceptField("behaviorConsumptionCost");
    }

    public DisaggregationQueryBuilder WithCurrency(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("currency", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptCurrency()
    {
        return ExceptField("currency");
    }

    public DisaggregationQueryBuilder WithIsValid(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("isValid", alias, new GraphQlDirective[] { include, skip });
    }

    public DisaggregationQueryBuilder ExceptIsValid()
    {
        return ExceptField("isValid");
    }
}

public partial class DeviceQueryBuilder : GraphQlQueryBuilder<DeviceQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "deviceId" },
            new GraphQlFieldMetadata { Name = "type" },
            new GraphQlFieldMetadata { Name = "isControllable" },
            new GraphQlFieldMetadata { Name = "externalId" },
            new GraphQlFieldMetadata { Name = "name" },
            new GraphQlFieldMetadata { Name = "isBatteryLow" },
            new GraphQlFieldMetadata { Name = "isSignalLow" },
            new GraphQlFieldMetadata { Name = "isAlive" },
            new GraphQlFieldMetadata { Name = "capabilities", IsComplex = true },
            new GraphQlFieldMetadata { Name = "properties" }
        };

    protected override string TypeName { get { return "Device"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public DeviceQueryBuilder WithDeviceId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("deviceId", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptDeviceId()
    {
        return ExceptField("deviceId");
    }

    public DeviceQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptType()
    {
        return ExceptField("type");
    }

    public DeviceQueryBuilder WithIsControllable(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("isControllable", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptIsControllable()
    {
        return ExceptField("isControllable");
    }

    public DeviceQueryBuilder WithExternalId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("externalId", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptExternalId()
    {
        return ExceptField("externalId");
    }

    public DeviceQueryBuilder WithName(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("name", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptName()
    {
        return ExceptField("name");
    }

    public DeviceQueryBuilder WithIsBatteryLow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("isBatteryLow", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptIsBatteryLow()
    {
        return ExceptField("isBatteryLow");
    }

    public DeviceQueryBuilder WithIsSignalLow(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("isSignalLow", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptIsSignalLow()
    {
        return ExceptField("isSignalLow");
    }

    public DeviceQueryBuilder WithIsAlive(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("isAlive", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptIsAlive()
    {
        return ExceptField("isAlive");
    }

    public DeviceQueryBuilder WithCapabilities(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("capabilities", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptCapabilities()
    {
        return ExceptField("capabilities");
    }

    public DeviceQueryBuilder WithProperties(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("properties", alias, new GraphQlDirective[] { include, skip });
    }

    public DeviceQueryBuilder ExceptProperties()
    {
        return ExceptField("properties");
    }
}

public partial class WeatherQueryBuilder : GraphQlQueryBuilder<WeatherQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "temperature" },
            new GraphQlFieldMetadata { Name = "timestamp" },
            new GraphQlFieldMetadata { Name = "summary" },
            new GraphQlFieldMetadata { Name = "type" }
        };

    protected override string TypeName { get { return "Weather"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public WeatherQueryBuilder WithTemperature(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("temperature", alias, new GraphQlDirective[] { include, skip });
    }

    public WeatherQueryBuilder ExceptTemperature()
    {
        return ExceptField("temperature");
    }

    public WeatherQueryBuilder WithTimestamp(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("timestamp", alias, new GraphQlDirective[] { include, skip });
    }

    public WeatherQueryBuilder ExceptTimestamp()
    {
        return ExceptField("timestamp");
    }

    public WeatherQueryBuilder WithSummary(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("summary", alias, new GraphQlDirective[] { include, skip });
    }

    public WeatherQueryBuilder ExceptSummary()
    {
        return ExceptField("summary");
    }

    public WeatherQueryBuilder WithType(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("type", alias, new GraphQlDirective[] { include, skip });
    }

    public WeatherQueryBuilder ExceptType()
    {
        return ExceptField("type");
    }
}

public partial class VacationModeQueryBuilder : GraphQlQueryBuilder<VacationModeQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "isSupported" },
            new GraphQlFieldMetadata { Name = "settings", IsComplex = true, QueryBuilderType = typeof(AwayModeSettingsQueryBuilder) }
        };

    protected override string TypeName { get { return "AwayMode"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public VacationModeQueryBuilder WithIsSupported(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("isSupported", alias, new GraphQlDirective[] { include, skip });
    }

    public VacationModeQueryBuilder ExceptIsSupported()
    {
        return ExceptField("isSupported");
    }

    public VacationModeQueryBuilder WithSettings(AwayModeSettingsQueryBuilder awayModeSettingsQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("settings", alias, awayModeSettingsQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public VacationModeQueryBuilder ExceptSettings()
    {
        return ExceptField("settings");
    }
}

public partial class AwayModeSettingsQueryBuilder : GraphQlQueryBuilder<AwayModeSettingsQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "from" },
            new GraphQlFieldMetadata { Name = "to" }
        };

    protected override string TypeName { get { return "AwayModeSettings"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public AwayModeSettingsQueryBuilder WithFrom(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("from", alias, new GraphQlDirective[] { include, skip });
    }

    public AwayModeSettingsQueryBuilder ExceptFrom()
    {
        return ExceptField("from");
    }

    public AwayModeSettingsQueryBuilder WithTo(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("to", alias, new GraphQlDirective[] { include, skip });
    }

    public AwayModeSettingsQueryBuilder ExceptTo()
    {
        return ExceptField("to");
    }
}

public partial class FeedQueryBuilder : GraphQlQueryBuilder<FeedQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "numberOfItems" },
            new GraphQlFieldMetadata { Name = "items", IsComplex = true, QueryBuilderType = typeof(FeedItemQueryBuilder) },
            new GraphQlFieldMetadata { Name = "pushNotifications", IsComplex = true, QueryBuilderType = typeof(PushNotificationQueryBuilder) }
        };

    protected override string TypeName { get { return "Feed"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public FeedQueryBuilder WithNumberOfItems(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("numberOfItems", alias, new GraphQlDirective[] { include, skip });
    }

    public FeedQueryBuilder ExceptNumberOfItems()
    {
        return ExceptField("numberOfItems");
    }

    public FeedQueryBuilder WithItems(FeedItemQueryBuilder feedItemQueryBuilder, QueryBuilderParameter<int?> page = null, QueryBuilderParameter<int?> pageSize = null, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        var args = new List<QueryBuilderArgumentInfo>();
        if (page != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "page", ArgumentValue = page} );

        if (pageSize != null)
            args.Add(new QueryBuilderArgumentInfo { ArgumentName = "pageSize", ArgumentValue = pageSize} );

        return WithObjectField("items", alias, feedItemQueryBuilder, new GraphQlDirective[] { include, skip }, args);
    }

    public FeedQueryBuilder ExceptItems()
    {
        return ExceptField("items");
    }

    public FeedQueryBuilder WithPushNotifications(PushNotificationQueryBuilder pushNotificationQueryBuilder, string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithObjectField("pushNotifications", alias, pushNotificationQueryBuilder, new GraphQlDirective[] { include, skip });
    }

    public FeedQueryBuilder ExceptPushNotifications()
    {
        return ExceptField("pushNotifications");
    }
}

public partial class FeedItemQueryBuilder : GraphQlQueryBuilder<FeedItemQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "messageTypeId" },
            new GraphQlFieldMetadata { Name = "link" },
            new GraphQlFieldMetadata { Name = "text" },
            new GraphQlFieldMetadata { Name = "createdAt" },
            new GraphQlFieldMetadata { Name = "modifiedAt" }
        };

    protected override string TypeName { get { return "FeedItem"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public FeedItemQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
    }

    public FeedItemQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public FeedItemQueryBuilder WithMessageTypeId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("messageTypeId", alias, new GraphQlDirective[] { include, skip });
    }

    public FeedItemQueryBuilder ExceptMessageTypeId()
    {
        return ExceptField("messageTypeId");
    }

    public FeedItemQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("link", alias, new GraphQlDirective[] { include, skip });
    }

    public FeedItemQueryBuilder ExceptLink()
    {
        return ExceptField("link");
    }

    public FeedItemQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
    }

    public FeedItemQueryBuilder ExceptText()
    {
        return ExceptField("text");
    }

    public FeedItemQueryBuilder WithCreatedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("createdAt", alias, new GraphQlDirective[] { include, skip });
    }

    public FeedItemQueryBuilder ExceptCreatedAt()
    {
        return ExceptField("createdAt");
    }

    public FeedItemQueryBuilder WithModifiedAt(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("modifiedAt", alias, new GraphQlDirective[] { include, skip });
    }

    public FeedItemQueryBuilder ExceptModifiedAt()
    {
        return ExceptField("modifiedAt");
    }
}

public partial class PushNotificationQueryBuilder : GraphQlQueryBuilder<PushNotificationQueryBuilder>
{
    private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        new []
        {
            new GraphQlFieldMetadata { Name = "id" },
            new GraphQlFieldMetadata { Name = "link" },
            new GraphQlFieldMetadata { Name = "text" }
        };

    protected override string TypeName { get { return "PushNotification"; } } 

    public override IReadOnlyList<GraphQlFieldMetadata> AllFields { get { return AllFieldMetadata; } } 

    public PushNotificationQueryBuilder WithId(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("id", alias, new GraphQlDirective[] { include, skip });
    }

    public PushNotificationQueryBuilder ExceptId()
    {
        return ExceptField("id");
    }

    public PushNotificationQueryBuilder WithLink(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("link", alias, new GraphQlDirective[] { include, skip });
    }

    public PushNotificationQueryBuilder ExceptLink()
    {
        return ExceptField("link");
    }

    public PushNotificationQueryBuilder WithText(string alias = null, IncludeDirective include = null, SkipDirective skip = null)
    {
        return WithScalarField("text", alias, new GraphQlDirective[] { include, skip });
    }

    public PushNotificationQueryBuilder ExceptText()
    {
        return ExceptField("text");
    }
}
#endregion