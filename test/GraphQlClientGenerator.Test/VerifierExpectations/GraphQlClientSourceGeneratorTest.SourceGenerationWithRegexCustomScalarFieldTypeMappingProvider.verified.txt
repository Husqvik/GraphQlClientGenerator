// <auto-generated> This file has been auto generated. </auto-generated>

using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Globalization;
using System.Linq;
using System.Reflection;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
#if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
using Newtonsoft.Json;
using Newtonsoft.Json.Linq;
#endif

namespace SourceGeneratorTestAssembly
{
    #region base classes
    public struct GraphQlFieldMetadata
    {
        public string Name { get; set; }
        public string DefaultAlias { get; set; }
        public bool IsComplex { get; set; }
        public bool IsDeprecated { get; set; }
        public bool RequiresParameters { get; set; }
        public global::System.Type QueryBuilderType { get; set; }
    }
    
    public enum Formatting
    {
        None,
        Indented
    }
    
    public class GraphQlObjectTypeAttribute : global::System.Attribute
    {
        public string TypeName { get; }
    
        public GraphQlObjectTypeAttribute(string typeName) => TypeName = typeName;
    }
    
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    public class QueryBuilderParameterConverter<T> : global::Newtonsoft.Json.JsonConverter
    {
        public override object ReadJson(JsonReader reader, global::System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                default:
                    return (QueryBuilderParameter<T>)(T)serializer.Deserialize(reader, typeof(T));
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
        {
            if (value == null)
                writer.WriteNull();
            else
                serializer.Serialize(writer, ((QueryBuilderParameter<T>)value).Value, typeof(T));
        }
    
        public override bool CanConvert(global::System.Type objectType) => objectType.IsSubclassOf(typeof(QueryBuilderParameter));
    }
    
    public class GraphQlInterfaceJsonConverter : global::Newtonsoft.Json.JsonConverter
    {
        private const string FieldNameType = "__typename";
    
        private static readonly Dictionary<string, global::System.Type> InterfaceTypeMapping =
            typeof(GraphQlInterfaceJsonConverter).Assembly.GetTypes()
                .Select(t => new { Type = t, Attribute = t.GetCustomAttribute<GraphQlObjectTypeAttribute>() })
                .Where(x => x.Attribute != null && x.Type.Namespace == typeof(GraphQlInterfaceJsonConverter).Namespace)
                .ToDictionary(x => x.Attribute.TypeName, x => x.Type);
    
        public override bool CanConvert(global::System.Type objectType) => objectType.IsInterface || objectType.IsArray;
    
        public override object ReadJson(JsonReader reader, global::System.Type objectType, object existingValue, JsonSerializer serializer)
        {
            while (reader.TokenType == JsonToken.Comment)
                reader.Read();
    
            switch (reader.TokenType)
            {
                case JsonToken.Null:
                    return null;
    
                case JsonToken.StartObject:
                    var jObject = JObject.Load(reader);
                    if (!jObject.TryGetValue(FieldNameType, out var token) || token.Type != JTokenType.String)
                        throw CreateJsonReaderException(reader, $"\"{GetType().FullName}\" requires JSON object to contain \"{FieldNameType}\" field with type name");
    
                    var typeName = token.Value<string>();
                    if (!InterfaceTypeMapping.TryGetValue(typeName, out var type))
                        throw CreateJsonReaderException(reader, $"type \"{typeName}\" not found");
    
                    using (reader = CloneReader(jObject, reader))
                        return serializer.Deserialize(reader, type);
    
                case JsonToken.StartArray:
                    var elementType = GetElementType(objectType);
                    if (elementType == null)
                        throw CreateJsonReaderException(reader, $"array element type could not be resolved for type \"{objectType.FullName}\"");
    
                    return ReadArray(reader, objectType, elementType, serializer);
    
                default:
                    throw CreateJsonReaderException(reader, $"unrecognized token: {reader.TokenType}");
            }
        }
    
        public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer) => serializer.Serialize(writer, value);
    
        private static JsonReader CloneReader(JToken jToken, JsonReader reader)
        {
            var jObjectReader = jToken.CreateReader();
            jObjectReader.Culture = reader.Culture;
            jObjectReader.CloseInput = reader.CloseInput;
            jObjectReader.SupportMultipleContent = reader.SupportMultipleContent;
            jObjectReader.DateTimeZoneHandling = reader.DateTimeZoneHandling;
            jObjectReader.FloatParseHandling = reader.FloatParseHandling;
            jObjectReader.DateFormatString = reader.DateFormatString;
            jObjectReader.DateParseHandling = reader.DateParseHandling;
            return jObjectReader;
        }
    
        private static JsonReaderException CreateJsonReaderException(JsonReader reader, string message)
        {
            if (reader is IJsonLineInfo lineInfo && lineInfo.HasLineInfo())
                return new JsonReaderException(message, reader.Path, lineInfo.LineNumber, lineInfo.LinePosition, null);
    
            return new JsonReaderException(message);
        }
    
        private static global::System.Type GetElementType(global::System.Type arrayOrGenericContainer) =>
            arrayOrGenericContainer.IsArray ? arrayOrGenericContainer.GetElementType() : arrayOrGenericContainer.GenericTypeArguments.FirstOrDefault();
    
        private IList ReadArray(JsonReader reader, global::System.Type targetType, global::System.Type elementType, JsonSerializer serializer)
        {
            var list = CreateCompatibleList(targetType, elementType);
            while (reader.Read() && reader.TokenType != JsonToken.EndArray)
                list.Add(ReadJson(reader, elementType, null, serializer));
    
            if (!targetType.IsArray)
                return list;
    
            var array = Array.CreateInstance(elementType, list.Count);
            list.CopyTo(array, 0);
            return array;
        }
    
        private static IList CreateCompatibleList(global::System.Type targetContainerType, global::System.Type elementType) =>
            (IList)Activator.CreateInstance(targetContainerType.IsArray || targetContainerType.IsAbstract ? typeof(List<>).MakeGenericType(elementType) : targetContainerType);
    }
    #endif
    
    internal static class GraphQlQueryHelper
    {
        private static readonly Regex RegexGraphQlIdentifier = new Regex(@"^[_A-Za-z][_0-9A-Za-z]*$", RegexOptions.Compiled);
        private static readonly Regex RegexEscapeGraphQlString = new Regex(@"[\\\""/\b\f\n\r\t]", RegexOptions.Compiled);
    
        public static string GetIndentation(int level, byte indentationSize)
        {
            return new String(' ', level * indentationSize);
        }
    
        public static string EscapeGraphQlStringValue(string value)
        {
            return RegexEscapeGraphQlString.Replace(value, m => @$"\{GetEscapeSequence(m.Value)}");
        }
    
        private static string GetEscapeSequence(string input)
        {
            switch (input)
            {
                case "\\":
                    return "\\";
                case "\"":
                    return "\"";
                case "/":
                    return "/";
                case "\b":
                    return "b";
                case "\f":
                    return "f";
                case "\n":
                    return "n";
                case "\r":
                    return "r";
                case "\t":
                    return "t";
                default:
                    throw new InvalidOperationException($"invalid character: {input}");
            }
        }
    
        public static string BuildArgumentValue(object value, string formatMask, GraphQlBuilderOptions options, int level)
        {
            var serializer = options.ArgumentBuilder ?? DefaultGraphQlArgumentBuilder.Instance;
            if (serializer.TryBuild(new GraphQlArgumentBuilderContext { Value = value, FormatMask = formatMask, Options = options, Level = level }, out var serializedValue))
                return serializedValue;
    
            if (value is null)
                return "null";
    
            var enumerable = value as IEnumerable;
            if (!String.IsNullOrEmpty(formatMask) && enumerable == null)
                return
                    value is IFormattable formattable
                        ? $"\"{EscapeGraphQlStringValue(formattable.ToString(formatMask, CultureInfo.InvariantCulture))}\""
                        : throw new ArgumentException($"Value must implement {nameof(IFormattable)} interface to use a format mask. ", nameof(value));
    
            if (value is Enum @enum)
                return ConvertEnumToString(@enum);
    
            if (value is bool @bool)
                return @bool ? "true" : "false";
    
            if (value is DateTime dateTime)
                return $"\"{dateTime.ToString("O")}\"";
    
            if (value is DateTimeOffset dateTimeOffset)
                return $"\"{dateTimeOffset.ToString("O")}\"";
    
            if (value is IGraphQlInputObject inputObject)
                return BuildInputObject(inputObject, options, level + 2);
    
            if (value is Guid)
                return $"\"{value}\"";
    
            if (value is String @string)
                return $"\"{EscapeGraphQlStringValue(@string)}\"";
    
            if (enumerable != null)
                return BuildEnumerableArgument(enumerable, formatMask, options, level, '[', ']');
    
            if (value is short || value is ushort || value is byte || value is int || value is uint || value is long || value is ulong || value is float || value is double || value is decimal)
                return Convert.ToString(value, CultureInfo.InvariantCulture);
    
            var argumentValue = EscapeGraphQlStringValue(Convert.ToString(value, CultureInfo.InvariantCulture));
            return $"\"{argumentValue}\"";
        }
    
        public static string BuildEnumerableArgument(IEnumerable enumerable, string formatMask, GraphQlBuilderOptions options, int level, char openingSymbol, char closingSymbol)
        {
            var builder = new StringBuilder();
            builder.Append(openingSymbol);
            var delimiter = String.Empty;
            foreach (var item in enumerable)
            {
                builder.Append(delimiter);
    
                if (options.Formatting == Formatting.Indented)
                {
                    builder.AppendLine();
                    builder.Append(GetIndentation(level + 1, options.IndentationSize));
                }
    
                builder.Append(BuildArgumentValue(item, formatMask, options, level));
                delimiter = ",";
            }
    
            builder.Append(closingSymbol);
            return builder.ToString();
        }
    
        public static string BuildInputObject(IGraphQlInputObject inputObject, GraphQlBuilderOptions options, int level)
        {
            var builder = new StringBuilder();
            builder.Append("{");
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            string valueSeparator;
            if (isIndentedFormatting)
            {
                builder.AppendLine();
                valueSeparator = ": ";
            }
            else
                valueSeparator = ":";
    
            var separator = String.Empty;
            foreach (var propertyValue in inputObject.GetPropertyValues())
            {
                var queryBuilderParameter = propertyValue.Value as QueryBuilderParameter;
                var value =
                    queryBuilderParameter?.Name != null
                        ? $"${queryBuilderParameter.Name}"
                        : BuildArgumentValue(queryBuilderParameter == null ? propertyValue.Value : queryBuilderParameter.Value, propertyValue.FormatMask, options, level);
    
                builder.Append(isIndentedFormatting ? GetIndentation(level, options.IndentationSize) : separator);
                builder.Append(propertyValue.Name);
                builder.Append(valueSeparator);
                builder.Append(value);
    
                separator = ",";
    
                if (isIndentedFormatting)
                    builder.AppendLine();
            }
    
            if (isIndentedFormatting)
                builder.Append(GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        public static string BuildDirective(GraphQlDirective directive, GraphQlBuilderOptions options, int level)
        {
            if (directive == null)
                return String.Empty;
    
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
            builder.Append(indentationSpace);
            builder.Append("@");
            builder.Append(directive.Name);
            builder.Append("(");
    
            string separator = null;
            foreach (var kvp in directive.Arguments)
            {
                var argumentName = kvp.Key;
                var argument = kvp.Value;
    
                builder.Append(separator);
                builder.Append(argumentName);
                builder.Append(":");
                builder.Append(indentationSpace);
    
                if (argument.Name == null)
                    builder.Append(BuildArgumentValue(argument.Value, null, options, level));
                else
                {
                    builder.Append("$");
                    builder.Append(argument.Name);
                }
    
                separator = isIndentedFormatting ? ", " : ",";
            }
    
            builder.Append(")");
            return builder.ToString();
        }
    
        public static void ValidateGraphQlIdentifier(string name, string identifier)
        {
            if (identifier != null && !RegexGraphQlIdentifier.IsMatch(identifier))
                throw new ArgumentException("value must match " + RegexGraphQlIdentifier, name);
        }
    
        private static string ConvertEnumToString(Enum @enum)
        {
            var enumMember = @enum.GetType().GetField(@enum.ToString());
            if (enumMember == null)
                throw new InvalidOperationException("enum member resolution failed");
    
            var enumMemberAttribute = (EnumMemberAttribute)enumMember.GetCustomAttribute(typeof(EnumMemberAttribute));
    
            return enumMemberAttribute == null
                ? @enum.ToString()
                : enumMemberAttribute.Value;
        }
    }
    
    public interface IGraphQlArgumentBuilder
    {
        bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString);
    }
    
    public class GraphQlArgumentBuilderContext
    {
        public object Value { get; set; }
        public string FormatMask { get; set; }
        public GraphQlBuilderOptions Options { get; set; }
        public int Level { get; set; }
    }
    
    public class DefaultGraphQlArgumentBuilder : IGraphQlArgumentBuilder
    {
        private static readonly Regex RegexWhiteSpace = new Regex(@"\s", RegexOptions.Compiled);
    
        public static readonly DefaultGraphQlArgumentBuilder Instance = new();
    
        public bool TryBuild(GraphQlArgumentBuilderContext context, out string graphQlString)
        {
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
            if (context.Value is JValue jValue)
            {
                switch (jValue.Type)
                {
                    case JTokenType.Null:
                        graphQlString = "null";
                        return true;
    
                    case JTokenType.Integer:
                    case JTokenType.Float:
                    case JTokenType.Boolean:
                        graphQlString = GraphQlQueryHelper.BuildArgumentValue(jValue.Value, null, context.Options, context.Level);
                        return true;
    
                    case JTokenType.String:
                        graphQlString = $"\"{GraphQlQueryHelper.EscapeGraphQlStringValue((string)jValue.Value)}\"";
                        return true;
    
                    default:
                        graphQlString = $"\"{jValue.Value}\"";
                        return true;
                }
            }
    
            if (context.Value is JProperty jProperty)
            {
                if (RegexWhiteSpace.IsMatch(jProperty.Name))
                    throw new ArgumentException($"JSON object keys used as GraphQL arguments must not contain whitespace; key: {jProperty.Name}");
    
                graphQlString = $"{jProperty.Name}:{(context.Options.Formatting == Formatting.Indented ? " " : null)}{GraphQlQueryHelper.BuildArgumentValue(jProperty.Value, null, context.Options, context.Level)}";
                return true;
            }
    
            if (context.Value is JObject jObject)
            {
                graphQlString = GraphQlQueryHelper.BuildEnumerableArgument(jObject, null, context.Options, context.Level + 1, '{', '}');
                return true;
            }
    #endif
    
            graphQlString = null;
            return false;
        }
    }
    
    internal struct InputPropertyInfo
    {
        public string Name { get; set; }
        public object Value { get; set; }
        public string FormatMask { get; set; }
    }
    
    internal interface IGraphQlInputObject
    {
        IEnumerable<InputPropertyInfo> GetPropertyValues();
    }
    
    public interface IGraphQlQueryBuilder
    {
        void Clear();
        void IncludeAllFields();
        string Build(Formatting formatting = Formatting.None, byte indentationSize = 2);
    }
    
    public struct QueryBuilderArgumentInfo
    {
        public string ArgumentName { get; set; }
        public QueryBuilderParameter ArgumentValue { get; set; }
        public string FormatMask { get; set; }
    }
    
    public abstract class QueryBuilderParameter
    {
        private string _name;
    
        internal string GraphQlTypeName { get; }
        internal object Value { get; set; }
    
        public string Name
        {
            get => _name;
            set
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(Name), value);
                _name = value;
            }
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, object value)
        {
            Name = name?.Trim();
            GraphQlTypeName = graphQlTypeName?.Replace(" ", null).Replace("\t", null).Replace("\n", null).Replace("\r", null);
            Value = value;
        }
    
        protected QueryBuilderParameter(object value) => Value = value;
    }
    
    public class QueryBuilderParameter<T> : QueryBuilderParameter
    {
        public new T Value
        {
            get => base.Value == null ? default : (T)base.Value;
            set => base.Value = value;
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName, T value) : base(name, graphQlTypeName, value)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        protected QueryBuilderParameter(string name, string graphQlTypeName) : base(name, graphQlTypeName, null)
        {
            EnsureGraphQlTypeName(graphQlTypeName);
        }
    
        private QueryBuilderParameter(T value) : base(value)
        {
        }
    
        public void ResetValue() => base.Value = null;
    
        public static implicit operator QueryBuilderParameter<T>(T value) => new QueryBuilderParameter<T>(value);
    
        public static implicit operator T(QueryBuilderParameter<T> parameter) => parameter.Value;
    
        private static void EnsureGraphQlTypeName(string graphQlTypeName)
        {
            if (String.IsNullOrWhiteSpace(graphQlTypeName))
                throw new ArgumentException("value required", nameof(graphQlTypeName));
        }
    }
    
    public class GraphQlQueryParameter<T> : QueryBuilderParameter<T>
    {
        private string _formatMask;
    
        public string FormatMask
        {
            get => _formatMask;
            set => _formatMask =
                typeof(IFormattable).IsAssignableFrom(typeof(T))
                    ? value
                    : throw new InvalidOperationException($"Value must be of {nameof(IFormattable)} type. ");
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName = null)
            : base(name, graphQlTypeName ?? GetGraphQlTypeName(typeof(T)))
        {
        }
    
        public GraphQlQueryParameter(string name, string graphQlTypeName, T defaultValue)
            : base(name, graphQlTypeName, defaultValue)
        {
        }
    
        public GraphQlQueryParameter(string name, T defaultValue, bool isNullable = true)
            : base(name, GetGraphQlTypeName(typeof(T), isNullable), defaultValue)
        {
        }
    
        private static string GetGraphQlTypeName(global::System.Type valueType, bool isNullable)
        {
            var graphQlTypeName = GetGraphQlTypeName(valueType);
            if (!isNullable)
                graphQlTypeName += "!";
    
            return graphQlTypeName;
        }
    
        private static string GetGraphQlTypeName(global::System.Type valueType)
        {
            var nullableUnderlyingType = Nullable.GetUnderlyingType(valueType);
            valueType = nullableUnderlyingType ?? valueType;
    
            if (valueType.IsArray)
            {
                var arrayItemType = GetGraphQlTypeName(valueType.GetElementType());
                return arrayItemType == null ? null : "[" + arrayItemType + "]";
            }
    
            if (typeof(IEnumerable).IsAssignableFrom(valueType))
            {
                var genericArguments = valueType.GetGenericArguments();
                if (genericArguments.Length == 1)
                {
                    var listItemType = GetGraphQlTypeName(valueType.GetGenericArguments()[0]);
                    return listItemType == null ? null : "[" + listItemType + "]";
                }
            }
    
            if (GraphQlTypes.ReverseMapping.TryGetValue(valueType, out var graphQlTypeName))
                return graphQlTypeName;
    
            if (valueType == typeof(string))
                return "String";
    
            var nullableSuffix = nullableUnderlyingType == null ? null : "?";
            graphQlTypeName = GetValueTypeGraphQlTypeName(valueType);
            return graphQlTypeName == null ? null : graphQlTypeName + nullableSuffix;
        }
    
        private static string GetValueTypeGraphQlTypeName(global::System.Type valueType)
        {
            if (valueType == typeof(bool))
                return "Boolean";
    
            if (valueType == typeof(float) || valueType == typeof(double) || valueType == typeof(decimal))
                return "Float";
    
            if (valueType == typeof(Guid))
                return "ID";
    
            if (valueType == typeof(sbyte) || valueType == typeof(byte) || valueType == typeof(short) || valueType == typeof(ushort) || valueType == typeof(int) || valueType == typeof(uint) ||
                valueType == typeof(long) || valueType == typeof(ulong))
                return "Int";
    
            return null;
        }
    }
    
    public abstract class GraphQlDirective
    {
        private readonly Dictionary<string, QueryBuilderParameter> _arguments = new Dictionary<string, QueryBuilderParameter>();
    
        internal IEnumerable<KeyValuePair<string, QueryBuilderParameter>> Arguments => _arguments;
    
        public string Name { get; }
    
        protected GraphQlDirective(string name)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(name), name);
            Name = name;
        }
    
        protected void AddArgument(string name, QueryBuilderParameter value)
        {
            if (value != null)
                _arguments[name] = value;
        }
    }
    
    public class GraphQlBuilderOptions
    {
        public Formatting Formatting { get; set; }
        public byte IndentationSize { get; set; } = 2;
        public IGraphQlArgumentBuilder ArgumentBuilder { get; set; }
    }
    
    public abstract partial class GraphQlQueryBuilder : IGraphQlQueryBuilder
    {
        private readonly Dictionary<string, GraphQlFieldCriteria> _fieldCriteria = new Dictionary<string, GraphQlFieldCriteria>();
    
        private readonly string _operationType;
        private readonly string _operationName;
        private Dictionary<string, GraphQlFragmentCriteria> _fragments;
        private List<QueryBuilderArgumentInfo> _queryParameters;
    
        protected abstract string TypeName { get; }
    
        public abstract IReadOnlyList<GraphQlFieldMetadata> AllFields { get; }
    
        protected GraphQlQueryBuilder(string operationType, string operationName)
        {
            GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(operationName), operationName);
            _operationType = operationType;
            _operationName = operationName;
        }
    
        public virtual void Clear()
        {
            _fieldCriteria.Clear();
            _fragments?.Clear();
            _queryParameters?.Clear();
        }
    
        void IGraphQlQueryBuilder.IncludeAllFields()
        {
            IncludeAllFields();
        }
    
        public string Build(Formatting formatting = Formatting.None, byte indentationSize = 2)
        {
            return Build(new GraphQlBuilderOptions { Formatting = formatting, IndentationSize = indentationSize });
        }
    
        public string Build(GraphQlBuilderOptions options)
        {
            return Build(options, 1);
        }
    
        protected void IncludeAllFields()
        {
            IncludeFields(AllFields.Where(f => !f.RequiresParameters));
        }
    
        protected virtual string Build(GraphQlBuilderOptions options, int level)
        {
            var isIndentedFormatting = options.Formatting == Formatting.Indented;
            var separator = String.Empty;
            var indentationSpace = isIndentedFormatting ? " " : String.Empty;
            var builder = new StringBuilder();
    
            BuildOperationSignature(builder, options, indentationSpace, level);
    
            if (builder.Length > 0 || level > 1)
                builder.Append(indentationSpace);
    
            builder.Append("{");
    
            if (isIndentedFormatting)
                builder.AppendLine();
    
            separator = String.Empty;
    
            foreach (var criteria in _fieldCriteria.Values.Concat(_fragments?.Values ?? Enumerable.Empty<GraphQlFragmentCriteria>()))
            {
                var fieldCriteria = criteria.Build(options, level);
                if (isIndentedFormatting)
                    builder.AppendLine(fieldCriteria);
                else if (!String.IsNullOrEmpty(fieldCriteria))
                {
                    builder.Append(separator);
                    builder.Append(fieldCriteria);
                }
    
                separator = ",";
            }
    
            if (isIndentedFormatting)
                builder.Append(GraphQlQueryHelper.GetIndentation(level - 1, options.IndentationSize));
    
            builder.Append("}");
    
            return builder.ToString();
        }
    
        private void BuildOperationSignature(StringBuilder builder, GraphQlBuilderOptions options, string indentationSpace, int level)
        {
            if (String.IsNullOrEmpty(_operationType))
                return;
    
            builder.Append(_operationType);
    
            if (!String.IsNullOrEmpty(_operationName))
            {
                builder.Append(" ");
                builder.Append(_operationName);
            }
    
            if (_queryParameters?.Count > 0)
            {
                builder.Append(indentationSpace);
                builder.Append("(");
    
                var separator = String.Empty;
                var isIndentedFormatting = options.Formatting == Formatting.Indented;
    
                foreach (var queryParameterInfo in _queryParameters)
                {
                    if (isIndentedFormatting)
                    {
                        builder.AppendLine(separator);
                        builder.Append(GraphQlQueryHelper.GetIndentation(level, options.IndentationSize));
                    }
                    else
                        builder.Append(separator);
    
                    builder.Append("$");
                    builder.Append(queryParameterInfo.ArgumentValue.Name);
                    builder.Append(":");
                    builder.Append(indentationSpace);
    
                    builder.Append(queryParameterInfo.ArgumentValue.GraphQlTypeName);
    
                    if (!queryParameterInfo.ArgumentValue.GraphQlTypeName.EndsWith("!") && queryParameterInfo.ArgumentValue.Value is not null)
                    {
                        builder.Append(indentationSpace);
                        builder.Append("=");
                        builder.Append(indentationSpace);
                        builder.Append(GraphQlQueryHelper.BuildArgumentValue(queryParameterInfo.ArgumentValue.Value, queryParameterInfo.FormatMask, options, 0));
                    }
    
                    if (!isIndentedFormatting)
                        separator = ",";
                }
    
                builder.Append(")");
            }
        }
    
        protected void IncludeScalarField(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlScalarFieldCriteria(fieldName, alias, args, directives);
        }
    
        protected void IncludeObjectField(string fieldName, string alias, GraphQlQueryBuilder objectFieldQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
        {
            _fieldCriteria[alias ?? fieldName] = new GraphQlObjectFieldCriteria(fieldName, alias, objectFieldQueryBuilder, args, directives);
        }
    
        protected void IncludeFragment(GraphQlQueryBuilder objectFieldQueryBuilder, GraphQlDirective[] directives)
        {
            _fragments = _fragments ?? new Dictionary<string, GraphQlFragmentCriteria>();
            _fragments[objectFieldQueryBuilder.TypeName] = new GraphQlFragmentCriteria(objectFieldQueryBuilder, directives);
        }
    
        protected void ExcludeField(string fieldName)
        {
            if (fieldName == null)
                throw new ArgumentNullException(nameof(fieldName));
    
            _fieldCriteria.Remove(fieldName);
        }
    
        protected void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields)
        {
            IncludeFields(fields, 0, new Dictionary<global::System.Type, int>());
        }
    
        private void IncludeFields(IEnumerable<GraphQlFieldMetadata> fields, int level, Dictionary<global::System.Type, int> parentTypeLevel)
        {
            global::System.Type builderType = null;
    
            foreach (var field in fields)
            {
                if (field.QueryBuilderType == null)
                    IncludeScalarField(field.Name, field.DefaultAlias, null, null);
                else
                {
                    int parentLevel;
                    if (_operationType != null && GetType() == field.QueryBuilderType ||
                        parentTypeLevel.TryGetValue(field.QueryBuilderType, out parentLevel) && parentLevel < level)
                        continue;
    
                    if (builderType == null)
                    {
                        builderType = GetType();
                        parentLevel = parentTypeLevel.TryGetValue(builderType, out parentLevel) ? parentLevel : level;
                        parentTypeLevel[builderType] = Math.Min(level, parentLevel);
                    }
    
                    var queryBuilder = InitializeChildQueryBuilder(field.QueryBuilderType, level, parentTypeLevel);
    
                    foreach (var includeFragmentMethod in field.QueryBuilderType.GetMethods().Where(IsIncludeFragmentMethod))
                    {
                        var includeFragmentParameterInfo = includeFragmentMethod.GetParameters();
                        var includeFragmentQueryBuilderType = includeFragmentParameterInfo[0].ParameterType;
                        if (parentTypeLevel.TryGetValue(includeFragmentQueryBuilderType, out parentLevel))
                            continue;
    
                        var includeFragmentParameters = new object[includeFragmentParameterInfo.Length];
                        includeFragmentParameters[0] = InitializeChildQueryBuilder(includeFragmentQueryBuilderType, level, parentTypeLevel);
                        includeFragmentMethod.Invoke(queryBuilder, includeFragmentParameters);
                    }
    
                    if (queryBuilder._fieldCriteria.Count > 0 || queryBuilder._fragments != null)
                        IncludeObjectField(field.Name, field.DefaultAlias, queryBuilder, null, null);
                }
            }
        }
    
        private static GraphQlQueryBuilder InitializeChildQueryBuilder(global::System.Type queryBuilderType, int level, Dictionary<global::System.Type, int> parentTypeLevel)
        {
            var queryBuilder = (GraphQlQueryBuilder)Activator.CreateInstance(queryBuilderType);
            queryBuilder.IncludeFields(
                queryBuilder.AllFields.Where(f => !f.RequiresParameters),
                level + 1,
                parentTypeLevel);
    
            return queryBuilder;
        }
    
        private static bool IsIncludeFragmentMethod(MethodInfo methodInfo)
        {
            if (!methodInfo.Name.StartsWith("With") || !methodInfo.Name.EndsWith("Fragment"))
                return false;
    
            var parameters = methodInfo.GetParameters();
            return parameters.Count(p => !p.IsOptional) == 1 && parameters[0].ParameterType.IsSubclassOf(typeof(GraphQlQueryBuilder));
        }
    
        protected void AddParameter<T>(GraphQlQueryParameter<T> parameter)
        {
            if (_queryParameters == null)
                _queryParameters = new List<QueryBuilderArgumentInfo>();
    
            _queryParameters.Add(new QueryBuilderArgumentInfo { ArgumentValue = parameter, FormatMask = parameter.FormatMask });
        }
    
        private abstract class GraphQlFieldCriteria
        {
            private readonly IList<QueryBuilderArgumentInfo> _args;
            private readonly GraphQlDirective[] _directives;
    
            protected readonly string FieldName;
            protected readonly string Alias;
    
            protected static string GetIndentation(Formatting formatting, int level, byte indentationSize) =>
                formatting == Formatting.Indented ? GraphQlQueryHelper.GetIndentation(level, indentationSize) : null;
    
            protected GraphQlFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
            {
                GraphQlQueryHelper.ValidateGraphQlIdentifier(nameof(alias), alias);
                FieldName = fieldName;
                Alias = alias;
                _args = args;
                _directives = directives;
            }
    
            public abstract string Build(GraphQlBuilderOptions options, int level);
    
            protected string BuildArgumentClause(GraphQlBuilderOptions options, int level)
            {
                var separator = options.Formatting == Formatting.Indented ? " " : null;
                var argumentCount = _args?.Count ?? 0;
                if (argumentCount == 0)
                    return String.Empty;
    
                var arguments =
                    _args.Select(
                        a => $"{a.ArgumentName}:{separator}{(a.ArgumentValue.Name == null ? GraphQlQueryHelper.BuildArgumentValue(a.ArgumentValue.Value, a.FormatMask, options, level) : $"${a.ArgumentValue.Name}")}");
    
                return $"({String.Join($",{separator}", arguments)})";
            }
    
            protected string BuildDirectiveClause(GraphQlBuilderOptions options, int level) =>
                _directives == null ? null : String.Concat(_directives.Select(d => d == null ? null : GraphQlQueryHelper.BuildDirective(d, options, level)));
    
            protected static string BuildAliasPrefix(string alias, Formatting formatting)
            {
                var separator = formatting == Formatting.Indented ? " " : String.Empty;
                return String.IsNullOrWhiteSpace(alias) ? null : $"{alias}:{separator}";
            }
        }
    
        private class GraphQlScalarFieldCriteria : GraphQlFieldCriteria
        {
            public GraphQlScalarFieldCriteria(string fieldName, string alias, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                GetIndentation(options.Formatting, level, options.IndentationSize) +
                BuildAliasPrefix(Alias, options.Formatting) +
                FieldName +
                BuildArgumentClause(options, level) +
                BuildDirectiveClause(options, level);
        }
    
        private class GraphQlObjectFieldCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlObjectFieldCriteria(string fieldName, string alias, GraphQlQueryBuilder objectQueryBuilder, IList<QueryBuilderArgumentInfo> args, GraphQlDirective[] directives)
                : base(fieldName, alias, args, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count > 0 || _objectQueryBuilder._fragments?.Count > 0
                    ? GetIndentation(options.Formatting, level, options.IndentationSize) + BuildAliasPrefix(Alias, options.Formatting) + FieldName +
                      BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1)
                    : null;
        }
    
        private class GraphQlFragmentCriteria : GraphQlFieldCriteria
        {
            private readonly GraphQlQueryBuilder _objectQueryBuilder;
    
            public GraphQlFragmentCriteria(GraphQlQueryBuilder objectQueryBuilder, GraphQlDirective[] directives) : base(objectQueryBuilder.TypeName, null, null, directives)
            {
                _objectQueryBuilder = objectQueryBuilder;
            }
    
            public override string Build(GraphQlBuilderOptions options, int level) =>
                _objectQueryBuilder._fieldCriteria.Count == 0
                    ? null
                    : GetIndentation(options.Formatting, level, options.IndentationSize) + "..." + (options.Formatting == Formatting.Indented ? " " : null) + "on " +
                      FieldName + BuildArgumentClause(options, level) + BuildDirectiveClause(options, level) + _objectQueryBuilder.Build(options, level + 1);
        }
    }
    
    public abstract partial class GraphQlQueryBuilder<TQueryBuilder> : GraphQlQueryBuilder where TQueryBuilder : GraphQlQueryBuilder<TQueryBuilder>
    {
        protected GraphQlQueryBuilder(string operationType = null, string operationName = null) : base(operationType, operationName)
        {
        }
    
        /// <summary>
        /// Includes all fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllFields()
        {
            IncludeAllFields();
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes all scalar fields that don't require parameters into the query.
        /// </summary>
        public TQueryBuilder WithAllScalarFields()
        {
            IncludeFields(AllFields.Where(f => !f.IsComplex && !f.RequiresParameters));
            return (TQueryBuilder)this;
        }
    
        public TQueryBuilder ExceptField(string fieldName)
        {
            ExcludeField(fieldName);
            return (TQueryBuilder)this;
        }
    
        /// <summary>
        /// Includes "__typename" field; included automatically for interface and union types.
        /// </summary>
        public TQueryBuilder WithTypeName(string alias = null, params GraphQlDirective[] directives)
        {
            IncludeScalarField("__typename", alias, null, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithScalarField(string fieldName, string alias, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeScalarField(fieldName, alias, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithObjectField(string fieldName, string alias, GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives, IList<QueryBuilderArgumentInfo> args = null)
        {
            IncludeObjectField(fieldName, alias, queryBuilder, args, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithFragment(GraphQlQueryBuilder queryBuilder, GraphQlDirective[] directives)
        {
            IncludeFragment(queryBuilder, directives);
            return (TQueryBuilder)this;
        }
    
        protected TQueryBuilder WithParameterInternal<T>(GraphQlQueryParameter<T> parameter)
        {
            AddParameter(parameter);
            return (TQueryBuilder)this;
        }
    }
    
    public abstract class GraphQlResponse<TDataContract>
    {
        public TDataContract Data { get; set; }
        public ICollection<GraphQlQueryError> Errors { get; set; }
    }
    
    public class GraphQlQueryError
    {
        public string Message { get; set; }
        public ICollection<GraphQlErrorLocation> Locations { get; set; }
    }
    
    public class GraphQlErrorLocation
    {
        public int Line { get; set; }
        public int Column { get; set; }
    }
    #endregion

    #region GraphQL type helpers
    public static class GraphQlTypes
    {
        public const string Boolean = "Boolean";
        public const string Float = "Float";
        public const string Id = "ID";
        public const string Int = "Int";
        public const string String = "String";

        public const string AppScreen = "AppScreen";
        public const string EnergyResolution = "EnergyResolution";
        public const string HeatingSource = "HeatingSource";
        public const string HomeAvatar = "HomeAvatar";
        public const string HomeType = "HomeType";
        public const string PriceLevel = "PriceLevel";
        public const string PriceResolution = "PriceResolution";

        public const string Address = "Address";
        public const string Consumption = "Consumption";
        public const string ContactInfo = "ContactInfo";
        public const string Home = "Home";
        public const string HomeConsumptionConnection = "HomeConsumptionConnection";
        public const string HomeConsumptionEdge = "HomeConsumptionEdge";
        public const string HomeConsumptionPageInfo = "HomeConsumptionPageInfo";
        public const string HomeFeatures = "HomeFeatures";
        public const string HomeProductionConnection = "HomeProductionConnection";
        public const string HomeProductionEdge = "HomeProductionEdge";
        public const string HomeProductionPageInfo = "HomeProductionPageInfo";
        public const string LegalEntity = "LegalEntity";
        public const string LiveMeasurement = "LiveMeasurement";
        public const string MeteringPointData = "MeteringPointData";
        public const string MeterReadingResponse = "MeterReadingResponse";
        public const string Price = "Price";
        public const string PriceInfo = "PriceInfo";
        public const string Production = "Production";
        public const string PushNotificationResponse = "PushNotificationResponse";
        public const string Query = "Query";
        public const string RootMutation = "RootMutation";
        public const string RootSubscription = "RootSubscription";
        public const string Subscription = "Subscription";
        public const string SubscriptionPriceConnection = "SubscriptionPriceConnection";
        public const string SubscriptionPriceConnectionPageInfo = "SubscriptionPriceConnectionPageInfo";
        public const string SubscriptionPriceEdge = "SubscriptionPriceEdge";
        public const string Viewer = "Viewer";

        public const string MeterReadingInput = "MeterReadingInput";
        public const string PushNotificationInput = "PushNotificationInput";
        public const string UpdateHomeInput = "UpdateHomeInput";

        public const string PageInfo = "PageInfo";

        public static readonly IReadOnlyDictionary<global::System.Type, string> ReverseMapping =
            new Dictionary<global::System.Type, string>
            {
                { typeof(string), "String" },
                { typeof(DateTime), "String" },
                { typeof(double), "Float" },
                { typeof(int), "Int" },
                { typeof(bool), "Boolean" },
                { typeof(SourceGeneratedMeterReadingInputV2), "MeterReadingInput" },
                { typeof(SourceGeneratedPushNotificationInputV2), "PushNotificationInput" },
                { typeof(SourceGeneratedUpdateHomeInputV2), "UpdateHomeInput" }
            };
    }
    #endregion

    #region enums
    public enum SourceGeneratedAppScreenV2
    {
        [EnumMember(Value = "HOME")] Home,
        [EnumMember(Value = "REPORTS")] Reports,
        [EnumMember(Value = "CONSUMPTION")] Consumption,
        [EnumMember(Value = "COMPARISON")] Comparison,
        [EnumMember(Value = "DISAGGREGATION")] Disaggregation,
        [EnumMember(Value = "HOME_PROFILE")] HomeProfile,
        [EnumMember(Value = "CUSTOMER_PROFILE")] CustomerProfile,
        [EnumMember(Value = "METER_READING")] MeterReading,
        [EnumMember(Value = "NOTIFICATIONS")] Notifications,
        [EnumMember(Value = "INVOICES")] Invoices
    }

    public enum SourceGeneratedEnergyResolutionV2
    {
        [EnumMember(Value = "HOURLY")] Hourly,
        [EnumMember(Value = "DAILY")] Daily,
        [EnumMember(Value = "WEEKLY")] Weekly,
        [EnumMember(Value = "MONTHLY")] Monthly,
        [EnumMember(Value = "ANNUAL")] Annual
    }

    public enum SourceGeneratedHeatingSourceV2
    {
        [EnumMember(Value = "AIR2AIR_HEATPUMP")] Air2AirHeatpump,
        [EnumMember(Value = "ELECTRICITY")] Electricity,
        [EnumMember(Value = "GROUND")] Ground,
        [EnumMember(Value = "DISTRICT_HEATING")] DistrictHeating,
        [EnumMember(Value = "ELECTRIC_BOILER")] ElectricBoiler,
        [EnumMember(Value = "AIR2WATER_HEATPUMP")] Air2WaterHeatpump,
        [EnumMember(Value = "OTHER")] Other
    }

    public enum SourceGeneratedHomeAvatarV2
    {
        [EnumMember(Value = "APARTMENT")] Apartment,
        [EnumMember(Value = "ROWHOUSE")] Rowhouse,
        [EnumMember(Value = "FLOORHOUSE1")] Floorhouse1,
        [EnumMember(Value = "FLOORHOUSE2")] Floorhouse2,
        [EnumMember(Value = "FLOORHOUSE3")] Floorhouse3,
        [EnumMember(Value = "COTTAGE")] Cottage,
        [EnumMember(Value = "CASTLE")] Castle
    }

    public enum SourceGeneratedHomeTypeV2
    {
        [EnumMember(Value = "APARTMENT")] Apartment,
        [EnumMember(Value = "ROWHOUSE")] Rowhouse,
        [EnumMember(Value = "HOUSE")] House,
        [EnumMember(Value = "COTTAGE")] Cottage
    }

    /// <summary>
    /// Price level based on trailing price average (3 days for hourly values and 30 days for daily values)
    /// </summary>
    public enum SourceGeneratedPriceLevelV2
    {
        /// <summary>
        /// The price is greater than 90 % and smaller than 115 % compared to average price.
        /// </summary>
        [EnumMember(Value = "NORMAL")] Normal,
        /// <summary>
        /// The price is greater than 60 % and smaller or equal to 90 % compared to average price.
        /// </summary>
        [EnumMember(Value = "CHEAP")] Cheap,
        /// <summary>
        /// The price is smaller or equal to 60 % compared to average price.
        /// </summary>
        [EnumMember(Value = "VERY_CHEAP")] VeryCheap,
        /// <summary>
        /// The price is greater or equal to 115 % and smaller than 140 % compared to average price.
        /// </summary>
        [EnumMember(Value = "EXPENSIVE")] Expensive,
        /// <summary>
        /// The price is greater or equal to 140 % compared to average price.
        /// </summary>
        [EnumMember(Value = "VERY_EXPENSIVE")] VeryExpensive
    }

    public enum SourceGeneratedPriceResolutionV2
    {
        [EnumMember(Value = "HOURLY")] Hourly,
        [EnumMember(Value = "DAILY")] Daily
    }
    #endregion

    #nullable enable
    #region directives
    /// <summary>
    /// Directs the executor to include this field or fragment only when the `if` argument is true.
    /// </summary>
    public class IncludeDirective : GraphQlDirective
    {
        /// <param name="if">Included when true.</param>
        public IncludeDirective(QueryBuilderParameter<bool> @if) : base("include")
        {
            AddArgument("if", @if);
        }
    }

    /// <summary>
    /// Directs the executor to skip this field or fragment when the `if` argument is true.
    /// </summary>
    public class SkipDirective : GraphQlDirective
    {
        /// <param name="if">Skipped when true.</param>
        public SkipDirective(QueryBuilderParameter<bool> @if) : base("skip")
        {
            AddArgument("if", @if);
        }
    }
    #endregion

    #region builder classes
    public partial class SourceGeneratedAddressQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedAddressQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "address1" },
            new() { Name = "address2" },
            new() { Name = "address3" },
            new() { Name = "city" },
            new() { Name = "postalCode" },
            new() { Name = "country" },
            new() { Name = "latitude" },
            new() { Name = "longitude" }
        };

        protected override string TypeName => "Address";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedAddressQueryBuilderV2 WithAddress1(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("address1", alias, [skip, include]);

        public SourceGeneratedAddressQueryBuilderV2 ExceptAddress1() => ExceptField("address1");

        public SourceGeneratedAddressQueryBuilderV2 WithAddress2(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("address2", alias, [skip, include]);

        public SourceGeneratedAddressQueryBuilderV2 ExceptAddress2() => ExceptField("address2");

        public SourceGeneratedAddressQueryBuilderV2 WithAddress3(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("address3", alias, [skip, include]);

        public SourceGeneratedAddressQueryBuilderV2 ExceptAddress3() => ExceptField("address3");

        public SourceGeneratedAddressQueryBuilderV2 WithCity(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("city", alias, [skip, include]);

        public SourceGeneratedAddressQueryBuilderV2 ExceptCity() => ExceptField("city");

        public SourceGeneratedAddressQueryBuilderV2 WithPostalCode(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("postalCode", alias, [skip, include]);

        public SourceGeneratedAddressQueryBuilderV2 ExceptPostalCode() => ExceptField("postalCode");

        public SourceGeneratedAddressQueryBuilderV2 WithCountry(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("country", alias, [skip, include]);

        public SourceGeneratedAddressQueryBuilderV2 ExceptCountry() => ExceptField("country");

        public SourceGeneratedAddressQueryBuilderV2 WithLatitude(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("latitude", alias, [skip, include]);

        public SourceGeneratedAddressQueryBuilderV2 ExceptLatitude() => ExceptField("latitude");

        public SourceGeneratedAddressQueryBuilderV2 WithLongitude(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("longitude", alias, [skip, include]);

        public SourceGeneratedAddressQueryBuilderV2 ExceptLongitude() => ExceptField("longitude");
    }

    public partial class SourceGeneratedConsumptionEntryQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedConsumptionEntryQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "from" },
            new() { Name = "to" },
            new() { Name = "unitPrice" },
            new() { Name = "unitPriceVAT" },
            new() { Name = "consumption" },
            new() { Name = "consumptionUnit" },
            new() { Name = "totalCost", IsDeprecated = true },
            new() { Name = "unitCost", IsDeprecated = true },
            new() { Name = "cost" },
            new() { Name = "currency" }
        };

        protected override string TypeName => "Consumption";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithFrom(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("from", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptFrom() => ExceptField("from");

        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithTo(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("to", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptTo() => ExceptField("to");

        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithUnitPrice(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("unitPrice", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptUnitPrice() => ExceptField("unitPrice");

        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithUnitPriceVat(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("unitPriceVAT", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptUnitPriceVat() => ExceptField("unitPriceVAT");

        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithConsumption(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("consumption", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptConsumption() => ExceptField("consumption");

        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithConsumptionUnit(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("consumptionUnit", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptConsumptionUnit() => ExceptField("consumptionUnit");

        [Obsolete(@"use cost instead.")]
        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithTotalCost(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("totalCost", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptTotalCost() => ExceptField("totalCost");

        [Obsolete(@"use cost instead")]
        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithUnitCost(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("unitCost", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptUnitCost() => ExceptField("unitCost");

        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithCost(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("cost", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptCost() => ExceptField("cost");

        public SourceGeneratedConsumptionEntryQueryBuilderV2 WithCurrency(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currency", alias, [skip, include]);

        public SourceGeneratedConsumptionEntryQueryBuilderV2 ExceptCurrency() => ExceptField("currency");
    }

    public partial class SourceGeneratedContactInfoQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedContactInfoQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "email" },
            new() { Name = "mobile" }
        };

        protected override string TypeName => "ContactInfo";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedContactInfoQueryBuilderV2 WithEmail(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("email", alias, [skip, include]);

        public SourceGeneratedContactInfoQueryBuilderV2 ExceptEmail() => ExceptField("email");

        public SourceGeneratedContactInfoQueryBuilderV2 WithMobile(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("mobile", alias, [skip, include]);

        public SourceGeneratedContactInfoQueryBuilderV2 ExceptMobile() => ExceptField("mobile");
    }

    public partial class SourceGeneratedHomeQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedHomeQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "timeZone" },
            new() { Name = "appNickname" },
            new() { Name = "appAvatar" },
            new() { Name = "size" },
            new() { Name = "type" },
            new() { Name = "numberOfResidents" },
            new() { Name = "primaryHeatingSource" },
            new() { Name = "hasVentilationSystem" },
            new() { Name = "mainFuseSize" },
            new() { Name = "address", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedAddressQueryBuilderV2) },
            new() { Name = "owner", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedLegalEntityQueryBuilderV2) },
            new() { Name = "meteringPointData", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedMeteringPointDataQueryBuilderV2) },
            new() { Name = "currentSubscription", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedSubscriptionQueryBuilderV2) },
            new() { Name = "subscriptions", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedSubscriptionQueryBuilderV2) },
            new() { Name = "consumption", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeConsumptionConnectionQueryBuilderV2) },
            new() { Name = "production", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeProductionConnectionQueryBuilderV2) },
            new() { Name = "features", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeFeaturesQueryBuilderV2) }
        };

        protected override string TypeName => "Home";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedHomeQueryBuilderV2 WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("id", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptId() => ExceptField("id");

        public SourceGeneratedHomeQueryBuilderV2 WithTimeZone(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("timeZone", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptTimeZone() => ExceptField("timeZone");

        public SourceGeneratedHomeQueryBuilderV2 WithAppNickname(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("appNickname", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptAppNickname() => ExceptField("appNickname");

        public SourceGeneratedHomeQueryBuilderV2 WithAppAvatar(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("appAvatar", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptAppAvatar() => ExceptField("appAvatar");

        public SourceGeneratedHomeQueryBuilderV2 WithSize(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("size", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptSize() => ExceptField("size");

        public SourceGeneratedHomeQueryBuilderV2 WithType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("type", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptType() => ExceptField("type");

        public SourceGeneratedHomeQueryBuilderV2 WithNumberOfResidents(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("numberOfResidents", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptNumberOfResidents() => ExceptField("numberOfResidents");

        public SourceGeneratedHomeQueryBuilderV2 WithPrimaryHeatingSource(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("primaryHeatingSource", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptPrimaryHeatingSource() => ExceptField("primaryHeatingSource");

        public SourceGeneratedHomeQueryBuilderV2 WithHasVentilationSystem(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasVentilationSystem", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptHasVentilationSystem() => ExceptField("hasVentilationSystem");

        public SourceGeneratedHomeQueryBuilderV2 WithMainFuseSize(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("mainFuseSize", alias, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptMainFuseSize() => ExceptField("mainFuseSize");

        public SourceGeneratedHomeQueryBuilderV2 WithAddress(SourceGeneratedAddressQueryBuilderV2 addressQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("address", alias, addressQueryBuilder, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptAddress() => ExceptField("address");

        public SourceGeneratedHomeQueryBuilderV2 WithOwner(SourceGeneratedLegalEntityQueryBuilderV2 legalEntityQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("owner", alias, legalEntityQueryBuilder, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptOwner() => ExceptField("owner");

        public SourceGeneratedHomeQueryBuilderV2 WithMeteringPointData(SourceGeneratedMeteringPointDataQueryBuilderV2 meteringPointDataQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("meteringPointData", alias, meteringPointDataQueryBuilder, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptMeteringPointData() => ExceptField("meteringPointData");

        public SourceGeneratedHomeQueryBuilderV2 WithCurrentSubscription(SourceGeneratedSubscriptionQueryBuilderV2 subscriptionQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("currentSubscription", alias, subscriptionQueryBuilder, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptCurrentSubscription() => ExceptField("currentSubscription");

        public SourceGeneratedHomeQueryBuilderV2 WithSubscriptions(SourceGeneratedSubscriptionQueryBuilderV2 subscriptionQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("subscriptions", alias, subscriptionQueryBuilder, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptSubscriptions() => ExceptField("subscriptions");

        public SourceGeneratedHomeQueryBuilderV2 WithConsumption(SourceGeneratedHomeConsumptionConnectionQueryBuilderV2 homeConsumptionConnectionQueryBuilder, QueryBuilderParameter<SourceGeneratedEnergyResolutionV2> resolution, QueryBuilderParameter<int?>? first = null, QueryBuilderParameter<int?>? last = null, QueryBuilderParameter<string?>? before = null, QueryBuilderParameter<string?>? after = null, QueryBuilderParameter<bool?>? filterEmptyNodes = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new() { ArgumentName = "resolution", ArgumentValue = resolution} );
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new() { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new() { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            if (filterEmptyNodes != null)
                args.Add(new() { ArgumentName = "filterEmptyNodes", ArgumentValue = filterEmptyNodes} );

            return WithObjectField("consumption", alias, homeConsumptionConnectionQueryBuilder, [skip, include], args);
        }

        public SourceGeneratedHomeQueryBuilderV2 ExceptConsumption() => ExceptField("consumption");

        public SourceGeneratedHomeQueryBuilderV2 WithProduction(SourceGeneratedHomeProductionConnectionQueryBuilderV2 homeProductionConnectionQueryBuilder, QueryBuilderParameter<SourceGeneratedEnergyResolutionV2> resolution, QueryBuilderParameter<int?>? first = null, QueryBuilderParameter<int?>? last = null, QueryBuilderParameter<string?>? before = null, QueryBuilderParameter<string?>? after = null, QueryBuilderParameter<bool?>? filterEmptyNodes = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new() { ArgumentName = "resolution", ArgumentValue = resolution} );
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new() { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new() { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            if (filterEmptyNodes != null)
                args.Add(new() { ArgumentName = "filterEmptyNodes", ArgumentValue = filterEmptyNodes} );

            return WithObjectField("production", alias, homeProductionConnectionQueryBuilder, [skip, include], args);
        }

        public SourceGeneratedHomeQueryBuilderV2 ExceptProduction() => ExceptField("production");

        public SourceGeneratedHomeQueryBuilderV2 WithFeatures(SourceGeneratedHomeFeaturesQueryBuilderV2 homeFeaturesQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("features", alias, homeFeaturesQueryBuilder, [skip, include]);

        public SourceGeneratedHomeQueryBuilderV2 ExceptFeatures() => ExceptField("features");
    }

    public partial class SourceGeneratedHomeConsumptionConnectionQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedHomeConsumptionConnectionQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2) },
            new() { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedConsumptionEntryQueryBuilderV2) },
            new() { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeConsumptionEdgeQueryBuilderV2) }
        };

        protected override string TypeName => "HomeConsumptionConnection";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedHomeConsumptionConnectionQueryBuilderV2 WithPageInfo(SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 homeConsumptionPageInfoQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("pageInfo", alias, homeConsumptionPageInfoQueryBuilder, [skip, include]);

        public SourceGeneratedHomeConsumptionConnectionQueryBuilderV2 ExceptPageInfo() => ExceptField("pageInfo");

        public SourceGeneratedHomeConsumptionConnectionQueryBuilderV2 WithNodes(SourceGeneratedConsumptionEntryQueryBuilderV2 consumptionEntryQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("nodes", alias, consumptionEntryQueryBuilder, [skip, include]);

        public SourceGeneratedHomeConsumptionConnectionQueryBuilderV2 ExceptNodes() => ExceptField("nodes");

        public SourceGeneratedHomeConsumptionConnectionQueryBuilderV2 WithEdges(SourceGeneratedHomeConsumptionEdgeQueryBuilderV2 homeConsumptionEdgeQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("edges", alias, homeConsumptionEdgeQueryBuilder, [skip, include]);

        public SourceGeneratedHomeConsumptionConnectionQueryBuilderV2 ExceptEdges() => ExceptField("edges");
    }

    public partial class SourceGeneratedHomeConsumptionEdgeQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedHomeConsumptionEdgeQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "cursor" },
            new() { Name = "node", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedConsumptionEntryQueryBuilderV2) }
        };

        protected override string TypeName => "HomeConsumptionEdge";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedHomeConsumptionEdgeQueryBuilderV2 WithCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("cursor", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionEdgeQueryBuilderV2 ExceptCursor() => ExceptField("cursor");

        public SourceGeneratedHomeConsumptionEdgeQueryBuilderV2 WithNode(SourceGeneratedConsumptionEntryQueryBuilderV2 consumptionEntryQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("node", alias, consumptionEntryQueryBuilder, [skip, include]);

        public SourceGeneratedHomeConsumptionEdgeQueryBuilderV2 ExceptNode() => ExceptField("node");
    }

    public partial class SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "endCursor" },
            new() { Name = "hasNextPage" },
            new() { Name = "hasPreviousPage" },
            new() { Name = "startCursor" },
            new() { Name = "count" },
            new() { Name = "currency" },
            new() { Name = "totalCost" },
            new() { Name = "energyCost", IsDeprecated = true },
            new() { Name = "totalConsumption" },
            new() { Name = "filtered" }
        };

        protected override string TypeName => "HomeConsumptionPageInfo";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithEndCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("endCursor", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptEndCursor() => ExceptField("endCursor");

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithHasNextPage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasNextPage", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptHasNextPage() => ExceptField("hasNextPage");

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithHasPreviousPage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasPreviousPage", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptHasPreviousPage() => ExceptField("hasPreviousPage");

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithStartCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("startCursor", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptStartCursor() => ExceptField("startCursor");

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("count", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptCount() => ExceptField("count");

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithCurrency(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currency", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptCurrency() => ExceptField("currency");

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithTotalCost(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("totalCost", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptTotalCost() => ExceptField("totalCost");

        [Obsolete(@"redundant")]
        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithEnergyCost(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("energyCost", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptEnergyCost() => ExceptField("energyCost");

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithTotalConsumption(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("totalConsumption", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptTotalConsumption() => ExceptField("totalConsumption");

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 WithFiltered(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("filtered", alias, [skip, include]);

        public SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 ExceptFiltered() => ExceptField("filtered");
    }

    public partial class SourceGeneratedHomeFeaturesQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedHomeFeaturesQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "realTimeConsumptionEnabled" }
        };

        protected override string TypeName => "HomeFeatures";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedHomeFeaturesQueryBuilderV2 WithRealTimeConsumptionEnabled(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("realTimeConsumptionEnabled", alias, [skip, include]);

        public SourceGeneratedHomeFeaturesQueryBuilderV2 ExceptRealTimeConsumptionEnabled() => ExceptField("realTimeConsumptionEnabled");
    }

    public partial class SourceGeneratedHomeProductionConnectionQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedHomeProductionConnectionQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeProductionPageInfoQueryBuilderV2) },
            new() { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedProductionEntryQueryBuilderV2) },
            new() { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeProductionEdgeQueryBuilderV2) }
        };

        protected override string TypeName => "HomeProductionConnection";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedHomeProductionConnectionQueryBuilderV2 WithPageInfo(SourceGeneratedHomeProductionPageInfoQueryBuilderV2 homeProductionPageInfoQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("pageInfo", alias, homeProductionPageInfoQueryBuilder, [skip, include]);

        public SourceGeneratedHomeProductionConnectionQueryBuilderV2 ExceptPageInfo() => ExceptField("pageInfo");

        public SourceGeneratedHomeProductionConnectionQueryBuilderV2 WithNodes(SourceGeneratedProductionEntryQueryBuilderV2 productionEntryQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("nodes", alias, productionEntryQueryBuilder, [skip, include]);

        public SourceGeneratedHomeProductionConnectionQueryBuilderV2 ExceptNodes() => ExceptField("nodes");

        public SourceGeneratedHomeProductionConnectionQueryBuilderV2 WithEdges(SourceGeneratedHomeProductionEdgeQueryBuilderV2 homeProductionEdgeQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("edges", alias, homeProductionEdgeQueryBuilder, [skip, include]);

        public SourceGeneratedHomeProductionConnectionQueryBuilderV2 ExceptEdges() => ExceptField("edges");
    }

    public partial class SourceGeneratedHomeProductionEdgeQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedHomeProductionEdgeQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "cursor" },
            new() { Name = "node", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedProductionEntryQueryBuilderV2) }
        };

        protected override string TypeName => "HomeProductionEdge";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedHomeProductionEdgeQueryBuilderV2 WithCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("cursor", alias, [skip, include]);

        public SourceGeneratedHomeProductionEdgeQueryBuilderV2 ExceptCursor() => ExceptField("cursor");

        public SourceGeneratedHomeProductionEdgeQueryBuilderV2 WithNode(SourceGeneratedProductionEntryQueryBuilderV2 productionEntryQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("node", alias, productionEntryQueryBuilder, [skip, include]);

        public SourceGeneratedHomeProductionEdgeQueryBuilderV2 ExceptNode() => ExceptField("node");
    }

    public partial class SourceGeneratedHomeProductionPageInfoQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedHomeProductionPageInfoQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "endCursor" },
            new() { Name = "hasNextPage" },
            new() { Name = "hasPreviousPage" },
            new() { Name = "startCursor" },
            new() { Name = "count" },
            new() { Name = "currency" },
            new() { Name = "totalProfit" },
            new() { Name = "totalProduction" },
            new() { Name = "filtered" }
        };

        protected override string TypeName => "HomeProductionPageInfo";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithEndCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("endCursor", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptEndCursor() => ExceptField("endCursor");

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithHasNextPage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasNextPage", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptHasNextPage() => ExceptField("hasNextPage");

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithHasPreviousPage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasPreviousPage", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptHasPreviousPage() => ExceptField("hasPreviousPage");

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithStartCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("startCursor", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptStartCursor() => ExceptField("startCursor");

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("count", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptCount() => ExceptField("count");

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithCurrency(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currency", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptCurrency() => ExceptField("currency");

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithTotalProfit(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("totalProfit", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptTotalProfit() => ExceptField("totalProfit");

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithTotalProduction(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("totalProduction", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptTotalProduction() => ExceptField("totalProduction");

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 WithFiltered(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("filtered", alias, [skip, include]);

        public SourceGeneratedHomeProductionPageInfoQueryBuilderV2 ExceptFiltered() => ExceptField("filtered");
    }

    public partial class SourceGeneratedLegalEntityQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedLegalEntityQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "firstName" },
            new() { Name = "isCompany" },
            new() { Name = "name" },
            new() { Name = "middleName" },
            new() { Name = "lastName" },
            new() { Name = "organizationNo" },
            new() { Name = "language" },
            new() { Name = "contactInfo", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedContactInfoQueryBuilderV2) },
            new() { Name = "address", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedAddressQueryBuilderV2) }
        };

        protected override string TypeName => "LegalEntity";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedLegalEntityQueryBuilderV2 WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("id", alias, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptId() => ExceptField("id");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithFirstName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("firstName", alias, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptFirstName() => ExceptField("firstName");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithIsCompany(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("isCompany", alias, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptIsCompany() => ExceptField("isCompany");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptName() => ExceptField("name");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithMiddleName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("middleName", alias, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptMiddleName() => ExceptField("middleName");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithLastName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("lastName", alias, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptLastName() => ExceptField("lastName");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithOrganizationNo(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("organizationNo", alias, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptOrganizationNo() => ExceptField("organizationNo");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithLanguage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("language", alias, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptLanguage() => ExceptField("language");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithContactInfo(SourceGeneratedContactInfoQueryBuilderV2 contactInfoQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("contactInfo", alias, contactInfoQueryBuilder, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptContactInfo() => ExceptField("contactInfo");

        public SourceGeneratedLegalEntityQueryBuilderV2 WithAddress(SourceGeneratedAddressQueryBuilderV2 addressQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("address", alias, addressQueryBuilder, [skip, include]);

        public SourceGeneratedLegalEntityQueryBuilderV2 ExceptAddress() => ExceptField("address");
    }

    public partial class SourceGeneratedLiveMeasurementQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedLiveMeasurementQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "timestamp" },
            new() { Name = "power" },
            new() { Name = "lastMeterConsumption" },
            new() { Name = "accumulatedConsumption" },
            new() { Name = "accumulatedProduction" },
            new() { Name = "accumulatedCost" },
            new() { Name = "accumulatedReward" },
            new() { Name = "currency" },
            new() { Name = "minPower" },
            new() { Name = "averagePower" },
            new() { Name = "maxPower" },
            new() { Name = "powerProduction" },
            new() { Name = "minPowerProduction" },
            new() { Name = "maxPowerProduction" },
            new() { Name = "lastMeterProduction" },
            new() { Name = "voltagePhase1" },
            new() { Name = "voltagePhase2" },
            new() { Name = "voltagePhase3" },
            new() { Name = "currentPhase1" },
            new() { Name = "currentPhase2" },
            new() { Name = "currentPhase3" }
        };

        protected override string TypeName => "LiveMeasurement";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithTimestamp(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("timestamp", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptTimestamp() => ExceptField("timestamp");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithPower(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("power", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptPower() => ExceptField("power");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithLastMeterConsumption(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("lastMeterConsumption", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptLastMeterConsumption() => ExceptField("lastMeterConsumption");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithAccumulatedConsumption(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("accumulatedConsumption", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptAccumulatedConsumption() => ExceptField("accumulatedConsumption");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithAccumulatedProduction(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("accumulatedProduction", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptAccumulatedProduction() => ExceptField("accumulatedProduction");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithAccumulatedCost(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("accumulatedCost", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptAccumulatedCost() => ExceptField("accumulatedCost");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithAccumulatedReward(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("accumulatedReward", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptAccumulatedReward() => ExceptField("accumulatedReward");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithCurrency(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currency", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptCurrency() => ExceptField("currency");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithMinPower(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("minPower", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptMinPower() => ExceptField("minPower");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithAveragePower(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("averagePower", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptAveragePower() => ExceptField("averagePower");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithMaxPower(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("maxPower", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptMaxPower() => ExceptField("maxPower");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithPowerProduction(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("powerProduction", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptPowerProduction() => ExceptField("powerProduction");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithMinPowerProduction(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("minPowerProduction", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptMinPowerProduction() => ExceptField("minPowerProduction");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithMaxPowerProduction(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("maxPowerProduction", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptMaxPowerProduction() => ExceptField("maxPowerProduction");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithLastMeterProduction(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("lastMeterProduction", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptLastMeterProduction() => ExceptField("lastMeterProduction");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithVoltagePhase1(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("voltagePhase1", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptVoltagePhase1() => ExceptField("voltagePhase1");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithVoltagePhase2(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("voltagePhase2", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptVoltagePhase2() => ExceptField("voltagePhase2");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithVoltagePhase3(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("voltagePhase3", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptVoltagePhase3() => ExceptField("voltagePhase3");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithCurrentPhase1(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currentPhase1", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptCurrentPhase1() => ExceptField("currentPhase1");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithCurrentPhase2(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currentPhase2", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptCurrentPhase2() => ExceptField("currentPhase2");

        public SourceGeneratedLiveMeasurementQueryBuilderV2 WithCurrentPhase3(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currentPhase3", alias, [skip, include]);

        public SourceGeneratedLiveMeasurementQueryBuilderV2 ExceptCurrentPhase3() => ExceptField("currentPhase3");
    }

    public partial class SourceGeneratedMeteringPointDataQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedMeteringPointDataQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "consumptionEan" },
            new() { Name = "gridCompany" },
            new() { Name = "gridAreaCode" },
            new() { Name = "priceAreaCode" },
            new() { Name = "productionEan" },
            new() { Name = "energyTaxType" },
            new() { Name = "vatType" },
            new() { Name = "estimatedAnnualConsumption" }
        };

        protected override string TypeName => "MeteringPointData";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedMeteringPointDataQueryBuilderV2 WithConsumptionEan(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("consumptionEan", alias, [skip, include]);

        public SourceGeneratedMeteringPointDataQueryBuilderV2 ExceptConsumptionEan() => ExceptField("consumptionEan");

        public SourceGeneratedMeteringPointDataQueryBuilderV2 WithGridCompany(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("gridCompany", alias, [skip, include]);

        public SourceGeneratedMeteringPointDataQueryBuilderV2 ExceptGridCompany() => ExceptField("gridCompany");

        public SourceGeneratedMeteringPointDataQueryBuilderV2 WithGridAreaCode(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("gridAreaCode", alias, [skip, include]);

        public SourceGeneratedMeteringPointDataQueryBuilderV2 ExceptGridAreaCode() => ExceptField("gridAreaCode");

        public SourceGeneratedMeteringPointDataQueryBuilderV2 WithPriceAreaCode(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("priceAreaCode", alias, [skip, include]);

        public SourceGeneratedMeteringPointDataQueryBuilderV2 ExceptPriceAreaCode() => ExceptField("priceAreaCode");

        public SourceGeneratedMeteringPointDataQueryBuilderV2 WithProductionEan(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("productionEan", alias, [skip, include]);

        public SourceGeneratedMeteringPointDataQueryBuilderV2 ExceptProductionEan() => ExceptField("productionEan");

        public SourceGeneratedMeteringPointDataQueryBuilderV2 WithEnergyTaxType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("energyTaxType", alias, [skip, include]);

        public SourceGeneratedMeteringPointDataQueryBuilderV2 ExceptEnergyTaxType() => ExceptField("energyTaxType");

        public SourceGeneratedMeteringPointDataQueryBuilderV2 WithVatType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("vatType", alias, [skip, include]);

        public SourceGeneratedMeteringPointDataQueryBuilderV2 ExceptVatType() => ExceptField("vatType");

        public SourceGeneratedMeteringPointDataQueryBuilderV2 WithEstimatedAnnualConsumption(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("estimatedAnnualConsumption", alias, [skip, include]);

        public SourceGeneratedMeteringPointDataQueryBuilderV2 ExceptEstimatedAnnualConsumption() => ExceptField("estimatedAnnualConsumption");
    }

    public partial class SourceGeneratedMeterReadingResponseQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedMeterReadingResponseQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "homeId" },
            new() { Name = "time" },
            new() { Name = "reading" }
        };

        protected override string TypeName => "MeterReadingResponse";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedMeterReadingResponseQueryBuilderV2 WithHomeId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("homeId", alias, [skip, include]);

        public SourceGeneratedMeterReadingResponseQueryBuilderV2 ExceptHomeId() => ExceptField("homeId");

        public SourceGeneratedMeterReadingResponseQueryBuilderV2 WithTime(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("time", alias, [skip, include]);

        public SourceGeneratedMeterReadingResponseQueryBuilderV2 ExceptTime() => ExceptField("time");

        public SourceGeneratedMeterReadingResponseQueryBuilderV2 WithReading(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("reading", alias, [skip, include]);

        public SourceGeneratedMeterReadingResponseQueryBuilderV2 ExceptReading() => ExceptField("reading");
    }

    public partial class SourceGeneratedPageInfoQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedPageInfoQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "unimplementedField" },
            new() { Name = "unimplementedDeprecatedField", IsDeprecated = true },
            new() { Name = "endCursor" },
            new() { Name = "hasNextPage" },
            new() { Name = "hasPreviousPage" },
            new() { Name = "startCursor" }
        };

        public SourceGeneratedPageInfoQueryBuilderV2() => WithTypeName();

        protected override string TypeName => "PageInfo";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedPageInfoQueryBuilderV2 WithUnimplementedField(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("unimplementedField", alias, [skip, include]);

        public SourceGeneratedPageInfoQueryBuilderV2 ExceptUnimplementedField() => ExceptField("unimplementedField");

        [Obsolete(@"should not be generated")]
        public SourceGeneratedPageInfoQueryBuilderV2 WithUnimplementedDeprecatedField(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("unimplementedDeprecatedField", alias, [skip, include]);

        public SourceGeneratedPageInfoQueryBuilderV2 ExceptUnimplementedDeprecatedField() => ExceptField("unimplementedDeprecatedField");

        public SourceGeneratedPageInfoQueryBuilderV2 WithEndCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("endCursor", alias, [skip, include]);

        public SourceGeneratedPageInfoQueryBuilderV2 ExceptEndCursor() => ExceptField("endCursor");

        public SourceGeneratedPageInfoQueryBuilderV2 WithHasNextPage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasNextPage", alias, [skip, include]);

        public SourceGeneratedPageInfoQueryBuilderV2 ExceptHasNextPage() => ExceptField("hasNextPage");

        public SourceGeneratedPageInfoQueryBuilderV2 WithHasPreviousPage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasPreviousPage", alias, [skip, include]);

        public SourceGeneratedPageInfoQueryBuilderV2 ExceptHasPreviousPage() => ExceptField("hasPreviousPage");

        public SourceGeneratedPageInfoQueryBuilderV2 WithStartCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("startCursor", alias, [skip, include]);

        public SourceGeneratedPageInfoQueryBuilderV2 ExceptStartCursor() => ExceptField("startCursor");

        public SourceGeneratedPageInfoQueryBuilderV2 WithSubscriptionPriceConnectionPageInfoFragment(SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 subscriptionPriceConnectionPageInfoQueryBuilder, SkipDirective? skip = null, IncludeDirective? include = null) => WithFragment(subscriptionPriceConnectionPageInfoQueryBuilder, [skip, include]);

        public SourceGeneratedPageInfoQueryBuilderV2 WithHomeConsumptionPageInfoFragment(SourceGeneratedHomeConsumptionPageInfoQueryBuilderV2 homeConsumptionPageInfoQueryBuilder, SkipDirective? skip = null, IncludeDirective? include = null) => WithFragment(homeConsumptionPageInfoQueryBuilder, [skip, include]);

        public SourceGeneratedPageInfoQueryBuilderV2 WithHomeProductionPageInfoFragment(SourceGeneratedHomeProductionPageInfoQueryBuilderV2 homeProductionPageInfoQueryBuilder, SkipDirective? skip = null, IncludeDirective? include = null) => WithFragment(homeProductionPageInfoQueryBuilder, [skip, include]);
    }

    public partial class SourceGeneratedPriceQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedPriceQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "total" },
            new() { Name = "energy" },
            new() { Name = "tax" },
            new() { Name = "startsAt" },
            new() { Name = "currency" },
            new() { Name = "level" }
        };

        protected override string TypeName => "Price";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedPriceQueryBuilderV2 WithTotal(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("total", alias, [skip, include]);

        public SourceGeneratedPriceQueryBuilderV2 ExceptTotal() => ExceptField("total");

        public SourceGeneratedPriceQueryBuilderV2 WithEnergy(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("energy", alias, [skip, include]);

        public SourceGeneratedPriceQueryBuilderV2 ExceptEnergy() => ExceptField("energy");

        public SourceGeneratedPriceQueryBuilderV2 WithTax(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("tax", alias, [skip, include]);

        public SourceGeneratedPriceQueryBuilderV2 ExceptTax() => ExceptField("tax");

        public SourceGeneratedPriceQueryBuilderV2 WithStartsAt(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("startsAt", alias, [skip, include]);

        public SourceGeneratedPriceQueryBuilderV2 ExceptStartsAt() => ExceptField("startsAt");

        public SourceGeneratedPriceQueryBuilderV2 WithCurrency(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currency", alias, [skip, include]);

        public SourceGeneratedPriceQueryBuilderV2 ExceptCurrency() => ExceptField("currency");

        public SourceGeneratedPriceQueryBuilderV2 WithLevel(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("level", alias, [skip, include]);

        public SourceGeneratedPriceQueryBuilderV2 ExceptLevel() => ExceptField("level");
    }

    public partial class SourceGeneratedPriceInfoQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedPriceInfoQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "current", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedPriceQueryBuilderV2) },
            new() { Name = "today", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedPriceQueryBuilderV2) },
            new() { Name = "tomorrow", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedPriceQueryBuilderV2) },
            new() { Name = "range", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2) }
        };

        protected override string TypeName => "PriceInfo";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedPriceInfoQueryBuilderV2 WithCurrent(SourceGeneratedPriceQueryBuilderV2 priceQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("current", alias, priceQueryBuilder, [skip, include]);

        public SourceGeneratedPriceInfoQueryBuilderV2 ExceptCurrent() => ExceptField("current");

        public SourceGeneratedPriceInfoQueryBuilderV2 WithToday(SourceGeneratedPriceQueryBuilderV2 priceQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("today", alias, priceQueryBuilder, [skip, include]);

        public SourceGeneratedPriceInfoQueryBuilderV2 ExceptToday() => ExceptField("today");

        public SourceGeneratedPriceInfoQueryBuilderV2 WithTomorrow(SourceGeneratedPriceQueryBuilderV2 priceQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("tomorrow", alias, priceQueryBuilder, [skip, include]);

        public SourceGeneratedPriceInfoQueryBuilderV2 ExceptTomorrow() => ExceptField("tomorrow");

        public SourceGeneratedPriceInfoQueryBuilderV2 WithRange(SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2 subscriptionPriceConnectionQueryBuilder, QueryBuilderParameter<SourceGeneratedPriceResolutionV2> resolution, QueryBuilderParameter<int?>? first = null, QueryBuilderParameter<int?>? last = null, QueryBuilderParameter<string?>? before = null, QueryBuilderParameter<string?>? after = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new() { ArgumentName = "resolution", ArgumentValue = resolution} );
            if (first != null)
                args.Add(new() { ArgumentName = "first", ArgumentValue = first} );

            if (last != null)
                args.Add(new() { ArgumentName = "last", ArgumentValue = last} );

            if (before != null)
                args.Add(new() { ArgumentName = "before", ArgumentValue = before} );

            if (after != null)
                args.Add(new() { ArgumentName = "after", ArgumentValue = after} );

            return WithObjectField("range", alias, subscriptionPriceConnectionQueryBuilder, [skip, include], args);
        }

        public SourceGeneratedPriceInfoQueryBuilderV2 ExceptRange() => ExceptField("range");
    }

    public partial class SourceGeneratedProductionEntryQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedProductionEntryQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "from" },
            new() { Name = "to" },
            new() { Name = "unitPrice" },
            new() { Name = "unitPriceVAT" },
            new() { Name = "production" },
            new() { Name = "productionUnit" },
            new() { Name = "profit" },
            new() { Name = "currency" }
        };

        protected override string TypeName => "Production";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedProductionEntryQueryBuilderV2 WithFrom(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("from", alias, [skip, include]);

        public SourceGeneratedProductionEntryQueryBuilderV2 ExceptFrom() => ExceptField("from");

        public SourceGeneratedProductionEntryQueryBuilderV2 WithTo(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("to", alias, [skip, include]);

        public SourceGeneratedProductionEntryQueryBuilderV2 ExceptTo() => ExceptField("to");

        public SourceGeneratedProductionEntryQueryBuilderV2 WithUnitPrice(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("unitPrice", alias, [skip, include]);

        public SourceGeneratedProductionEntryQueryBuilderV2 ExceptUnitPrice() => ExceptField("unitPrice");

        public SourceGeneratedProductionEntryQueryBuilderV2 WithUnitPriceVat(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("unitPriceVAT", alias, [skip, include]);

        public SourceGeneratedProductionEntryQueryBuilderV2 ExceptUnitPriceVat() => ExceptField("unitPriceVAT");

        public SourceGeneratedProductionEntryQueryBuilderV2 WithProduction(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("production", alias, [skip, include]);

        public SourceGeneratedProductionEntryQueryBuilderV2 ExceptProduction() => ExceptField("production");

        public SourceGeneratedProductionEntryQueryBuilderV2 WithProductionUnit(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("productionUnit", alias, [skip, include]);

        public SourceGeneratedProductionEntryQueryBuilderV2 ExceptProductionUnit() => ExceptField("productionUnit");

        public SourceGeneratedProductionEntryQueryBuilderV2 WithProfit(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("profit", alias, [skip, include]);

        public SourceGeneratedProductionEntryQueryBuilderV2 ExceptProfit() => ExceptField("profit");

        public SourceGeneratedProductionEntryQueryBuilderV2 WithCurrency(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currency", alias, [skip, include]);

        public SourceGeneratedProductionEntryQueryBuilderV2 ExceptCurrency() => ExceptField("currency");
    }

    public partial class SourceGeneratedPushNotificationResponseQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedPushNotificationResponseQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "successful" },
            new() { Name = "pushedToNumberOfDevices" }
        };

        protected override string TypeName => "PushNotificationResponse";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedPushNotificationResponseQueryBuilderV2 WithSuccessful(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("successful", alias, [skip, include]);

        public SourceGeneratedPushNotificationResponseQueryBuilderV2 ExceptSuccessful() => ExceptField("successful");

        public SourceGeneratedPushNotificationResponseQueryBuilderV2 WithPushedToNumberOfDevices(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("pushedToNumberOfDevices", alias, [skip, include]);

        public SourceGeneratedPushNotificationResponseQueryBuilderV2 ExceptPushedToNumberOfDevices() => ExceptField("pushedToNumberOfDevices");
    }

    public partial class SourceGeneratedTibberQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedTibberQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "viewer", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedViewerQueryBuilderV2) }
        };

        protected override string TypeName => "Query";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedTibberQueryBuilderV2(string? operationName = null) : base("query", operationName)
        {
        }

        public SourceGeneratedTibberQueryBuilderV2 WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

        public SourceGeneratedTibberQueryBuilderV2 WithViewer(SourceGeneratedViewerQueryBuilderV2 viewerQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("viewer", alias, viewerQueryBuilder, [skip, include]);

        public SourceGeneratedTibberQueryBuilderV2 ExceptViewer() => ExceptField("viewer");
    }

    public partial class SourceGeneratedTibberMutationQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedTibberMutationQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "sendMeterReading", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceGeneratedMeterReadingResponseQueryBuilderV2) },
            new() { Name = "updateHome", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeQueryBuilderV2) },
            new() { Name = "sendPushNotification", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceGeneratedPushNotificationResponseQueryBuilderV2) }
        };

        protected override string TypeName => "RootMutation";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedTibberMutationQueryBuilderV2(string? operationName = null) : base("mutation", operationName)
        {
        }

        public SourceGeneratedTibberMutationQueryBuilderV2 WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

        public SourceGeneratedTibberMutationQueryBuilderV2 WithSendMeterReading(SourceGeneratedMeterReadingResponseQueryBuilderV2 meterReadingResponseQueryBuilder, QueryBuilderParameter<SourceGeneratedMeterReadingInputV2> input, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new() { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("sendMeterReading", alias, meterReadingResponseQueryBuilder, [skip, include], args);
        }

        public SourceGeneratedTibberMutationQueryBuilderV2 ExceptSendMeterReading() => ExceptField("sendMeterReading");

        public SourceGeneratedTibberMutationQueryBuilderV2 WithUpdateHome(SourceGeneratedHomeQueryBuilderV2 homeQueryBuilder, QueryBuilderParameter<SourceGeneratedUpdateHomeInputV2> input, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new() { ArgumentName = "input", ArgumentValue = input} );
            return WithObjectField("updateHome", alias, homeQueryBuilder, [skip, include], args);
        }

        public SourceGeneratedTibberMutationQueryBuilderV2 ExceptUpdateHome() => ExceptField("updateHome");

        public SourceGeneratedTibberMutationQueryBuilderV2 WithSendPushNotification(SourceGeneratedPushNotificationResponseQueryBuilderV2 pushNotificationResponseQueryBuilder, QueryBuilderParameter<SourceGeneratedPushNotificationInputV2> input, QueryBuilderParameter<IEnumerable<bool>> flags, QueryBuilderParameter<IEnumerable<string?>>? tags = null, QueryBuilderParameter<IEnumerable<int?>>? references = null, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new() { ArgumentName = "input", ArgumentValue = input} );
            if (tags != null)
                args.Add(new() { ArgumentName = "tags", ArgumentValue = tags} );

            if (references != null)
                args.Add(new() { ArgumentName = "references", ArgumentValue = references} );

            args.Add(new() { ArgumentName = "flags", ArgumentValue = flags} );
            return WithObjectField("sendPushNotification", alias, pushNotificationResponseQueryBuilder, [skip, include], args);
        }

        public SourceGeneratedTibberMutationQueryBuilderV2 ExceptSendPushNotification() => ExceptField("sendPushNotification");
    }

    public partial class SourceGeneratedRootSubscriptionQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedRootSubscriptionQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "liveMeasurement", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceGeneratedLiveMeasurementQueryBuilderV2) }
        };

        protected override string TypeName => "RootSubscription";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedRootSubscriptionQueryBuilderV2(string? operationName = null) : base("subscription", operationName)
        {
        }

        public SourceGeneratedRootSubscriptionQueryBuilderV2 WithParameter<T>(GraphQlQueryParameter<T> parameter) => WithParameterInternal(parameter);

        public SourceGeneratedRootSubscriptionQueryBuilderV2 WithLiveMeasurement(SourceGeneratedLiveMeasurementQueryBuilderV2 liveMeasurementQueryBuilder, QueryBuilderParameter<string> homeId, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new() { ArgumentName = "homeId", ArgumentValue = homeId} );
            return WithObjectField("liveMeasurement", alias, liveMeasurementQueryBuilder, [skip, include], args);
        }

        public SourceGeneratedRootSubscriptionQueryBuilderV2 ExceptLiveMeasurement() => ExceptField("liveMeasurement");
    }

    public partial class SourceGeneratedSubscriptionQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedSubscriptionQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "id" },
            new() { Name = "subscriber", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedLegalEntityQueryBuilderV2) },
            new() { Name = "validFrom" },
            new() { Name = "validTo" },
            new() { Name = "status" },
            new() { Name = "statusReason", IsDeprecated = true },
            new() { Name = "priceInfo", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedPriceInfoQueryBuilderV2) }
        };

        protected override string TypeName => "Subscription";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedSubscriptionQueryBuilderV2 WithId(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("id", alias, [skip, include]);

        public SourceGeneratedSubscriptionQueryBuilderV2 ExceptId() => ExceptField("id");

        public SourceGeneratedSubscriptionQueryBuilderV2 WithSubscriber(SourceGeneratedLegalEntityQueryBuilderV2 legalEntityQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("subscriber", alias, legalEntityQueryBuilder, [skip, include]);

        public SourceGeneratedSubscriptionQueryBuilderV2 ExceptSubscriber() => ExceptField("subscriber");

        public SourceGeneratedSubscriptionQueryBuilderV2 WithValidFrom(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("validFrom", alias, [skip, include]);

        public SourceGeneratedSubscriptionQueryBuilderV2 ExceptValidFrom() => ExceptField("validFrom");

        public SourceGeneratedSubscriptionQueryBuilderV2 WithValidTo(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("validTo", alias, [skip, include]);

        public SourceGeneratedSubscriptionQueryBuilderV2 ExceptValidTo() => ExceptField("validTo");

        public SourceGeneratedSubscriptionQueryBuilderV2 WithStatus(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("status", alias, [skip, include]);

        public SourceGeneratedSubscriptionQueryBuilderV2 ExceptStatus() => ExceptField("status");

        [Obsolete(@"no longer available.")]
        public SourceGeneratedSubscriptionQueryBuilderV2 WithStatusReason(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("statusReason", alias, [skip, include]);

        public SourceGeneratedSubscriptionQueryBuilderV2 ExceptStatusReason() => ExceptField("statusReason");

        public SourceGeneratedSubscriptionQueryBuilderV2 WithPriceInfo(SourceGeneratedPriceInfoQueryBuilderV2 priceInfoQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("priceInfo", alias, priceInfoQueryBuilder, [skip, include]);

        public SourceGeneratedSubscriptionQueryBuilderV2 ExceptPriceInfo() => ExceptField("priceInfo");
    }

    public partial class SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "pageInfo", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2) },
            new() { Name = "edges", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedSubscriptionPriceEdgeQueryBuilderV2) },
            new() { Name = "nodes", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedPriceQueryBuilderV2) }
        };

        protected override string TypeName => "SubscriptionPriceConnection";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2 WithPageInfo(SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 subscriptionPriceConnectionPageInfoQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("pageInfo", alias, subscriptionPriceConnectionPageInfoQueryBuilder, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2 ExceptPageInfo() => ExceptField("pageInfo");

        public SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2 WithEdges(SourceGeneratedSubscriptionPriceEdgeQueryBuilderV2 subscriptionPriceEdgeQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("edges", alias, subscriptionPriceEdgeQueryBuilder, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2 ExceptEdges() => ExceptField("edges");

        public SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2 WithNodes(SourceGeneratedPriceQueryBuilderV2 priceQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("nodes", alias, priceQueryBuilder, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionQueryBuilderV2 ExceptNodes() => ExceptField("nodes");
    }

    public partial class SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "endCursor" },
            new() { Name = "hasNextPage" },
            new() { Name = "hasPreviousPage" },
            new() { Name = "startCursor" },
            new() { Name = "resolution" },
            new() { Name = "currency" },
            new() { Name = "count" },
            new() { Name = "precision" },
            new() { Name = "minEnergy" },
            new() { Name = "minTotal" },
            new() { Name = "maxEnergy" },
            new() { Name = "maxTotal" }
        };

        protected override string TypeName => "SubscriptionPriceConnectionPageInfo";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithEndCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("endCursor", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptEndCursor() => ExceptField("endCursor");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithHasNextPage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasNextPage", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptHasNextPage() => ExceptField("hasNextPage");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithHasPreviousPage(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("hasPreviousPage", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptHasPreviousPage() => ExceptField("hasPreviousPage");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithStartCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("startCursor", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptStartCursor() => ExceptField("startCursor");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithResolution(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("resolution", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptResolution() => ExceptField("resolution");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithCurrency(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("currency", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptCurrency() => ExceptField("currency");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithCount(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("count", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptCount() => ExceptField("count");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithPrecision(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("precision", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptPrecision() => ExceptField("precision");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithMinEnergy(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("minEnergy", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptMinEnergy() => ExceptField("minEnergy");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithMinTotal(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("minTotal", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptMinTotal() => ExceptField("minTotal");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithMaxEnergy(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("maxEnergy", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptMaxEnergy() => ExceptField("maxEnergy");

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 WithMaxTotal(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("maxTotal", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceConnectionPageInfoQueryBuilderV2 ExceptMaxTotal() => ExceptField("maxTotal");
    }

    public partial class SourceGeneratedSubscriptionPriceEdgeQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedSubscriptionPriceEdgeQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "cursor" },
            new() { Name = "node", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedPriceQueryBuilderV2) }
        };

        protected override string TypeName => "SubscriptionPriceEdge";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedSubscriptionPriceEdgeQueryBuilderV2 WithCursor(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("cursor", alias, [skip, include]);

        public SourceGeneratedSubscriptionPriceEdgeQueryBuilderV2 ExceptCursor() => ExceptField("cursor");

        public SourceGeneratedSubscriptionPriceEdgeQueryBuilderV2 WithNode(SourceGeneratedPriceQueryBuilderV2 priceQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("node", alias, priceQueryBuilder, [skip, include]);

        public SourceGeneratedSubscriptionPriceEdgeQueryBuilderV2 ExceptNode() => ExceptField("node");
    }

    public partial class SourceGeneratedViewerQueryBuilderV2 : GraphQlQueryBuilder<SourceGeneratedViewerQueryBuilderV2>
    {
        private static readonly GraphQlFieldMetadata[] AllFieldMetadata =
        {
            new() { Name = "login" },
            new() { Name = "name" },
            new() { Name = "accountType", IsComplex = true },
            new() { Name = "homes", IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeQueryBuilderV2) },
            new() { Name = "home", RequiresParameters = true, IsComplex = true, QueryBuilderType = typeof(SourceGeneratedHomeQueryBuilderV2) }
        };

        protected override string TypeName => "Viewer";

        public override IReadOnlyList<GraphQlFieldMetadata> AllFields => AllFieldMetadata;

        public SourceGeneratedViewerQueryBuilderV2 WithLogin(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("login", alias, [skip, include]);

        public SourceGeneratedViewerQueryBuilderV2 ExceptLogin() => ExceptField("login");

        public SourceGeneratedViewerQueryBuilderV2 WithName(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("name", alias, [skip, include]);

        public SourceGeneratedViewerQueryBuilderV2 ExceptName() => ExceptField("name");

        public SourceGeneratedViewerQueryBuilderV2 WithAccountType(string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithScalarField("accountType", alias, [skip, include]);

        public SourceGeneratedViewerQueryBuilderV2 ExceptAccountType() => ExceptField("accountType");

        public SourceGeneratedViewerQueryBuilderV2 WithHomes(SourceGeneratedHomeQueryBuilderV2 homeQueryBuilder, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null) => WithObjectField("homes", alias, homeQueryBuilder, [skip, include]);

        public SourceGeneratedViewerQueryBuilderV2 ExceptHomes() => ExceptField("homes");

        public SourceGeneratedViewerQueryBuilderV2 WithHome(SourceGeneratedHomeQueryBuilderV2 homeQueryBuilder, QueryBuilderParameter<string> id, string? alias = null, SkipDirective? skip = null, IncludeDirective? include = null)
        {
            var args = new List<QueryBuilderArgumentInfo>();
            args.Add(new() { ArgumentName = "id", ArgumentValue = id} );
            return WithObjectField("home", alias, homeQueryBuilder, [skip, include], args);
        }

        public SourceGeneratedViewerQueryBuilderV2 ExceptHome() => ExceptField("home");
    }
    #endregion

    #region input classes
    public partial class SourceGeneratedMeterReadingInputV2 : IGraphQlInputObject
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("homeId")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("homeId")]
        public string HomeId { get; set; }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("time")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        public string? Time { get; set; }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("reading")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("reading")]
        public int Reading { get; set; }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (HomeId != null) yield return new() { Name = "homeId", Value = HomeId };
            if (Time != null) yield return new() { Name = "time", Value = Time };
            if (Reading != null) yield return new() { Name = "reading", Value = Reading };
        }
    }

    public partial class SourceGeneratedPushNotificationInputV2 : IGraphQlInputObject
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("title")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("title")]
        public string? Title { get; set; }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("message")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("message")]
        public string Message { get; set; }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("screenToOpen")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("screenToOpen")]
        public SourceGeneratedAppScreenV2? ScreenToOpen { get; set; }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (Title != null) yield return new() { Name = "title", Value = Title };
            if (Message != null) yield return new() { Name = "message", Value = Message };
            if (ScreenToOpen != null) yield return new() { Name = "screenToOpen", Value = ScreenToOpen };
        }
    }

    public partial class SourceGeneratedUpdateHomeInputV2 : IGraphQlInputObject
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("homeId")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("homeId")]
        public string HomeId { get; set; }

        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("appNickname")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("appNickname")]
        public string? AppNickname { get; set; }

        /// <summary>
        /// The chosen avatar for the home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("appAvatar")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("appAvatar")]
        public SourceGeneratedHomeAvatarV2? AppAvatar { get; set; }

        /// <summary>
        /// The size of the home in square meters
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("size")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int? Size { get; set; }

        /// <summary>
        /// The type of home.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("type")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public SourceGeneratedHomeTypeV2? Type { get; set; }

        /// <summary>
        /// The number of people living in the home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("numberOfResidents")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("numberOfResidents")]
        public int? NumberOfResidents { get; set; }

        /// <summary>
        /// The primary form of heating in the household
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("primaryHeatingSource")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("primaryHeatingSource")]
        public SourceGeneratedHeatingSourceV2? PrimaryHeatingSource { get; set; }

        /// <summary>
        /// Whether the home has a ventilation system
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("hasVentilationSystem")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("hasVentilationSystem")]
        public bool? HasVentilationSystem { get; set; }

        /// <summary>
        /// The main fuse size
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("mainFuseSize")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("mainFuseSize")]
        public int? MainFuseSize { get; set; }

        IEnumerable<InputPropertyInfo> IGraphQlInputObject.GetPropertyValues()
        {
            if (HomeId != null) yield return new() { Name = "homeId", Value = HomeId };
            if (AppNickname != null) yield return new() { Name = "appNickname", Value = AppNickname };
            if (AppAvatar != null) yield return new() { Name = "appAvatar", Value = AppAvatar };
            if (Size != null) yield return new() { Name = "size", Value = Size };
            if (Type != null) yield return new() { Name = "type", Value = Type };
            if (NumberOfResidents != null) yield return new() { Name = "numberOfResidents", Value = NumberOfResidents };
            if (PrimaryHeatingSource != null) yield return new() { Name = "primaryHeatingSource", Value = PrimaryHeatingSource };
            if (HasVentilationSystem != null) yield return new() { Name = "hasVentilationSystem", Value = HasVentilationSystem };
            if (MainFuseSize != null) yield return new() { Name = "mainFuseSize", Value = MainFuseSize };
        }
    }
    #endregion

    #region data classes
    /// <summary>
    /// Address information
    /// </summary>
    public partial class SourceGeneratedAddressV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("address1")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("address1")]
        public string? Address1 { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("address2")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("address2")]
        public string? Address2 { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("address3")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("address3")]
        public string? Address3 { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("city")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("city")]
        public string? City { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("postalCode")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("postalCode")]
        public string? PostalCode { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("country")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("country")]
        public string? Country { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("latitude")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("latitude")]
        public string? Latitude { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("longitude")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("longitude")]
        public string? Longitude { get; set; }
    }

    public partial class SourceGeneratedConsumptionEntryV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("from")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public DateTime From { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("to")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public DateTime To { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unitPrice")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public double? UnitPrice { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unitPriceVAT")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unitPriceVAT")]
        public double? UnitPriceVat { get; set; }
        /// <summary>
        /// kWh consumed
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("consumption")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("consumption")]
        public double? Consumption { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("consumptionUnit")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("consumptionUnit")]
        public string? ConsumptionUnit { get; set; }
        /// <summary>
        /// Total cost of the consumption
        /// </summary>
        [Obsolete(@"use cost instead.")]
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalCost")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("totalCost")]
        public double? TotalCost { get; set; }
        [Obsolete(@"use cost instead")]
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unitCost")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unitCost")]
        public double? UnitCost { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("cost")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("cost")]
        public double? Cost { get; set; }
        /// <summary>
        /// The cost currency
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currency")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }
    }

    public partial class SourceGeneratedContactInfoV2
    {
        /// <summary>
        /// The email of the corresponding entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("email")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("email")]
        public string? Email { get; set; }
        /// <summary>
        /// The mobile phone no of the corresponding entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("mobile")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("mobile")]
        public string? Mobile { get; set; }
    }

    public partial class SourceGeneratedHomeV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }
        /// <summary>
        /// The time zone the home resides in
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("timeZone")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("timeZone")]
        public string TimeZone { get; set; }
        /// <summary>
        /// The nickname given to the home by the user
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("appNickname")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("appNickname")]
        public string? AppNickname { get; set; }
        /// <summary>
        /// The chosen avatar for the home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("appAvatar")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("appAvatar")]
        public SourceGeneratedHomeAvatarV2 AppAvatar { get; set; }
        /// <summary>
        /// The size of the home in square meters
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("size")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("size")]
        public int? Size { get; set; }
        /// <summary>
        /// The type of home.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("type")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("type")]
        public SourceGeneratedHomeTypeV2 Type { get; set; }
        /// <summary>
        /// The number of people living in the home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("numberOfResidents")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("numberOfResidents")]
        public int? NumberOfResidents { get; set; }
        /// <summary>
        /// The primary form of heating in the household
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("primaryHeatingSource")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("primaryHeatingSource")]
        public SourceGeneratedHeatingSourceV2? PrimaryHeatingSource { get; set; }
        /// <summary>
        /// Whether the home has a ventilation system
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("hasVentilationSystem")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("hasVentilationSystem")]
        public bool? HasVentilationSystem { get; set; }
        /// <summary>
        /// The main fuse size
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("mainFuseSize")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("mainFuseSize")]
        public int? MainFuseSize { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("address")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public SourceGeneratedAddressV2? Address { get; set; }
        /// <summary>
        /// The registered owner of the house
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("owner")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("owner")]
        public SourceGeneratedLegalEntityV2? Owner { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("meteringPointData")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("meteringPointData")]
        public SourceGeneratedMeteringPointDataV2? MeteringPointData { get; set; }
        /// <summary>
        /// The current/latest subscription related to the home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currentSubscription")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currentSubscription")]
        public SourceGeneratedSubscriptionV2? CurrentSubscription { get; set; }
        /// <summary>
        /// All historic subscriptions related to the home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("subscriptions")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("subscriptions")]
        public ICollection<SourceGeneratedSubscriptionV2?> Subscriptions { get; set; }
        /// <summary>
        /// Consumption connection
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("consumption")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("consumption")]
        public SourceGeneratedHomeConsumptionConnectionV2? Consumption { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("production")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("production")]
        public SourceGeneratedHomeProductionConnectionV2? Production { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("features")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("features")]
        public SourceGeneratedHomeFeaturesV2? Features { get; set; }
    }

    public partial class SourceGeneratedHomeConsumptionConnectionV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("pageInfo")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("pageInfo")]
        public SourceGeneratedHomeConsumptionPageInfoV2 PageInfo { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("nodes")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("nodes")]
        public ICollection<SourceGeneratedConsumptionEntryV2?>? Nodes { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("edges")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("edges")]
        public ICollection<SourceGeneratedHomeConsumptionEdgeV2?>? Edges { get; set; }
    }

    public partial class SourceGeneratedHomeConsumptionEdgeV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("cursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("cursor")]
        public string Cursor { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("node")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("node")]
        public SourceGeneratedConsumptionEntryV2 Node { get; set; }
    }

    [GraphQlObjectType("HomeConsumptionPageInfo")]
    public partial class SourceGeneratedHomeConsumptionPageInfoV2 : ISourceGeneratedPageInfoV2
    {
        /// <summary>
        /// The global ID of the last element in the list
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("endCursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("endCursor")]
        public string? EndCursor { get; set; }
        /// <summary>
        /// True if further pages are available
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("hasNextPage")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("hasNextPage")]
        public bool? HasNextPage { get; set; }
        /// <summary>
        /// True if previous pages are available
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("hasPreviousPage")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("hasPreviousPage")]
        public bool? HasPreviousPage { get; set; }
        /// <summary>
        /// The global ID of the first element in the list
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("startCursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("startCursor")]
        public string? StartCursor { get; set; }
        /// <summary>
        /// The number of elements in the list
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("count")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; }
        /// <summary>
        /// The currency of the page
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currency")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }
        /// <summary>
        /// Page total cost
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalCost")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("totalCost")]
        public double? TotalCost { get; set; }
        /// <summary>
        /// Page energy cost
        /// </summary>
        [Obsolete(@"redundant")]
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("energyCost")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("energyCost")]
        public double? EnergyCost { get; set; }
        /// <summary>
        /// Total consumption for page
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalConsumption")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("totalConsumption")]
        public double? TotalConsumption { get; set; }
        /// <summary>
        /// Number of entries that have been filtered from result set due to empty nodes
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("filtered")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("filtered")]
        public int Filtered { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unimplementedField")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unimplementedField")]
        public string? UnimplementedField { get; set; }
        [Obsolete(@"should not be generated")]
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unimplementedDeprecatedField")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unimplementedDeprecatedField")]
        public string? UnimplementedDeprecatedField { get; set; }
    }

    public partial class SourceGeneratedHomeFeaturesV2
    {
        /// <summary>
        /// 'true' if Tibber Pulse or Watty device is paired at home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("realTimeConsumptionEnabled")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("realTimeConsumptionEnabled")]
        public bool? RealTimeConsumptionEnabled { get; set; }
    }

    public partial class SourceGeneratedHomeProductionConnectionV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("pageInfo")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("pageInfo")]
        public SourceGeneratedHomeProductionPageInfoV2 PageInfo { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("nodes")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("nodes")]
        public ICollection<SourceGeneratedProductionEntryV2?>? Nodes { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("edges")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("edges")]
        public ICollection<SourceGeneratedHomeProductionEdgeV2?>? Edges { get; set; }
    }

    public partial class SourceGeneratedHomeProductionEdgeV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("cursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("cursor")]
        public string Cursor { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("node")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("node")]
        public SourceGeneratedProductionEntryV2 Node { get; set; }
    }

    [GraphQlObjectType("HomeProductionPageInfo")]
    public partial class SourceGeneratedHomeProductionPageInfoV2 : ISourceGeneratedPageInfoV2
    {
        /// <summary>
        /// The global ID of the last element in the list
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("endCursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("endCursor")]
        public string? EndCursor { get; set; }
        /// <summary>
        /// True if further pages are available
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("hasNextPage")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("hasNextPage")]
        public bool? HasNextPage { get; set; }
        /// <summary>
        /// True if previous pages are available
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("hasPreviousPage")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("hasPreviousPage")]
        public bool? HasPreviousPage { get; set; }
        /// <summary>
        /// The global ID of the first element in the list
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("startCursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("startCursor")]
        public string? StartCursor { get; set; }
        /// <summary>
        /// The number of elements in the list
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("count")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int? Count { get; set; }
        /// <summary>
        /// The currency of the page
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currency")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }
        /// <summary>
        /// Page total profit
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalProfit")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("totalProfit")]
        public double? TotalProfit { get; set; }
        /// <summary>
        /// Page total production
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("totalProduction")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("totalProduction")]
        public double? TotalProduction { get; set; }
        /// <summary>
        /// Number of entries that have been filtered from result set due to empty nodes
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("filtered")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("filtered")]
        public int Filtered { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unimplementedField")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unimplementedField")]
        public string? UnimplementedField { get; set; }
        [Obsolete(@"should not be generated")]
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unimplementedDeprecatedField")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unimplementedDeprecatedField")]
        public string? UnimplementedDeprecatedField { get; set; }
    }

    public partial class SourceGeneratedLegalEntityV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }
        /// <summary>
        /// First/Christian name of the entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("firstName")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("firstName")]
        public string? FirstName { get; set; }
        /// <summary>
        /// 'true' if the entity is a company
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("isCompany")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("isCompany")]
        public bool? IsCompany { get; set; }
        /// <summary>
        /// Full name of the entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("name")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string Name { get; set; }
        /// <summary>
        /// Middle name of the entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("middleName")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("middleName")]
        public string? MiddleName { get; set; }
        /// <summary>
        /// Last name of the entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("lastName")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("lastName")]
        public string? LastName { get; set; }
        /// <summary>
        /// Organization number - only populated if entity is a company (isCompany=true)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("organizationNo")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("organizationNo")]
        public string? OrganizationNo { get; set; }
        /// <summary>
        /// The primary language of the entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("language")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("language")]
        public string? Language { get; set; }
        /// <summary>
        /// Contact information of the entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("contactInfo")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("contactInfo")]
        public SourceGeneratedContactInfoV2? ContactInfo { get; set; }
        /// <summary>
        /// Address information for the entity
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("address")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("address")]
        public SourceGeneratedAddressV2? Address { get; set; }
    }

    public partial class SourceGeneratedLiveMeasurementV2
    {
        /// <summary>
        /// Timestamp when usage occured
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("timestamp")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("timestamp")]
        public DateTime Timestamp { get; set; }
        /// <summary>
        /// Consumption at the moment (Watt)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("power")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("power")]
        public double Power { get; set; }
        /// <summary>
        /// Last meter active import register state (kWh)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("lastMeterConsumption")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("lastMeterConsumption")]
        public double? LastMeterConsumption { get; set; }
        /// <summary>
        /// kWh consumed since midnight
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("accumulatedConsumption")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("accumulatedConsumption")]
        public double AccumulatedConsumption { get; set; }
        /// <summary>
        /// net kWh produced since midnight
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("accumulatedProduction")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("accumulatedProduction")]
        public double AccumulatedProduction { get; set; }
        /// <summary>
        /// Accumulated cost since midnight; requires active Tibber power deal
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("accumulatedCost")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("accumulatedCost")]
        public double? AccumulatedCost { get; set; }
        /// <summary>
        /// Accumulated reward since midnight; requires active Tibber power deal
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("accumulatedReward")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("accumulatedReward")]
        public double? AccumulatedReward { get; set; }
        /// <summary>
        /// Currency of displayed cost; requires active Tibber power deal
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currency")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }
        /// <summary>
        /// Min consumption since midnight (Watt)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("minPower")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("minPower")]
        public double MinPower { get; set; }
        /// <summary>
        /// Average consumption since midnight (Watt)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("averagePower")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("averagePower")]
        public double AveragePower { get; set; }
        /// <summary>
        /// Peak consumption since midnight  (Watt)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("maxPower")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("maxPower")]
        public double MaxPower { get; set; }
        /// <summary>
        /// Net production at the moment (Watt)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("powerProduction")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("powerProduction")]
        public double? PowerProduction { get; set; }
        /// <summary>
        /// Min net production since midnight (Watt)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("minPowerProduction")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("minPowerProduction")]
        public double? MinPowerProduction { get; set; }
        /// <summary>
        /// Max net production since midnight (Watt)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("maxPowerProduction")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("maxPowerProduction")]
        public double? MaxPowerProduction { get; set; }
        /// <summary>
        /// Last meter active export register state (kWh)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("lastMeterProduction")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("lastMeterProduction")]
        public double? LastMeterProduction { get; set; }
        /// <summary>
        /// Voltage on phase 1; on Kaifa and Aidon meters the value is not part of every HAN data frame therefore the value is null at timestamps with second value other than 0, 10, 20, 30, 40, 50. There can be other deviations based on concrete meter firmware.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("voltagePhase1")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("voltagePhase1")]
        public double? VoltagePhase1 { get; set; }
        /// <summary>
        /// Voltage on phase 2; on Kaifa and Aidon meters the value is not part of every HAN data frame therefore the value is null at timestamps with second value other than 0, 10, 20, 30, 40, 50. There can be other deviations based on concrete meter firmware. Value is always null for single phase meters.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("voltagePhase2")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("voltagePhase2")]
        public double? VoltagePhase2 { get; set; }
        /// <summary>
        /// Voltage on phase 3; on Kaifa and Aidon meters the value is not part of every HAN data frame therefore the value is null at timestamps with second value other than 0, 10, 20, 30, 40, 50. There can be other deviations based on concrete meter firmware. Value is always null for single phase meters.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("voltagePhase3")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("voltagePhase3")]
        public double? VoltagePhase3 { get; set; }
        /// <summary>
        /// Current on phase 1; on Kaifa and Aidon meters the value is not part of every HAN data frame therefore the value is null at timestamps with second value other than 0, 10, 20, 30, 40, 50. There can be other deviations based on concrete meter firmware.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currentPhase1")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currentPhase1")]
        public double? CurrentPhase1 { get; set; }
        /// <summary>
        /// Current on phase 2; on Kaifa and Aidon meters the value is not part of every HAN data frame therefore the value is null at timestamps with second value other than 0, 10, 20, 30, 40, 50. There can be other deviations based on concrete meter firmware. Value is always null for single phase meters.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currentPhase2")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currentPhase2")]
        public double? CurrentPhase2 { get; set; }
        /// <summary>
        /// Current on phase 3; on Kaifa and Aidon meters the value is not part of every HAN data frame therefore the value is null at timestamps with second value other than 0, 10, 20, 30, 40, 50. There can be other deviations based on concrete meter firmware. Value is always null for single phase meters.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currentPhase3")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currentPhase3")]
        public double? CurrentPhase3 { get; set; }
    }

    public partial class SourceGeneratedMeteringPointDataV2
    {
        /// <summary>
        /// The metering point ID of the home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("consumptionEan")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("consumptionEan")]
        public string? ConsumptionEan { get; set; }
        /// <summary>
        /// The grid provider of the home
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("gridCompany")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("gridCompany")]
        public string? GridCompany { get; set; }
        /// <summary>
        /// The grid area the home/metering point belongs to
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("gridAreaCode")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("gridAreaCode")]
        public string? GridAreaCode { get; set; }
        /// <summary>
        /// The price area the home/metering point belongs to
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("priceAreaCode")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("priceAreaCode")]
        public string? PriceAreaCode { get; set; }
        /// <summary>
        /// The metering point ID of the production
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("productionEan")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("productionEan")]
        public string? ProductionEan { get; set; }
        /// <summary>
        /// The eltax type of the home (only relevant for Swedish homes)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("energyTaxType")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("energyTaxType")]
        public string? EnergyTaxType { get; set; }
        /// <summary>
        /// The VAT type of the home (only relevant for Norwegian homes)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("vatType")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("vatType")]
        public string? VatType { get; set; }
        /// <summary>
        /// The estimated annual consumption as reported by grid company
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("estimatedAnnualConsumption")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("estimatedAnnualConsumption")]
        public int? EstimatedAnnualConsumption { get; set; }
    }

    public partial class SourceGeneratedMeterReadingResponseV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("homeId")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("homeId")]
        public string HomeId { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("time")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("time")]
        public string? Time { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("reading")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("reading")]
        public int Reading { get; set; }
    }

    public partial interface ISourceGeneratedPageInfoV2
    {
        string? UnimplementedField { get; set; }
        [Obsolete(@"should not be generated")]
        string? UnimplementedDeprecatedField { get; set; }
        string? EndCursor { get; set; }
        bool? HasNextPage { get; set; }
        bool? HasPreviousPage { get; set; }
        string? StartCursor { get; set; }
    }

    public partial class SourceGeneratedPriceV2
    {
        /// <summary>
        /// The total price (energy + taxes)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("total")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("total")]
        public double? Total { get; set; }
        /// <summary>
        /// The energy part of the price
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("energy")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("energy")]
        public double? Energy { get; set; }
        /// <summary>
        /// The tax part of the price (guarantee of origin certificate, energy tax (Sweden only) and VAT)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("tax")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("tax")]
        public double? Tax { get; set; }
        /// <summary>
        /// The start time of the price
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("startsAt")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("startsAt")]
        public string? StartsAt { get; set; }
        /// <summary>
        /// The price currency
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currency")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string Currency { get; set; }
        /// <summary>
        /// The price level compared to recent price values
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("level")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("level")]
        public SourceGeneratedPriceLevelV2? Level { get; set; }
    }

    public partial class SourceGeneratedPriceInfoV2
    {
        /// <summary>
        /// The energy price right now
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("current")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("current")]
        public SourceGeneratedPriceV2? Current { get; set; }
        /// <summary>
        /// The hourly prices of the current day
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("today")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("today")]
        public ICollection<SourceGeneratedPriceV2?> Today { get; set; }
        /// <summary>
        /// The hourly prices of the upcoming day
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("tomorrow")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("tomorrow")]
        public ICollection<SourceGeneratedPriceV2?> Tomorrow { get; set; }
        /// <summary>
        /// Range of prices relative to before/after arguments
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("range")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("range")]
        public SourceGeneratedSubscriptionPriceConnectionV2? Range { get; set; }
    }

    public partial class SourceGeneratedProductionEntryV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("from")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("from")]
        public DateTime From { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("to")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("to")]
        public DateTime To { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unitPrice")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unitPrice")]
        public double? UnitPrice { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unitPriceVAT")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unitPriceVAT")]
        public double? UnitPriceVat { get; set; }
        /// <summary>
        /// kWh consumed
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("production")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("production")]
        public double? Production { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("productionUnit")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("productionUnit")]
        public string? ProductionUnit { get; set; }
        /// <summary>
        /// Total profit of the production
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("profit")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("profit")]
        public double? Profit { get; set; }
        /// <summary>
        /// The cost currency
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currency")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string? Currency { get; set; }
    }

    public partial class SourceGeneratedPushNotificationResponseV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("successful")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("successful")]
        public bool Successful { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("pushedToNumberOfDevices")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("pushedToNumberOfDevices")]
        public int PushedToNumberOfDevices { get; set; }
    }

    public partial class SourceGeneratedTibberV2
    {
        /// <summary>
        /// This contains data about the logged-in user
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("viewer")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("viewer")]
        public SourceGeneratedViewerV2 Viewer { get; set; }
    }

    public partial class SourceGeneratedTibberMutationV2
    {
        /// <summary>
        /// Send meter reading for home (only available for Norwegian users)
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("sendMeterReading")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("sendMeterReading")]
        public SourceGeneratedMeterReadingResponseV2 SendMeterReading { get; set; }
        /// <summary>
        /// Update home information
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("updateHome")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("updateHome")]
        public SourceGeneratedHomeV2 UpdateHome { get; set; }
        /// <summary>
        /// Send notification to Tibber app on registered devices
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("sendPushNotification")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("sendPushNotification")]
        public SourceGeneratedPushNotificationResponseV2 SendPushNotification { get; set; }
    }

    public partial class SourceGeneratedRootSubscriptionV2
    {
        /// <summary>
        /// Subscribe to real-time measurement stream from Pulse or Watty device
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("liveMeasurement")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("liveMeasurement")]
        public SourceGeneratedLiveMeasurementV2? LiveMeasurement { get; set; }
    }

    public partial class SourceGeneratedSubscriptionV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("id")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("id")]
        public string Id { get; set; }
        /// <summary>
        /// The owner of the subscription
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("subscriber")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("subscriber")]
        public SourceGeneratedLegalEntityV2 Subscriber { get; set; }
        /// <summary>
        /// The time the subscription started
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("validFrom")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("validFrom")]
        public DateTime? ValidFrom { get; set; }
        /// <summary>
        /// The time the subscription ended
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("validTo")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("validTo")]
        public DateTime? ValidTo { get; set; }
        /// <summary>
        /// The current status of the subscription
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("status")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("status")]
        public string? Status { get; set; }
        [Obsolete(@"no longer available.")]
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("statusReason")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("statusReason")]
        public string? StatusReason { get; set; }
        /// <summary>
        /// Price information related to the subscription
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("priceInfo")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("priceInfo")]
        public SourceGeneratedPriceInfoV2? PriceInfo { get; set; }
    }

    public partial class SourceGeneratedSubscriptionPriceConnectionV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("pageInfo")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("pageInfo")]
        public SourceGeneratedSubscriptionPriceConnectionPageInfoV2 PageInfo { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("edges")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("edges")]
        public ICollection<SourceGeneratedSubscriptionPriceEdgeV2?> Edges { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("nodes")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("nodes")]
        public ICollection<SourceGeneratedPriceV2?> Nodes { get; set; }
    }

    [GraphQlObjectType("SubscriptionPriceConnectionPageInfo")]
    public partial class SourceGeneratedSubscriptionPriceConnectionPageInfoV2 : ISourceGeneratedPageInfoV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("endCursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("endCursor")]
        public string? EndCursor { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("hasNextPage")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("hasNextPage")]
        public bool? HasNextPage { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("hasPreviousPage")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("hasPreviousPage")]
        public bool? HasPreviousPage { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("startCursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("startCursor")]
        public string? StartCursor { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("resolution")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("resolution")]
        public string Resolution { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("currency")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("currency")]
        public string Currency { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("count")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("count")]
        public int Count { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("precision")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("precision")]
        public string? Precision { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("minEnergy")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("minEnergy")]
        public double? MinEnergy { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("minTotal")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("minTotal")]
        public double? MinTotal { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("maxEnergy")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("maxEnergy")]
        public double? MaxEnergy { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("maxTotal")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("maxTotal")]
        public double? MaxTotal { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unimplementedField")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unimplementedField")]
        public string? UnimplementedField { get; set; }
        [Obsolete(@"should not be generated")]
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("unimplementedDeprecatedField")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("unimplementedDeprecatedField")]
        public string? UnimplementedDeprecatedField { get; set; }
    }

    public partial class SourceGeneratedSubscriptionPriceEdgeV2
    {
        /// <summary>
        /// The global ID of the element
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("cursor")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("cursor")]
        public string Cursor { get; set; }
        /// <summary>
        /// A single price node
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("node")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("node")]
        public SourceGeneratedPriceV2? Node { get; set; }
    }

    public partial class SourceGeneratedViewerV2
    {
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("login")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("login")]
        public string? Login { get; set; }
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("name")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("name")]
        public string? Name { get; set; }
        /// <summary>
        /// The type of account for the logged-in user.
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("accountType")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("accountType")]
        public ICollection<string> AccountType { get; set; }
        /// <summary>
        /// All homes visible to the logged-in user
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("homes")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("homes")]
        public ICollection<SourceGeneratedHomeV2?> Homes { get; set; }
        /// <summary>
        /// Single home by its ID
        /// </summary>
        #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
        [JsonProperty("home")]
        #endif
        [System.Text.Json.Serialization.JsonPropertyName("home")]
        public SourceGeneratedHomeV2 Home { get; set; }
    }
    #endregion
    #nullable restore
}
