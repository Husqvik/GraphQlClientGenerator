#region GraphQL type helpers
public static class GraphQlTypes
{
    public const string Boolean = "Boolean";
    public const string DynamicType = "DynamicType";
    public const string Float = "Float";
    public const string Id = "ID";
    public const string Int = "Int";
    public const string String = "String";

    public const string Avatar = "Avatar";
    public const string PriceLevel = "PriceLevel";
    public const string Resolution = "Resolution";

    public const string AwayMode = "AwayMode";
    public const string AwayModeSettings = "AwayModeSettings";
    public const string Comparison = "Comparison";
    public const string ComparisonData = "ComparisonData";
    public const string Consumption = "Consumption";
    public const string ConsumptionMonth = "ConsumptionMonth";
    public const string Device = "Device";
    public const string Disaggregation = "Disaggregation";
    public const string Feed = "Feed";
    public const string FeedItem = "FeedItem";
    public const string Home = "Home";
    public const string Me = "Me";
    public const string PreLiveComparison = "PreLiveComparison";
    public const string PriceRating = "PriceRating";
    public const string PriceRatingEntry = "PriceRatingEntry";
    public const string ProcessStep = "ProcessStep";
    public const string PushNotification = "PushNotification";
    public const string Query = "Query";
    public const string SignupStatus = "SignupStatus";
    public const string Subscription = "Subscription";
    public const string Weather = "Weather";

    public static readonly IReadOnlyDictionary<global::System.Type, string> ReverseMapping =
        new Dictionary<global::System.Type, string>
        {
            { typeof(bool), "Boolean" },
            { typeof(DateTimeOffset), "String" },
            { typeof(int), "Int" },
            { typeof(string), "String" },
            { typeof(decimal), "Float" },
            { typeof(Guid), "ID" }
        };
}
#endregion

#region enums
public enum Avatar
{
    [EnumMember(Value = "floorhouse1")] Floorhouse1,
    [EnumMember(Value = "floorhouse2")] Floorhouse2,
    [EnumMember(Value = "floorhouse3")] Floorhouse3,
    [EnumMember(Value = "castle")] Castle,
    [EnumMember(Value = "apartment")] Apartment,
    [EnumMember(Value = "cottage")] Cottage,
    [EnumMember(Value = "rowhouse")] Rowhouse
}

public enum PriceLevel
{
    [EnumMember(Value = "low")] Low,
    [EnumMember(Value = "normal")] Normal,
    [EnumMember(Value = "high")] High
}

public enum Resolution
{
    [EnumMember(Value = "annual")] Annual,
    [EnumMember(Value = "monthly")] Monthly
}
#endregion

#region data classes
public partial class Query
{
    public Me Me { get; set; }
}

public partial class Me
{
    public Guid? Id { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public string FullName { get; set; }
    public string Ssn { get; set; }
    public string Email { get; set; }
    public string Language { get; set; }
    public string Tone { get; set; }
    public ICollection<Avatar> Avatars { get; set; }
    public Home Home { get; set; }
    public ICollection<Home> Homes { get; set; }
    public Feed Feed { get; set; }
    public ICollection<object> EnergyStatements { get; set; }
}

public partial class Home
{
    public Guid? Id { get; set; }
    public Avatar? Avatar { get; set; }
    public string TimeZone { get; set; }
    public Subscription Subscription { get; set; }
    public ICollection<ConsumptionMonth> ConsumptionMonths { get; set; }
    public Consumption Consumption { get; set; }
    public PreLiveComparison PreLiveComparison { get; set; }
    public ICollection<Comparison> Comparisons { get; set; }
    #if !GRAPHQL_GENERATOR_DISABLE_NEWTONSOFT_JSON
    [JsonProperty("comparison_current_month")]
    #endif
    public Comparison ComparisonCurrentMonth { get; set; }
    public object Profile { get; set; }
    public object ProfileQuestions { get; set; }
    public object Thermostat { get; set; }
    public ICollection<object> Temperatures { get; set; }
    public SignupStatus SignupStatus { get; set; }
    public ICollection<Disaggregation> Disaggregation { get; set; }
    public ICollection<Device> Devices { get; set; }
    public Weather Weather { get; set; }
    public VacationMode AwayMode { get; set; }
}

public partial class Subscription
{
    public Guid? Id { get; set; }
    public DateTimeOffset? ValidFrom { get; set; }
    public DateTimeOffset? ValidTo { get; set; }
    public string Status { get; set; }
    public int? BillingRegionId { get; set; }
    public ICollection<object> EnergyStatements { get; set; }
    public PriceRating PriceRating { get; set; }
}

public partial class PriceRating
{
    public decimal? MinPrice { get; set; }
    public decimal? MaxPrice { get; set; }
    public ICollection<PriceRatingEntry> Entries { get; set; }
}

public partial class PriceRatingEntry
{
    public string Time { get; set; }
    public decimal? Price { get; set; }
    public PriceLevel? Level { get; set; }
    public decimal? Difference { get; set; }
}

public partial class ConsumptionMonth
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public decimal? Kwh { get; set; }
    public decimal? Cost { get; set; }
    public bool? IsComplete { get; set; }
    public decimal? KwhEstimate { get; set; }
    public decimal? CostEstimate { get; set; }
}

public partial class Consumption
{
    public object AnnualValues { get; set; }
    public object MonthlyValues { get; set; }
    public object WeeklyValues { get; set; }
    public object DailyValues { get; set; }
    public object HourlyValues { get; set; }
    public decimal? TotalConsumption { get; set; }
    public decimal? EnergyCost { get; set; }
    public decimal? TotalCost { get; set; }
    public string Currency { get; set; }
    public DateTimeOffset? LatestTransactionTimestamp { get; set; }
    public string TimeZone { get; set; }
}

public partial class PreLiveComparison
{
    public string HomeId { get; set; }
    public bool? BasedOnActuals { get; set; }
    public Comparison PreviousYear { get; set; }
    public ICollection<Comparison> PreviousYearMonths { get; set; }
}

public partial class Comparison
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public string Resolution { get; set; }
    public string HomeEfficency { get; set; }
    public string HomeEfficencyDescription { get; set; }
    public ComparisonData Home { get; set; }
    public ComparisonData Average { get; set; }
    public ComparisonData Efficient { get; set; }
}

public partial class ComparisonData
{
    public decimal? Cost { get; set; }
    public decimal? Consumption { get; set; }
}

public partial class SignupStatus
{
    public ProcessStep FeedStep { get; set; }
    public ProcessStep AvatarStep { get; set; }
    public ICollection<ProcessStep> Steps { get; set; }
}

public partial class ProcessStep
{
    public DateTimeOffset? Timestamp { get; set; }
    public bool? IsComplete { get; set; }
    public string Title { get; set; }
    public string Description { get; set; }
}

public partial class Disaggregation
{
    public int? Year { get; set; }
    public int? Month { get; set; }
    public decimal? FixedConsumptionKwh { get; set; }
    public int? FixedConsumptionKwhPercent { get; set; }
    public decimal? FixedConsumptionCost { get; set; }
    public decimal? HeatingConsumptionKwh { get; set; }
    public int? HeatingConsumptionKwhPercent { get; set; }
    public decimal? HeatingConsumptionCost { get; set; }
    public decimal? BehaviorConsumptionKwh { get; set; }
    public int? BehaviorConsumptionKwhPercent { get; set; }
    public decimal? BehaviorConsumptionCost { get; set; }
    public string Currency { get; set; }
    public bool? IsValid { get; set; }
}

public partial class Device
{
    public string DeviceId { get; set; }
    public string Type { get; set; }
    public bool? IsControllable { get; set; }
    public string ExternalId { get; set; }
    public string Name { get; set; }
    public bool? IsBatteryLow { get; set; }
    public bool? IsSignalLow { get; set; }
    public bool? IsAlive { get; set; }
    public ICollection<string> Capabilities { get; set; }
    public object Properties { get; set; }
}

public partial class Weather
{
    public decimal? Temperature { get; set; }
    public DateTimeOffset? Timestamp { get; set; }
    public string Summary { get; set; }
    public string Type { get; set; }
}

public partial class VacationMode
{
    public bool? IsSupported { get; set; }
    public AwayModeSettings Settings { get; set; }
}

public partial class AwayModeSettings
{
    public DateTimeOffset? From { get; set; }
    public DateTimeOffset? To { get; set; }
}

public partial class Feed
{
    public int? NumberOfItems { get; set; }
    public ICollection<FeedItem> Items { get; set; }
    public ICollection<PushNotification> PushNotifications { get; set; }
}

public partial class FeedItem
{
    public int? Id { get; set; }
    public string MessageTypeId { get; set; }
    public string Link { get; set; }
    public string Text { get; set; }
    public DateTimeOffset? CreatedAt { get; set; }
    public DateTimeOffset? ModifiedAt { get; set; }
}

public partial class PushNotification
{
    public int? Id { get; set; }
    public string Link { get; set; }
    public string Text { get; set; }
}
#endregion
